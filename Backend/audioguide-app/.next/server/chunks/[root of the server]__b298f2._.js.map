{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 167, "column": 0}, "map": {"version":3,"sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/src/app/api/guides/list/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport { Agent } from '@fileverse/agents'\nimport axios from 'axios'\n\nconst initAgent = () => {\n  return new Agent({ \n    chain: process.env.CHAIN || 'gnosis',\n    privateKey: process.env.PRIVATE_KEY || '',\n    pinataJWT: process.env.PINATA_JWT || '',\n    pinataGateway: process.env.PINATA_GATEWAY || '',\n    pimlicoAPIKey: process.env.PIMLICO_API_KEY || '',\n  })\n}\n\nasync function getIpfsContent(ipfsHash: string) {\n  try {\n    const hash = ipfsHash.replace('ipfs://', '')\n    const gateway = process.env.PINATA_GATEWAY || 'cyan-genetic-barracuda-339.mypinata.cloud'\n    const url = `https://${gateway}/ipfs/${hash}`\n\n    const response = await axios.get(url, {\n      headers: {\n        'Authorization': `Bearer ${process.env.PINATA_JWT}`\n      }\n    })\n\n    return typeof response.data === 'string' ? response.data : response.data.content\n  } catch (error) {\n    console.error('Failed to fetch IPFS content:', error)\n    return null\n  }\n}\n\nexport async function GET() {\n  try {\n    const agent = initAgent()\n    const guides = []\n\n    // Just use 'DaVinci' namespace to get all guides\n    await agent.setupStorage('DaVinci')\n    \n    await addLog('Fetching all available guides')\n    \n    // Try to fetch files from multiple possible namespaces\n    const namespaces = ['DaVinci'] // Add more if needed\n    \n    for (const namespace of namespaces) {\n      console.log('Checking namespace:', namespace)\n      const maxFileId = 10n\n      \n      for (let fileId = 0n; fileId <= maxFileId; fileId++) {\n        try {\n          await addLog(`Checking file ID: ${fileId.toString()}`)\n          const file = await agent.getFile(fileId)\n          \n          if (file && file.contentIpfsHash) {\n            await addLog(`Found file: ${JSON.stringify(file)}`)\n            const content = await getIpfsContent(file.contentIpfsHash)\n            \n            if (content) {\n              const titleMatch = content.match(/^# (.*)/m)\n              const title = titleMatch ? titleMatch[1] : 'Untitled Guide'\n              const mainContent = content.replace(/^# .*\\n/, '').trim()\n\n              // Check if guide already exists (avoid duplicates)\n              if (!guides.some(g => g.fileId === fileId.toString())) {\n                guides.push({\n                  fileId: fileId.toString(),\n                  title,\n                  content: mainContent,\n                  createdAt: new Date().toISOString()\n                })\n                await addLog(`Added guide: ${title} (File ID: ${fileId.toString()})`)\n              }\n            }\n          }\n        } catch (error) {\n          console.error('Error with file ID:', fileId.toString(), error)\n          continue\n        }\n      }\n    }\n\n    await addLog(`Total guides found: ${guides.length}`)\n    return NextResponse.json({ guides })\n  } catch (error) {\n    console.error('Failed to fetch guides list:', error)\n    return NextResponse.json({ guides: [] })\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,MAAM,YAAY;IAChB,OAAO,IAAI,gJAAA,CAAA,QAAK,CAAC;QACf,OAAO,QAAQ,GAAG,CAAC,KAAK,IAAI;QAC5B,YAAY,QAAQ,GAAG,CAAC,WAAW,IAAI;QACvC,WAAW,QAAQ,GAAG,CAAC,UAAU,IAAI;QACrC,eAAe,QAAQ,GAAG,CAAC,cAAc,IAAI;QAC7C,eAAe,QAAQ,GAAG,CAAC,eAAe,IAAI;IAChD;AACF;AAEA,eAAe,eAAe,QAAgB;IAC5C,IAAI;QACF,MAAM,OAAO,SAAS,OAAO,CAAC,WAAW;QACzC,MAAM,UAAU,QAAQ,GAAG,CAAC,cAAc,IAAI;QAC9C,MAAM,MAAM,CAAC,QAAQ,EAAE,QAAQ,MAAM,EAAE,MAAM;QAE7C,MAAM,WAAW,MAAM,uIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,KAAK;YACpC,SAAS;gBACP,iBAAiB,CAAC,OAAO,EAAE,QAAQ,GAAG,CAAC,UAAU,EAAE;YACrD;QACF;QAEA,OAAO,OAAO,SAAS,IAAI,KAAK,WAAW,SAAS,IAAI,GAAG,SAAS,IAAI,CAAC,OAAO;IAClF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO;IACT;AACF;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,QAAQ;QACd,MAAM,SAAS,EAAE;QAEjB,iDAAiD;QACjD,MAAM,MAAM,YAAY,CAAC;QAEzB,MAAM,OAAO;QAEb,uDAAuD;QACvD,MAAM,aAAa;YAAC;SAAU,CAAC,qBAAqB;;QAEpD,KAAK,MAAM,aAAa,WAAY;YAClC,QAAQ,GAAG,CAAC,uBAAuB;YACnC,MAAM,YAAY,GAAG;YAErB,IAAK,IAAI,SAAS,EAAE,EAAE,UAAU,WAAW,SAAU;gBACnD,IAAI;oBACF,MAAM,OAAO,CAAC,kBAAkB,EAAE,OAAO,QAAQ,IAAI;oBACrD,MAAM,OAAO,MAAM,MAAM,OAAO,CAAC;oBAEjC,IAAI,QAAQ,KAAK,eAAe,EAAE;wBAChC,MAAM,OAAO,CAAC,YAAY,EAAE,KAAK,SAAS,CAAC,OAAO;wBAClD,MAAM,UAAU,MAAM,eAAe,KAAK,eAAe;wBAEzD,IAAI,SAAS;4BACX,MAAM,aAAa,QAAQ,KAAK,CAAC;4BACjC,MAAM,QAAQ,aAAa,UAAU,CAAC,EAAE,GAAG;4BAC3C,MAAM,cAAc,QAAQ,OAAO,CAAC,WAAW,IAAI,IAAI;4BAEvD,mDAAmD;4BACnD,IAAI,CAAC,OAAO,IAAI,CAAC,CAAA,IAAK,EAAE,MAAM,KAAK,OAAO,QAAQ,KAAK;gCACrD,OAAO,IAAI,CAAC;oCACV,QAAQ,OAAO,QAAQ;oCACvB;oCACA,SAAS;oCACT,WAAW,IAAI,OAAO,WAAW;gCACnC;gCACA,MAAM,OAAO,CAAC,aAAa,EAAE,MAAM,WAAW,EAAE,OAAO,QAAQ,GAAG,CAAC,CAAC;4BACtE;wBACF;oBACF;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,uBAAuB,OAAO,QAAQ,IAAI;oBACxD;gBACF;YACF;QACF;QAEA,MAAM,OAAO,CAAC,oBAAoB,EAAE,OAAO,MAAM,EAAE;QACnD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAO;IACpC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,QAAQ,EAAE;QAAC;IACxC;AACF"}},
    {"offset": {"line": 256, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}