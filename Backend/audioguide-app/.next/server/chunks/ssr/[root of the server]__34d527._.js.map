{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/src/app/visit/page.tsx"],"sourcesContent":["'use client'\n\nimport { useState, useEffect, useRef } from 'react'\nimport { useRouter } from 'next/navigation'\nimport axios from 'axios'\n\ninterface Guide {\n  fileId: string;\n  title: string;\n  content: string;\n  ipfsHash: string;\n  timestamp: string;\n}\n\ntype Language = 'en' | 'fr' | 'es'\n\ninterface LanguageOption {\n  code: Language;\n  name: string;\n  flag: string;\n}\n\nconst languages: LanguageOption[] = [\n  { code: 'en', name: 'English', flag: 'ðŸ‡¬ðŸ‡§' },\n  { code: 'fr', name: 'FranÃ§ais', flag: 'ðŸ‡«ðŸ‡·' },\n  { code: 'es', name: 'EspaÃ±ol', flag: 'ðŸ‡ªðŸ‡¸' }\n]\n\ninterface Segment {\n  title: string;\n  content: string;\n  translatedContent?: string;\n  isTranslating?: boolean;\n}\n\nexport default function VisitPage() {\n  const router = useRouter()\n  const [walletAddress, setWalletAddress] = useState<string | null>(null)\n  const [isLoading, setIsLoading] = useState(true)\n  const [guides, setGuides] = useState<Guide[]>([])\n  const [selectedGuide, setSelectedGuide] = useState<Guide | null>(null)\n  const [selectedLanguage, setSelectedLanguage] = useState<Language | null>(null)\n  const [isTranslating, setIsTranslating] = useState(false)\n  const [segments, setSegments] = useState<Segment[]>([])\n  const [isSegmenting, setIsSegmenting] = useState(false)\n  const [audioPlaying, setAudioPlaying] = useState<number | null>(null)\n  const [isPlaying, setIsPlaying] = useState<number | null>(null)\n  const audioRef = useRef<HTMLAudioElement | null>(null)\n\n  useEffect(() => {\n    const address = localStorage.getItem('walletAddress')\n    if (!address) {\n      router.push('/')\n      return\n    }\n    setWalletAddress(address)\n    setIsLoading(false)\n  }, [router])\n\n  useEffect(() => {\n    fetchGuides()\n  }, [])\n\n  const fetchGuides = async () => {\n    try {\n      setIsLoading(true)\n      const response = await axios.get('/api/guides/list')\n      if (response.data.guides) {\n        setGuides(response.data.guides)\n      }\n    } catch (error) {\n      console.error('Failed to fetch guides:', error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleLanguageSelect = async (lang: Language) => {\n    console.log('Language selected:', lang);\n    setSelectedLanguage(lang);\n    \n    if (selectedGuide && lang !== 'en') {\n      setIsTranslating(true);\n      try {\n        const response = await axios.post('/api/process-guide', {\n          content: selectedGuide.content,\n          language: lang\n        });\n        \n        if (response.data.translatedContent) {\n          setSegments([{\n            title: selectedGuide.title,\n            content: selectedGuide.content,\n            translatedContent: response.data.translatedContent\n          }]);\n        }\n      } catch (error) {\n        console.error('Failed to translate guide:', error);\n      } finally {\n        setIsTranslating(false);\n      }\n    }\n  };\n\n  const handleGuideClick = (guide: Guide) => {\n    setSelectedGuide(guide);\n    setSelectedLanguage('en');  // Default to English\n    setSegments([{\n      title: guide.title,\n      content: guide.content\n    }]);\n  }\n\n  const handlePlayAudio = async (segment: Segment, segmentIndex: number) => {\n    try {\n      if (isPlaying === segmentIndex) {\n        if (audioRef.current?.paused) {\n          await audioRef.current?.play();\n        } else {\n          audioRef.current?.pause();\n        }\n        return;\n      }\n\n      if (audioRef.current) {\n        audioRef.current.pause();\n        audioRef.current = null;\n      }\n\n      setIsPlaying(segmentIndex);\n      \n      const textToSpeak = selectedLanguage !== 'en' && segment.translatedContent\n        ? segment.translatedContent\n        : segment.content;\n\n      const response = await axios.post('/api/text-to-speech', { \n        content: textToSpeak,\n        language: selectedLanguage\n      }, {\n        responseType: 'blob'\n      });\n\n      const audioBlob = new Blob([response.data], { type: 'audio/mpeg' });\n      const audioUrl = URL.createObjectURL(audioBlob);\n\n      const audio = new Audio(audioUrl);\n      audioRef.current = audio;\n\n      audio.addEventListener('ended', () => {\n        setIsPlaying(null);\n        URL.revokeObjectURL(audioUrl);\n      });\n\n      audio.addEventListener('pause', () => {\n        setAudioPlaying(null);\n      });\n\n      audio.addEventListener('play', () => {\n        setAudioPlaying(segmentIndex);\n      });\n\n      await audio.play();\n\n    } catch (error) {\n      console.error('Failed to generate audio:', error);\n      setIsPlaying(null);\n      setAudioPlaying(null);\n    }\n  };\n\n  if (isLoading) {\n    return <div>Loading guides...</div>\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 dark:bg-gray-900\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">UnWrit Guide</h1>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center\">\n                <div className=\"w-8 h-8 rounded-full bg-indigo-600 flex items-center justify-center text-white text-sm mr-2\">\n                  {walletAddress?.slice(2, 4)}\n                </div>\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  {walletAddress?.slice(0, 6)}...{walletAddress?.slice(-4)}\n                </span>\n              </div>\n              <button\n                onClick={() => {\n                  localStorage.removeItem('walletAddress')\n                  router.push('/')\n                }}\n                className=\"text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white\"\n              >\n                Disconnect\n              </button>\n            </div>\n          </div>\n\n          <div className=\"space-y-8\">\n            <div>\n              <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-4\">\n                Available Guides\n              </h2>\n              {guides.length === 0 ? (\n                <div className=\"text-gray-600 dark:text-gray-400 text-center py-8\">\n                  No guides available yet\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {guides.map((guide) => (\n                    <div\n                      key={guide.fileId}\n                      className=\"bg-gray-50 dark:bg-gray-700 p-4 rounded-lg shadow-sm hover:shadow-md transition-shadow relative\"\n                    >\n                      <h3 className=\"font-semibold text-gray-900 dark:text-white mb-2\">\n                        {guide.title}\n                      </h3>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-4 line-clamp-3\">\n                        {guide.content}\n                      </p>\n                      {selectedGuide?.fileId === guide.fileId ? (\n                        <div className=\"flex flex-wrap gap-2\">\n                          {languages.map((lang) => (\n                            <button\n                              key={lang.code}\n                              onClick={() => handleLanguageSelect(lang.code)}\n                              className={`flex items-center px-3 py-2 rounded-md text-sm font-medium transition-colors\n                                ${selectedLanguage === lang.code \n                                  ? 'bg-indigo-600 text-white' \n                                  : 'bg-gray-200 dark:bg-gray-600 text-gray-700 dark:text-gray-200 hover:bg-indigo-500 hover:text-white'\n                                }`}\n                            >\n                              <span className=\"mr-2 text-lg\">{lang.flag}</span>\n                              {lang.name}\n                            </button>\n                          ))}\n                        </div>\n                      ) : (\n                        <button\n                          onClick={() => handleGuideClick(guide)}\n                          className=\"w-full px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n                        >\n                          Load Guide\n                        </button>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {selectedGuide && selectedLanguage && (\n              <div className=\"mt-8\">\n                <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-4\">\n                  {selectedGuide.title}\n                </h2>\n                \n                {isTranslating || isSegmenting ? (\n                  <div className=\"text-center py-4\">\n                    {isTranslating ? 'Translating...' : 'Organizing content...'}\n                  </div>\n                ) : segments.length > 0 ? (\n                  <div className=\"space-y-8\">\n                    {segments.map((segment, index) => (\n                      <div key={index} className=\"bg-white dark:bg-gray-700 rounded-lg p-6 shadow-sm\">\n                        <div className=\"flex items-center mb-4\">\n                          <div className=\"flex items-center gap-2\">\n                            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                              {selectedLanguage === 'en' ? segment.title : segment.translatedTitle || segment.title}\n                            </h3>\n                            {!segment.isTranslating && (\n                              <button\n                                onClick={() => handlePlayAudio(segment, index)}\n                                className={`w-10 h-10 flex items-center justify-center rounded-full transition-all duration-200 ${\n                                  audioPlaying === index \n                                    ? 'bg-red-500 hover:bg-red-600' \n                                    : 'bg-indigo-500 hover:bg-indigo-600'\n                                }`}\n                                title={audioPlaying === index ? 'Pause' : 'Play'}\n                              >\n                                {audioPlaying === index ? (\n                                  <svg className=\"w-5 h-5 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                                    <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a1 1 0 102 0V8a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                                  </svg>\n                                ) : (\n                                  <svg className=\"w-5 h-5 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                                    <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\" clipRule=\"evenodd\" />\n                                  </svg>\n                                )}\n                              </button>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"prose dark:prose-invert\">\n                          {selectedLanguage === 'en' ? segment.content : segment.translatedContent || segment.content}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"prose dark:prose-invert\">\n                    {selectedGuide.content}\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n} "],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAJA;;;;;AAsBA,MAAM,YAA8B;IAClC;QAAE,MAAM;QAAM,MAAM;QAAW,MAAM;IAAO;IAC5C;QAAE,MAAM;QAAM,MAAM;QAAY,MAAM;IAAO;IAC7C;QAAE,MAAM;QAAM,MAAM;QAAW,MAAM;IAAO;CAC7C;AASc,SAAS;IACtB,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAClE,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW,EAAE;IAChD,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAgB;IACjE,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAmB;IAC1E,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACnD,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAa,EAAE;IACtD,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACjD,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAChE,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAC1D,MAAM,WAAW,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAA2B;IAEjD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,UAAU,aAAa,OAAO,CAAC;QACrC,IAAI,CAAC,SAAS;YACZ,OAAO,IAAI,CAAC;YACZ;QACF;QACA,iBAAiB;QACjB,aAAa;IACf,GAAG;QAAC;KAAO;IAEX,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR;IACF,GAAG,EAAE;IAEL,MAAM,cAAc;QAClB,IAAI;YACF,aAAa;YACb,MAAM,WAAW,MAAM,qIAAA,CAAA,UAAK,CAAC,GAAG,CAAC;YACjC,IAAI,SAAS,IAAI,CAAC,MAAM,EAAE;gBACxB,UAAU,SAAS,IAAI,CAAC,MAAM;YAChC;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,2BAA2B;QAC3C,SAAU;YACR,aAAa;QACf;IACF;IAEA,MAAM,uBAAuB,OAAO;QAClC,QAAQ,GAAG,CAAC,sBAAsB;QAClC,oBAAoB;QAEpB,IAAI,iBAAiB,SAAS,MAAM;YAClC,iBAAiB;YACjB,IAAI;gBACF,MAAM,WAAW,MAAM,qIAAA,CAAA,UAAK,CAAC,IAAI,CAAC,sBAAsB;oBACtD,SAAS,cAAc,OAAO;oBAC9B,UAAU;gBACZ;gBAEA,IAAI,SAAS,IAAI,CAAC,iBAAiB,EAAE;oBACnC,YAAY;wBAAC;4BACX,OAAO,cAAc,KAAK;4BAC1B,SAAS,cAAc,OAAO;4BAC9B,mBAAmB,SAAS,IAAI,CAAC,iBAAiB;wBACpD;qBAAE;gBACJ;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,8BAA8B;YAC9C,SAAU;gBACR,iBAAiB;YACnB;QACF;IACF;IAEA,MAAM,mBAAmB,CAAC;QACxB,iBAAiB;QACjB,oBAAoB,OAAQ,qBAAqB;QACjD,YAAY;YAAC;gBACX,OAAO,MAAM,KAAK;gBAClB,SAAS,MAAM,OAAO;YACxB;SAAE;IACJ;IAEA,MAAM,kBAAkB,OAAO,SAAkB;QAC/C,IAAI;YACF,IAAI,cAAc,cAAc;gBAC9B,IAAI,SAAS,OAAO,EAAE,QAAQ;oBAC5B,MAAM,SAAS,OAAO,EAAE;gBAC1B,OAAO;oBACL,SAAS,OAAO,EAAE;gBACpB;gBACA;YACF;YAEA,IAAI,SAAS,OAAO,EAAE;gBACpB,SAAS,OAAO,CAAC,KAAK;gBACtB,SAAS,OAAO,GAAG;YACrB;YAEA,aAAa;YAEb,MAAM,cAAc,qBAAqB,QAAQ,QAAQ,iBAAiB,GACtE,QAAQ,iBAAiB,GACzB,QAAQ,OAAO;YAEnB,MAAM,WAAW,MAAM,qIAAA,CAAA,UAAK,CAAC,IAAI,CAAC,uBAAuB;gBACvD,SAAS;gBACT,UAAU;YACZ,GAAG;gBACD,cAAc;YAChB;YAEA,MAAM,YAAY,IAAI,KAAK;gBAAC,SAAS,IAAI;aAAC,EAAE;gBAAE,MAAM;YAAa;YACjE,MAAM,WAAW,IAAI,eAAe,CAAC;YAErC,MAAM,QAAQ,IAAI,MAAM;YACxB,SAAS,OAAO,GAAG;YAEnB,MAAM,gBAAgB,CAAC,SAAS;gBAC9B,aAAa;gBACb,IAAI,eAAe,CAAC;YACtB;YAEA,MAAM,gBAAgB,CAAC,SAAS;gBAC9B,gBAAgB;YAClB;YAEA,MAAM,gBAAgB,CAAC,QAAQ;gBAC7B,gBAAgB;YAClB;YAEA,MAAM,MAAM,IAAI;QAElB,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,6BAA6B;YAC3C,aAAa;YACb,gBAAgB;QAClB;IACF;IAEA,IAAI,WAAW;QACb,qBAAO,8OAAC;sBAAI;;;;;;IACd;IAEA,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAI,WAAU;sBACb,cAAA,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAG,WAAU;0CAAmD;;;;;;0CACjE,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCAAI,WAAU;;0DACb,8OAAC;gDAAI,WAAU;0DACZ,eAAe,MAAM,GAAG;;;;;;0DAE3B,8OAAC;gDAAK,WAAU;;oDACb,eAAe,MAAM,GAAG;oDAAG;oDAAI,eAAe,MAAM,CAAC;;;;;;;;;;;;;kDAG1D,8OAAC;wCACC,SAAS;4CACP,aAAa,UAAU,CAAC;4CACxB,OAAO,IAAI,CAAC;wCACd;wCACA,WAAU;kDACX;;;;;;;;;;;;;;;;;;kCAML,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;;kDACC,8OAAC;wCAAG,WAAU;kDAA2D;;;;;;oCAGxE,OAAO,MAAM,KAAK,kBACjB,8OAAC;wCAAI,WAAU;kDAAoD;;;;;6DAInE,8OAAC;wCAAI,WAAU;kDACZ,OAAO,GAAG,CAAC,CAAC,sBACX,8OAAC;gDAEC,WAAU;;kEAEV,8OAAC;wDAAG,WAAU;kEACX,MAAM,KAAK;;;;;;kEAEd,8OAAC;wDAAE,WAAU;kEACV,MAAM,OAAO;;;;;;oDAEf,eAAe,WAAW,MAAM,MAAM,iBACrC,8OAAC;wDAAI,WAAU;kEACZ,UAAU,GAAG,CAAC,CAAC,qBACd,8OAAC;gEAEC,SAAS,IAAM,qBAAqB,KAAK,IAAI;gEAC7C,WAAW,CAAC;gCACV,EAAE,qBAAqB,KAAK,IAAI,GAC5B,6BACA,sGACF;;kFAEJ,8OAAC;wEAAK,WAAU;kFAAgB,KAAK,IAAI;;;;;;oEACxC,KAAK,IAAI;;+DATL,KAAK,IAAI;;;;;;;;;6EAcpB,8OAAC;wDACC,SAAS,IAAM,iBAAiB;wDAChC,WAAU;kEACX;;;;;;;+CA9BE,MAAM,MAAM;;;;;;;;;;;;;;;;4BAwC1B,iBAAiB,kCAChB,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCAAG,WAAU;kDACX,cAAc,KAAK;;;;;;oCAGrB,iBAAiB,6BAChB,8OAAC;wCAAI,WAAU;kDACZ,gBAAgB,mBAAmB;;;;;+CAEpC,SAAS,MAAM,GAAG,kBACpB,8OAAC;wCAAI,WAAU;kDACZ,SAAS,GAAG,CAAC,CAAC,SAAS,sBACtB,8OAAC;gDAAgB,WAAU;;kEACzB,8OAAC;wDAAI,WAAU;kEACb,cAAA,8OAAC;4DAAI,WAAU;;8EACb,8OAAC;oEAAG,WAAU;8EACX,qBAAqB,OAAO,QAAQ,KAAK,GAAG,QAAQ,eAAe,IAAI,QAAQ,KAAK;;;;;;gEAEtF,CAAC,QAAQ,aAAa,kBACrB,8OAAC;oEACC,SAAS,IAAM,gBAAgB,SAAS;oEACxC,WAAW,CAAC,oFAAoF,EAC9F,iBAAiB,QACb,gCACA,qCACJ;oEACF,OAAO,iBAAiB,QAAQ,UAAU;8EAEzC,iBAAiB,sBAChB,8OAAC;wEAAI,WAAU;wEAAqB,MAAK;wEAAe,SAAQ;kFAC9D,cAAA,8OAAC;4EAAK,UAAS;4EAAU,GAAE;4EAAsH,UAAS;;;;;;;;;;6FAG5J,8OAAC;wEAAI,WAAU;wEAAqB,MAAK;wEAAe,SAAQ;kFAC9D,cAAA,8OAAC;4EAAK,UAAS;4EAAU,GAAE;4EAA0G,UAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;kEAO1J,8OAAC;wDAAI,WAAU;kEACZ,qBAAqB,OAAO,QAAQ,OAAO,GAAG,QAAQ,iBAAiB,IAAI,QAAQ,OAAO;;;;;;;+CA9BrF;;;;;;;;;6DAoCd,8OAAC;wCAAI,WAAU;kDACZ,cAAc,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAU1C"}},
    {"offset": {"line": 609, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}