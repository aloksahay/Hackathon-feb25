{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/src/app/api/logs/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\n\n// In-memory storage for logs (in production, you'd use a proper database)\nlet serverLogs: { timestamp: string; message: string }[] = []\n\nexport async function GET() {\n  return NextResponse.json({ logs: serverLogs }, { headers: { 'no-log': 'true' } })\n}\n\nexport async function POST(request: Request) {\n  try {\n    const { log } = await request.json()\n    serverLogs.push(log)\n    \n    // Keep only last 100 logs\n    if (serverLogs.length > 100) {\n      serverLogs = serverLogs.slice(-100)\n    }\n    \n    return NextResponse.json({ success: true }, { headers: { 'no-log': 'true' } })\n  } catch (error) {\n    console.error('Failed to store log:', error)\n    return NextResponse.json(\n      { error: 'Failed to store log' }, \n      { status: 500, headers: { 'no-log': 'true' } }\n    )\n  }\n} "],"names":[],"mappings":";;;;AAAA;;AAEA,0EAA0E;AAC1E,IAAI,aAAuD,EAAE;AAEtD,eAAe;IACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,MAAM;IAAW,GAAG;QAAE,SAAS;YAAE,UAAU;QAAO;IAAE;AACjF;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,QAAQ,IAAI;QAClC,WAAW,IAAI,CAAC;QAEhB,0BAA0B;QAC1B,IAAI,WAAW,MAAM,GAAG,KAAK;YAC3B,aAAa,WAAW,KAAK,CAAC,CAAC;QACjC;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAK,GAAG;YAAE,SAAS;gBAAE,UAAU;YAAO;QAAE;IAC9E,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAsB,GAC/B;YAAE,QAAQ;YAAK,SAAS;gBAAE,UAAU;YAAO;QAAE;IAEjD;AACF"}},
    {"offset": {"line": 99, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}