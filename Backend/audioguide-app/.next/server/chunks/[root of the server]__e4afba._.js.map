{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 127, "column": 0}, "map": {"version":3,"sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/src/app/api/upload/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport { Agent } from '@fileverse/agents'\n\nconst initAgent = () => {\n  return new Agent({ \n    chain: 'sepolia',\n    privateKey: process.env.PRIVATE_KEY!,\n    pinataJWT: process.env.PINATA_JWT!,\n    pinataGateway: process.env.PINATA_GATEWAY!,\n    pimlicoAPIKey: process.env.PIMLICO_API_KEY!,\n  })\n}\n\nexport async function POST(request: Request) {\n  try {\n    const { content, action, fileId, walletAddress } = await request.json()\n    \n    const agent = initAgent()\n    await agent.setupStorage('Unwrit')\n\n    // Handle deletion\n    if (action === 'delete' && fileId) {\n      await agent.delete(BigInt(fileId))\n      return NextResponse.json({ success: true })\n    }\n\n    // Create new file\n    const file = await agent.create(content)\n    console.log('Created file:', file)\n\n    // Get the file to verify and return content\n    const verifyFile = await agent.getFile(file.fileId)\n    \n    return NextResponse.json({ \n      fileId: file.fileId.toString(),\n      content: verifyFile?.content || content,\n      creator: walletAddress,\n      timestamp: new Date().toISOString()\n    })\n  } catch (error) {\n    console.error('Failed to upload:', error)\n    return NextResponse.json({ error: 'Failed to upload content' }, { status: 500 })\n  }\n}\n\nexport async function GET() {\n  try {\n    const agent = initAgent()\n    await agent.setupStorage('Unwrit')\n\n    // Scan first 20 files\n    const guides = []\n    for (let i = 0n; i < 20n; i++) {\n      try {\n        const file = await agent.getFile(i)\n        if (file?.content) {\n          const titleMatch = file.content.match(/^# (.*)/m)\n          const title = titleMatch ? titleMatch[1] : 'Untitled Guide'\n          const mainContent = file.content.replace(/^# .*\\n/, '').trim()\n\n          guides.push({\n            fileId: i.toString(),\n            title,\n            content: mainContent,\n            hash: file.contentIpfsHash\n          })\n        }\n      } catch {\n        // Skip non-existent files\n      }\n    }\n\n    return NextResponse.json({ guides })\n  } catch (error) {\n    console.error('Failed to fetch guides:', error)\n    return NextResponse.json({ guides: [] })\n  }\n} "],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,YAAY;IAChB,OAAO,IAAI,gJAAA,CAAA,QAAK,CAAC;QACf,OAAO;QACP,YAAY,QAAQ,GAAG,CAAC,WAAW;QACnC,WAAW,QAAQ,GAAG,CAAC,UAAU;QACjC,eAAe,QAAQ,GAAG,CAAC,cAAc;QACzC,eAAe,QAAQ,GAAG,CAAC,eAAe;IAC5C;AACF;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,GAAG,MAAM,QAAQ,IAAI;QAErE,MAAM,QAAQ;QACd,MAAM,MAAM,YAAY,CAAC;QAEzB,kBAAkB;QAClB,IAAI,WAAW,YAAY,QAAQ;YACjC,MAAM,MAAM,MAAM,CAAC,OAAO;YAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAK;QAC3C;QAEA,kBAAkB;QAClB,MAAM,OAAO,MAAM,MAAM,MAAM,CAAC;QAChC,QAAQ,GAAG,CAAC,iBAAiB;QAE7B,4CAA4C;QAC5C,MAAM,aAAa,MAAM,MAAM,OAAO,CAAC,KAAK,MAAM;QAElD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,QAAQ,KAAK,MAAM,CAAC,QAAQ;YAC5B,SAAS,YAAY,WAAW;YAChC,SAAS;YACT,WAAW,IAAI,OAAO,WAAW;QACnC;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA2B,GAAG;YAAE,QAAQ;QAAI;IAChF;AACF;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,QAAQ;QACd,MAAM,MAAM,YAAY,CAAC;QAEzB,sBAAsB;QACtB,MAAM,SAAS,EAAE;QACjB,IAAK,IAAI,IAAI,EAAE,EAAE,IAAI,GAAG,EAAE,IAAK;YAC7B,IAAI;gBACF,MAAM,OAAO,MAAM,MAAM,OAAO,CAAC;gBACjC,IAAI,MAAM,SAAS;oBACjB,MAAM,aAAa,KAAK,OAAO,CAAC,KAAK,CAAC;oBACtC,MAAM,QAAQ,aAAa,UAAU,CAAC,EAAE,GAAG;oBAC3C,MAAM,cAAc,KAAK,OAAO,CAAC,OAAO,CAAC,WAAW,IAAI,IAAI;oBAE5D,OAAO,IAAI,CAAC;wBACV,QAAQ,EAAE,QAAQ;wBAClB;wBACA,SAAS;wBACT,MAAM,KAAK,eAAe;oBAC5B;gBACF;YACF,EAAE,OAAM;YACN,0BAA0B;YAC5B;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAO;IACpC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,QAAQ,EAAE;QAAC;IACxC;AACF"}},
    {"offset": {"line": 210, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}