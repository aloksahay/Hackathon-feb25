{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 127, "column": 0}, "map": {"version":3,"sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/src/app/api/upload/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport { Agent } from '@fileverse/agents'\n\n// Initialize the Fileverse agent\nconst initAgent = () => {\n  return new Agent({ \n    chain: process.env.CHAIN || 'gnosis',\n    privateKey: process.env.PRIVATE_KEY || '',\n    pinataJWT: process.env.PINATA_JWT || '',\n    pinataGateway: process.env.PINATA_GATEWAY || '',\n    pimlicoAPIKey: process.env.PIMLICO_API_KEY || '',\n  })\n}\n\nexport async function GET() {\n  try {\n    const agent = initAgent()\n    await agent.setupStorage('DaVinci')\n    const files = await agent.listFiles()\n    return NextResponse.json({ files })\n  } catch (error) {\n    console.error('Failed to fetch files:', error)\n    return NextResponse.json(\n      { error: 'Failed to fetch files' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const { content, action, fileId, walletAddress } = await request.json()\n    if (!walletAddress) {\n      return NextResponse.json(\n        { error: 'Wallet address required' },\n        { status: 400 }\n      )\n    }\n\n    const agent = initAgent()\n    await agent.setupStorage(`DaVinci-${walletAddress}`, {\n      owner: walletAddress,\n      isPublic: false\n    })\n\n    if (action === 'delete' && fileId) {\n      await agent.delete(BigInt(fileId))\n      return NextResponse.json({ success: true })\n    }\n\n    // Create new file\n    const file = await agent.create(content)\n    console.log('Created file:', file)\n\n    // Verify the file was created\n    const verifyFile = await agent.getFile(file.fileId)\n    console.log('Verified file:', verifyFile)\n\n    return NextResponse.json({ \n      fileId: file.fileId.toString(),\n      content: verifyFile?.content || content,\n      owner: walletAddress\n    })\n  } catch (error) {\n    console.error('Failed to upload:', error)\n    return NextResponse.json(\n      { error: 'Failed to upload content' },\n      { status: 500 }\n    )\n  }\n} "],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,iCAAiC;AACjC,MAAM,YAAY;IAChB,OAAO,IAAI,gJAAA,CAAA,QAAK,CAAC;QACf,OAAO,QAAQ,GAAG,CAAC,KAAK,IAAI;QAC5B,YAAY,QAAQ,GAAG,CAAC,WAAW,IAAI;QACvC,WAAW,QAAQ,GAAG,CAAC,UAAU,IAAI;QACrC,eAAe,QAAQ,GAAG,CAAC,cAAc,IAAI;QAC7C,eAAe,QAAQ,GAAG,CAAC,eAAe,IAAI;IAChD;AACF;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,QAAQ;QACd,MAAM,MAAM,YAAY,CAAC;QACzB,MAAM,QAAQ,MAAM,MAAM,SAAS;QACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAM;IACnC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,GAAG,MAAM,QAAQ,IAAI;QACrE,IAAI,CAAC,eAAe;YAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,QAAQ;QACd,MAAM,MAAM,YAAY,CAAC,CAAC,QAAQ,EAAE,eAAe,EAAE;YACnD,OAAO;YACP,UAAU;QACZ;QAEA,IAAI,WAAW,YAAY,QAAQ;YACjC,MAAM,MAAM,MAAM,CAAC,OAAO;YAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAK;QAC3C;QAEA,kBAAkB;QAClB,MAAM,OAAO,MAAM,MAAM,MAAM,CAAC;QAChC,QAAQ,GAAG,CAAC,iBAAiB;QAE7B,8BAA8B;QAC9B,MAAM,aAAa,MAAM,MAAM,OAAO,CAAC,KAAK,MAAM;QAClD,QAAQ,GAAG,CAAC,kBAAkB;QAE9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,QAAQ,KAAK,MAAM,CAAC,QAAQ;YAC5B,SAAS,YAAY,WAAW;YAChC,OAAO;QACT;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA2B,GACpC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 203, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}