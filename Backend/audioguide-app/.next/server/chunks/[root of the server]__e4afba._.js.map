{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 127, "column": 0}, "map": {"version":3,"sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/src/app/api/upload/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport { Agent } from '@fileverse/agents'\n\n// In-memory store for guides\nlet guides: Array<{\n  fileId: string;\n  content: string;\n  ipfsHash: string;\n  creator: string;\n  timestamp: string;\n}> = []\n\nconst initAgent = () => {\n  return new Agent({ \n    chain: 'sepolia',\n    privateKey: process.env.PRIVATE_KEY!,\n    pinataJWT: process.env.PINATA_JWT!,\n    pinataGateway: process.env.PINATA_GATEWAY!,\n    pimlicoAPIKey: process.env.PIMLICO_API_KEY!,\n  })\n}\n\nexport async function POST(request: Request) {\n  try {\n    const { content, action, fileId, walletAddress } = await request.json()\n    \n    const agent = initAgent()\n    await agent.setupStorage('Unwrit')\n\n    // Handle deletion\n    if (action === 'delete' && fileId) {\n      await agent.delete(BigInt(fileId))\n      guides = guides.filter(g => g.fileId !== fileId)\n      return NextResponse.json({ success: true })\n    }\n\n    // Create new file\n    console.log('Creating file with content:', content.slice(0, 100))\n    const file = await agent.create(content)\n    console.log('Created file:', {\n      fileId: file.fileId.toString(),\n      contentIpfsHash: file.contentIpfsHash\n    })\n\n    // Get the file to verify\n    const verifyFile = await agent.getFile(file.fileId)\n    console.log('Retrieved file:', {\n      fileId: file.fileId.toString(),\n      contentIpfsHash: verifyFile?.contentIpfsHash,\n      portal: verifyFile?.portal,\n      namespace: verifyFile?.namespace\n    })\n\n    // Add to our local store\n    const newGuide = {\n      fileId: file.fileId.toString(),\n      content: content,\n      ipfsHash: verifyFile?.contentIpfsHash || '',\n      creator: walletAddress,\n      timestamp: new Date().toISOString()\n    }\n    guides.push(newGuide)\n    console.log('Added to local store. Total guides:', guides.length)\n\n    return NextResponse.json(newGuide)\n  } catch (error) {\n    console.error('Failed to upload:', error)\n    return NextResponse.json({ error: 'Failed to upload content' }, { status: 500 })\n  }\n}\n\nexport async function GET() {\n  try {\n    // Return guides from our local store\n    const formattedGuides = guides.map(guide => {\n      const titleMatch = guide.content.match(/^# (.*)/m)\n      const title = titleMatch ? titleMatch[1] : 'Untitled Guide'\n      const mainContent = guide.content.replace(/^# .*\\n/, '').trim()\n\n      return {\n        fileId: guide.fileId,\n        title,\n        content: mainContent,\n        ipfsHash: guide.ipfsHash,\n        createdAt: guide.timestamp,\n        creator: guide.creator\n      }\n    })\n\n    console.log(`Returning ${formattedGuides.length} guides from local store`)\n    return NextResponse.json({ guides: formattedGuides })\n  } catch (error) {\n    console.error('Failed to fetch guides:', error)\n    return NextResponse.json({ guides: [] })\n  }\n} "],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,6BAA6B;AAC7B,IAAI,SAMC,EAAE;AAEP,MAAM,YAAY;IAChB,OAAO,IAAI,gJAAA,CAAA,QAAK,CAAC;QACf,OAAO;QACP,YAAY,QAAQ,GAAG,CAAC,WAAW;QACnC,WAAW,QAAQ,GAAG,CAAC,UAAU;QACjC,eAAe,QAAQ,GAAG,CAAC,cAAc;QACzC,eAAe,QAAQ,GAAG,CAAC,eAAe;IAC5C;AACF;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,GAAG,MAAM,QAAQ,IAAI;QAErE,MAAM,QAAQ;QACd,MAAM,MAAM,YAAY,CAAC;QAEzB,kBAAkB;QAClB,IAAI,WAAW,YAAY,QAAQ;YACjC,MAAM,MAAM,MAAM,CAAC,OAAO;YAC1B,SAAS,OAAO,MAAM,CAAC,CAAA,IAAK,EAAE,MAAM,KAAK;YACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAK;QAC3C;QAEA,kBAAkB;QAClB,QAAQ,GAAG,CAAC,+BAA+B,QAAQ,KAAK,CAAC,GAAG;QAC5D,MAAM,OAAO,MAAM,MAAM,MAAM,CAAC;QAChC,QAAQ,GAAG,CAAC,iBAAiB;YAC3B,QAAQ,KAAK,MAAM,CAAC,QAAQ;YAC5B,iBAAiB,KAAK,eAAe;QACvC;QAEA,yBAAyB;QACzB,MAAM,aAAa,MAAM,MAAM,OAAO,CAAC,KAAK,MAAM;QAClD,QAAQ,GAAG,CAAC,mBAAmB;YAC7B,QAAQ,KAAK,MAAM,CAAC,QAAQ;YAC5B,iBAAiB,YAAY;YAC7B,QAAQ,YAAY;YACpB,WAAW,YAAY;QACzB;QAEA,yBAAyB;QACzB,MAAM,WAAW;YACf,QAAQ,KAAK,MAAM,CAAC,QAAQ;YAC5B,SAAS;YACT,UAAU,YAAY,mBAAmB;YACzC,SAAS;YACT,WAAW,IAAI,OAAO,WAAW;QACnC;QACA,OAAO,IAAI,CAAC;QACZ,QAAQ,GAAG,CAAC,uCAAuC,OAAO,MAAM;QAEhE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA2B,GAAG;YAAE,QAAQ;QAAI;IAChF;AACF;AAEO,eAAe;IACpB,IAAI;QACF,qCAAqC;QACrC,MAAM,kBAAkB,OAAO,GAAG,CAAC,CAAA;YACjC,MAAM,aAAa,MAAM,OAAO,CAAC,KAAK,CAAC;YACvC,MAAM,QAAQ,aAAa,UAAU,CAAC,EAAE,GAAG;YAC3C,MAAM,cAAc,MAAM,OAAO,CAAC,OAAO,CAAC,WAAW,IAAI,IAAI;YAE7D,OAAO;gBACL,QAAQ,MAAM,MAAM;gBACpB;gBACA,SAAS;gBACT,UAAU,MAAM,QAAQ;gBACxB,WAAW,MAAM,SAAS;gBAC1B,SAAS,MAAM,OAAO;YACxB;QACF;QAEA,QAAQ,GAAG,CAAC,CAAC,UAAU,EAAE,gBAAgB,MAAM,CAAC,wBAAwB,CAAC;QACzE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,QAAQ;QAAgB;IACrD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,QAAQ,EAAE;QAAC;IACxC;AACF"}},
    {"offset": {"line": 221, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}