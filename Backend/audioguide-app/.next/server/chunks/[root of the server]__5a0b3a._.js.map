{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 167, "column": 0}, "map": {"version":3,"sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/src/app/api/guides/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport { Agent } from '@fileverse/agents'\nimport axios from 'axios'\n\nasync function serverLog(message: string) {\n  try {\n    await fetch('http://localhost:3000/api/logs', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        log: {\n          timestamp: new Date().toISOString(),\n          message\n        }\n      })\n    })\n  } catch (error) {\n    console.error('Failed to store log:', error)\n  }\n}\n\nasync function fetchIpfsContent(ipfsHash: string): Promise<any> {\n  const hash = ipfsHash.replace('ipfs://', '')\n  const gateway = process.env.PINATA_GATEWAY\n  const jwt = process.env.PINATA_JWT\n  \n  const response = await axios.get(`https://${gateway}/ipfs/${hash}`, {\n    headers: {\n      'Authorization': `Bearer ${jwt}`\n    }\n  })\n  return response.data\n}\n\nconst initAgent = () => {\n  return new Agent({ \n    chain: 'sepolia',\n    privateKey: process.env.PRIVATE_KEY!,\n    pinataJWT: process.env.PINATA_JWT!,\n    pinataGateway: process.env.PINATA_GATEWAY!,\n    pimlicoAPIKey: process.env.PIMLICO_API_KEY!,\n  })\n}\n\n// In-memory store for guides\nlet guides: Array<{\n  fileId: string;\n  title: string;\n  content: string;\n  ipfsHash: string;\n  creator: string;\n  timestamp: string;\n}> = []\n\n// Temporary function to add a guide (call this from upload API)\nexport function addGuide(guide: any) {\n  guides.push(guide)\n  console.log('Guide added to memory. Current guides:', guides)\n}\n\nexport async function GET(request: Request) {\n  console.log('GET /api/guides - Current guides in memory:', guides)\n  return NextResponse.json({ guides })\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEA,eAAe,UAAU,OAAe;IACtC,IAAI;QACF,MAAM,MAAM,kCAAkC;YAC5C,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;YAC9C,MAAM,KAAK,SAAS,CAAC;gBACnB,KAAK;oBACH,WAAW,IAAI,OAAO,WAAW;oBACjC;gBACF;YACF;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;IACxC;AACF;AAEA,eAAe,iBAAiB,QAAgB;IAC9C,MAAM,OAAO,SAAS,OAAO,CAAC,WAAW;IACzC,MAAM,UAAU,QAAQ,GAAG,CAAC,cAAc;IAC1C,MAAM,MAAM,QAAQ,GAAG,CAAC,UAAU;IAElC,MAAM,WAAW,MAAM,uIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,QAAQ,MAAM,EAAE,MAAM,EAAE;QAClE,SAAS;YACP,iBAAiB,CAAC,OAAO,EAAE,KAAK;QAClC;IACF;IACA,OAAO,SAAS,IAAI;AACtB;AAEA,MAAM,YAAY;IAChB,OAAO,IAAI,gJAAA,CAAA,QAAK,CAAC;QACf,OAAO;QACP,YAAY,QAAQ,GAAG,CAAC,WAAW;QACnC,WAAW,QAAQ,GAAG,CAAC,UAAU;QACjC,eAAe,QAAQ,GAAG,CAAC,cAAc;QACzC,eAAe,QAAQ,GAAG,CAAC,eAAe;IAC5C;AACF;AAEA,6BAA6B;AAC7B,IAAI,SAOC,EAAE;AAGA,SAAS,SAAS,KAAU;IACjC,OAAO,IAAI,CAAC;IACZ,QAAQ,GAAG,CAAC,0CAA0C;AACxD;AAEO,eAAe,IAAI,OAAgB;IACxC,QAAQ,GAAG,CAAC,+CAA+C;IAC3D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE;IAAO;AACpC"}},
    {"offset": {"line": 227, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}