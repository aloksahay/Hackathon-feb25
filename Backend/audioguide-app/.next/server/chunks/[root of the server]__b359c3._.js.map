{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 127, "column": 0}, "map": {"version":3,"sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/src/app/api/guides/list/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport { Agent } from '@fileverse/agents'\n\nconst initAgent = () => {\n  return new Agent({ \n    chain: 'sepolia',\n    privateKey: process.env.PRIVATE_KEY!,\n    pinataJWT: process.env.PINATA_JWT!,\n    pinataGateway: process.env.PINATA_GATEWAY!,\n    pimlicoAPIKey: process.env.PIMLICO_API_KEY!,\n  })\n}\n\nexport async function GET() {\n  try {\n    const agent = initAgent()\n    await agent.setupStorage('Unwrit')\n\n    // Just fetch the known content\n    const fileId = '1' // Use a simple fileId\n    const file = await agent.getFile(BigInt(fileId))\n\n    if (!file?.content) {\n      console.log('No content found')\n      return NextResponse.json({ guides: [] })\n    }\n\n    // Create a guide from the content\n    const titleMatch = file.content.match(/^# (.*)/m)\n    const title = titleMatch ? titleMatch[1] : 'Untitled Guide'\n    const mainContent = file.content.replace(/^# .*\\n/, '').trim()\n\n    const guide = {\n      fileId,\n      title,\n      content: mainContent,\n      ipfsHash: process.env.IPFS_CONTENT || '',\n      timestamp: new Date().toISOString()\n    }\n\n    console.log('Returning guide:', guide)\n    return NextResponse.json({ guides: [guide] })\n\n  } catch (error) {\n    console.error('Failed to fetch guide:', error)\n    return NextResponse.json({ guides: [] })\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,YAAY;IAChB,OAAO,IAAI,gJAAA,CAAA,QAAK,CAAC;QACf,OAAO;QACP,YAAY,QAAQ,GAAG,CAAC,WAAW;QACnC,WAAW,QAAQ,GAAG,CAAC,UAAU;QACjC,eAAe,QAAQ,GAAG,CAAC,cAAc;QACzC,eAAe,QAAQ,GAAG,CAAC,eAAe;IAC5C;AACF;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,QAAQ;QACd,MAAM,MAAM,YAAY,CAAC;QAEzB,+BAA+B;QAC/B,MAAM,SAAS,IAAI,sBAAsB;;QACzC,MAAM,OAAO,MAAM,MAAM,OAAO,CAAC,OAAO;QAExC,IAAI,CAAC,MAAM,SAAS;YAClB,QAAQ,GAAG,CAAC;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,QAAQ,EAAE;YAAC;QACxC;QAEA,kCAAkC;QAClC,MAAM,aAAa,KAAK,OAAO,CAAC,KAAK,CAAC;QACtC,MAAM,QAAQ,aAAa,UAAU,CAAC,EAAE,GAAG;QAC3C,MAAM,cAAc,KAAK,OAAO,CAAC,OAAO,CAAC,WAAW,IAAI,IAAI;QAE5D,MAAM,QAAQ;YACZ;YACA;YACA,SAAS;YACT,UAAU,QAAQ,GAAG,CAAC,YAAY,IAAI;YACtC,WAAW,IAAI,OAAO,WAAW;QACnC;QAEA,QAAQ,GAAG,CAAC,oBAAoB;QAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,QAAQ;gBAAC;aAAM;QAAC;IAE7C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,QAAQ,EAAE;QAAC;IACxC;AACF"}},
    {"offset": {"line": 181, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}