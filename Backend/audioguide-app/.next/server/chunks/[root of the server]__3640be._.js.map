{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 127, "column": 0}, "map": {"version":3,"sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/src/app/api/guides/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport { Agent } from '@fileverse/agents'\n\nasync function serverLog(message: string) {\n  try {\n    await fetch('http://localhost:3000/api/logs', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        log: {\n          timestamp: new Date().toISOString(),\n          message\n        }\n      })\n    })\n  } catch (error) {\n    console.error('Failed to store log:', error)\n  }\n}\n\nconst initAgent = () => {\n  return new Agent({ \n    chain: 'sepolia',\n    privateKey: process.env.PRIVATE_KEY || '',\n    pinataJWT: process.env.PINATA_JWT || '',\n    pinataGateway: process.env.PINATA_GATEWAY || '',\n    pimlicoAPIKey: process.env.PIMLICO_API_KEY || '',\n  })\n}\n\nexport async function GET(request: Request) {\n  try {\n    const agent = initAgent()\n    await agent.setupStorage('Unwrit')\n    await serverLog('Fetching guides...')\n\n    // Get the DB file\n    const dbFile = await agent.getFile(BigInt(process.env.DB_FILE_ID || '0'))\n    if (!dbFile || !dbFile.content) {\n      await serverLog('DB file not found or empty')\n      return NextResponse.json({ guides: [] })\n    }\n\n    const db = JSON.parse(dbFile.content)\n    const guides = []\n\n    // Fetch each guide using the DB index\n    for (const entry of db.guides) {\n      try {\n        const file = await agent.getFile(BigInt(entry.fileId))\n        if (file?.content) {\n          const titleMatch = file.content.match(/^# (.*)/m)\n          const title = titleMatch ? titleMatch[1] : 'Untitled Guide'\n          const mainContent = file.content.replace(/^# .*\\n/, '').trim()\n\n          guides.push({\n            fileId: entry.fileId,\n            title,\n            content: mainContent,\n            createdAt: entry.timestamp,\n            creator: entry.creator,\n            hash: file.contentIpfsHash\n          })\n          await serverLog(`Found guide: \"${title}\" by ${entry.creator}`)\n        }\n      } catch (error) {\n        await serverLog(`Error fetching guide ${entry.fileId}: ${error}`)\n      }\n    }\n\n    await serverLog(`Found ${guides.length} guides`)\n    return NextResponse.json({ guides })\n  } catch (error) {\n    await serverLog(`Error: ${error}`)\n    return NextResponse.json({ guides: [] })\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,eAAe,UAAU,OAAe;IACtC,IAAI;QACF,MAAM,MAAM,kCAAkC;YAC5C,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;YAC9C,MAAM,KAAK,SAAS,CAAC;gBACnB,KAAK;oBACH,WAAW,IAAI,OAAO,WAAW;oBACjC;gBACF;YACF;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;IACxC;AACF;AAEA,MAAM,YAAY;IAChB,OAAO,IAAI,gJAAA,CAAA,QAAK,CAAC;QACf,OAAO;QACP,YAAY,QAAQ,GAAG,CAAC,WAAW,IAAI;QACvC,WAAW,QAAQ,GAAG,CAAC,UAAU,IAAI;QACrC,eAAe,QAAQ,GAAG,CAAC,cAAc,IAAI;QAC7C,eAAe,QAAQ,GAAG,CAAC,eAAe,IAAI;IAChD;AACF;AAEO,eAAe,IAAI,OAAgB;IACxC,IAAI;QACF,MAAM,QAAQ;QACd,MAAM,MAAM,YAAY,CAAC;QACzB,MAAM,UAAU;QAEhB,kBAAkB;QAClB,MAAM,SAAS,MAAM,MAAM,OAAO,CAAC,OAAO,QAAQ,GAAG,CAAC,UAAU,IAAI;QACpE,IAAI,CAAC,UAAU,CAAC,OAAO,OAAO,EAAE;YAC9B,MAAM,UAAU;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,QAAQ,EAAE;YAAC;QACxC;QAEA,MAAM,KAAK,KAAK,KAAK,CAAC,OAAO,OAAO;QACpC,MAAM,SAAS,EAAE;QAEjB,sCAAsC;QACtC,KAAK,MAAM,SAAS,GAAG,MAAM,CAAE;YAC7B,IAAI;gBACF,MAAM,OAAO,MAAM,MAAM,OAAO,CAAC,OAAO,MAAM,MAAM;gBACpD,IAAI,MAAM,SAAS;oBACjB,MAAM,aAAa,KAAK,OAAO,CAAC,KAAK,CAAC;oBACtC,MAAM,QAAQ,aAAa,UAAU,CAAC,EAAE,GAAG;oBAC3C,MAAM,cAAc,KAAK,OAAO,CAAC,OAAO,CAAC,WAAW,IAAI,IAAI;oBAE5D,OAAO,IAAI,CAAC;wBACV,QAAQ,MAAM,MAAM;wBACpB;wBACA,SAAS;wBACT,WAAW,MAAM,SAAS;wBAC1B,SAAS,MAAM,OAAO;wBACtB,MAAM,KAAK,eAAe;oBAC5B;oBACA,MAAM,UAAU,CAAC,cAAc,EAAE,MAAM,KAAK,EAAE,MAAM,OAAO,EAAE;gBAC/D;YACF,EAAE,OAAO,OAAO;gBACd,MAAM,UAAU,CAAC,qBAAqB,EAAE,MAAM,MAAM,CAAC,EAAE,EAAE,OAAO;YAClE;QACF;QAEA,MAAM,UAAU,CAAC,MAAM,EAAE,OAAO,MAAM,CAAC,OAAO,CAAC;QAC/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAO;IACpC,EAAE,OAAO,OAAO;QACd,MAAM,UAAU,CAAC,OAAO,EAAE,OAAO;QACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,QAAQ,EAAE;QAAC;IACxC;AACF"}},
    {"offset": {"line": 209, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}