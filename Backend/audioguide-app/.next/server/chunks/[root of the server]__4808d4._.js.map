{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/src/app/api/guides/list/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport axios from 'axios'\n\nexport async function GET() {\n  try {\n    const gateway = process.env.PINATA_GATEWAY\n    const ipfsHash = process.env.IPFS_CONTENT\n\n    // Debug log to check env variables\n    console.log('Environment variables:', {\n      gateway,\n      ipfsHash,\n      expected: 'bafkreihgzmvltvv6uid2qiums72b23ltolc7hs7mcgkgb5yxi2xo2fn4ym'\n    })\n    \n    if (!gateway || !ipfsHash) {\n      console.error('Missing required env variables:', { gateway, ipfsHash })\n      return NextResponse.json({ guides: [] })\n    }\n\n    const url = `https://${gateway}/ipfs/${ipfsHash}`\n    console.log('Fetching from URL:', url)\n    \n    const response = await axios.get(url, {\n      headers: {\n        'Authorization': `Bearer ${process.env.PINATA_JWT}`\n      }\n    })\n\n    const content = response.data\n    \n    // Create a guide from the content\n    const titleMatch = content.match(/^# (.*)/m)\n    const title = titleMatch ? titleMatch[1] : 'Untitled Guide'\n    const mainContent = content.replace(/^# .*\\n/, '').trim()\n\n    const guide = {\n      fileId: '1',\n      title,\n      content: mainContent,\n      ipfsHash,\n      timestamp: new Date().toISOString()\n    }\n\n    console.log('Returning guide:', guide)\n    return NextResponse.json({ guides: [guide] })\n\n  } catch (error) {\n    console.error('Failed to fetch guide:', error)\n    if (axios.isAxiosError(error)) {\n      console.error('URL:', error.config?.url)\n      console.error('Status:', error.response?.status)\n      console.error('Response:', error.response?.data)\n    }\n    return NextResponse.json({ guides: [] })\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,UAAU,QAAQ,GAAG,CAAC,cAAc;QAC1C,MAAM,WAAW,QAAQ,GAAG,CAAC,YAAY;QAEzC,mCAAmC;QACnC,QAAQ,GAAG,CAAC,0BAA0B;YACpC;YACA;YACA,UAAU;QACZ;QAEA,IAAI,CAAC,WAAW,CAAC,UAAU;YACzB,QAAQ,KAAK,CAAC,mCAAmC;gBAAE;gBAAS;YAAS;YACrE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,QAAQ,EAAE;YAAC;QACxC;QAEA,MAAM,MAAM,CAAC,QAAQ,EAAE,QAAQ,MAAM,EAAE,UAAU;QACjD,QAAQ,GAAG,CAAC,sBAAsB;QAElC,MAAM,WAAW,MAAM,uIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,KAAK;YACpC,SAAS;gBACP,iBAAiB,CAAC,OAAO,EAAE,QAAQ,GAAG,CAAC,UAAU,EAAE;YACrD;QACF;QAEA,MAAM,UAAU,SAAS,IAAI;QAE7B,kCAAkC;QAClC,MAAM,aAAa,QAAQ,KAAK,CAAC;QACjC,MAAM,QAAQ,aAAa,UAAU,CAAC,EAAE,GAAG;QAC3C,MAAM,cAAc,QAAQ,OAAO,CAAC,WAAW,IAAI,IAAI;QAEvD,MAAM,QAAQ;YACZ,QAAQ;YACR;YACA,SAAS;YACT;YACA,WAAW,IAAI,OAAO,WAAW;QACnC;QAEA,QAAQ,GAAG,CAAC,oBAAoB;QAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,QAAQ;gBAAC;aAAM;QAAC;IAE7C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,IAAI,uIAAA,CAAA,UAAK,CAAC,YAAY,CAAC,QAAQ;YAC7B,QAAQ,KAAK,CAAC,QAAQ,MAAM,MAAM,EAAE;YACpC,QAAQ,KAAK,CAAC,WAAW,MAAM,QAAQ,EAAE;YACzC,QAAQ,KAAK,CAAC,aAAa,MAAM,QAAQ,EAAE;QAC7C;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,QAAQ,EAAE;QAAC;IACxC;AACF"}},
    {"offset": {"line": 214, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}