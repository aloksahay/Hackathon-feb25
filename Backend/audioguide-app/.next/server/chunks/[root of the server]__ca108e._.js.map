{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/src/app/api/text-to-speech/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport axios from 'axios'\n\n// Map languages to ElevenLabs voice IDs\nconst VOICE_IDS = {\n  en: '21m00Tcm4TlvDq8ikWAM', // English voice\n  es: 'ErXwobaYiN019PkySvjV', // Spanish voice\n  fr: 'MF3mGyEYCl7XYWbV9V6O'  // French voice\n}\n\nexport async function POST(request: Request) {\n  try {\n    const { content, language = 'en' } = await request.json()\n    \n    // Get the appropriate voice ID for the language\n    const voiceId = VOICE_IDS[language as keyof typeof VOICE_IDS] || VOICE_IDS.en\n\n    const response = await axios.post(\n      `https://api.elevenlabs.io/v1/text-to-speech/${voiceId}`,\n      {\n        text: content,\n        model_id: \"eleven_multilingual_v2\",\n        voice_settings: {\n          stability: 0.5,\n          similarity_boost: 0.5\n        }\n      },\n      {\n        headers: {\n          'Accept': 'audio/mpeg',\n          'xi-api-key': process.env.ELEVENLABS_API_KEY,\n          'Content-Type': 'application/json'\n        },\n        responseType: 'arraybuffer'\n      }\n    )\n\n    return new NextResponse(response.data, {\n      headers: {\n        'Content-Type': 'audio/mpeg'\n      }\n    })\n\n  } catch (error) {\n    console.error('Failed to generate speech:', error)\n    if (axios.isAxiosError(error)) {\n      console.error('Status:', error.response?.status)\n      console.error('Message:', error.response?.data)\n    }\n    return NextResponse.json(\n      { error: 'Failed to generate speech' }, \n      { status: 500 }\n    )\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,wCAAwC;AACxC,MAAM,YAAY;IAChB,IAAI;IACJ,IAAI;IACJ,IAAI,uBAAwB,eAAe;AAC7C;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,WAAW,IAAI,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEvD,gDAAgD;QAChD,MAAM,UAAU,SAAS,CAAC,SAAmC,IAAI,UAAU,EAAE;QAE7E,MAAM,WAAW,MAAM,uIAAA,CAAA,UAAK,CAAC,IAAI,CAC/B,CAAC,4CAA4C,EAAE,SAAS,EACxD;YACE,MAAM;YACN,UAAU;YACV,gBAAgB;gBACd,WAAW;gBACX,kBAAkB;YACpB;QACF,GACA;YACE,SAAS;gBACP,UAAU;gBACV,cAAc,QAAQ,GAAG,CAAC,kBAAkB;gBAC5C,gBAAgB;YAClB;YACA,cAAc;QAChB;QAGF,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,SAAS,IAAI,EAAE;YACrC,SAAS;gBACP,gBAAgB;YAClB;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,IAAI,uIAAA,CAAA,UAAK,CAAC,YAAY,CAAC,QAAQ;YAC7B,QAAQ,KAAK,CAAC,WAAW,MAAM,QAAQ,EAAE;YACzC,QAAQ,KAAK,CAAC,YAAY,MAAM,QAAQ,EAAE;QAC5C;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA4B,GACrC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 202, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}