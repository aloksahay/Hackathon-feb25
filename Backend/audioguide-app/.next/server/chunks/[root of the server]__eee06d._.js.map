{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/src/app/api/process-guide/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport OpenAI from 'openai'\n\n// Log the API key (first few characters) to verify it's loaded\nconsole.log('Venice API Key loaded:', process.env.VENICE_API_KEY?.slice(0, 5) + '...');\n\nconst venice = new OpenAI({\n  apiKey: process.env.VENICE_API_KEY,\n  baseURL: \"https://api.venice.ai/api/v1\"\n})\n\nexport async function POST(request: Request) {\n  try {\n    const { content, language } = await request.json()\n    \n    // Verify API key is available\n    if (!process.env.VENICE_API_KEY) {\n      throw new Error('Venice API key is not configured');\n    }\n\n    console.log('Translating content to:', language)\n\n    // Make the request using fetch directly to see raw response\n    const response = await fetch(\"https://api.venice.ai/api/v1/chat/completions\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${process.env.VENICE_API_KEY}`\n      },\n      body: JSON.stringify({\n        model: \"dolphin-2.9.2-qwen2-72b\",\n        messages: [\n          {\n            role: \"system\",\n            content: `You are a professional translator. Translate the given text to ${\n              language === 'fr' ? 'French' : language === 'es' ? 'Spanish' : 'English'\n            }. Return only the translated text without any additional formatting or explanation.`\n          },\n          {\n            role: \"user\",\n            content\n          }\n        ],\n        temperature: 0.3,\n        // Disable Venice's default system prompts\n        venice_parameters: {\n          include_venice_system_prompt: false\n        }\n      })\n    });\n\n    const data = await response.json();\n    console.log('Raw API response:', JSON.stringify(data, null, 2));\n\n    if (!response.ok) {\n      throw new Error(`Venice API error: ${data.error || 'Unknown error'}`);\n    }\n\n    // Access the message content directly since we can see it in the raw response\n    const translatedContent = data.choices[0].message.content;\n    \n    if (!translatedContent) {\n      console.error('No translation in response');\n      throw new Error('Translation returned empty result');\n    }\n\n    console.log('Translation complete');\n    return NextResponse.json({ translatedContent });\n\n  } catch (error) {\n    console.error('Failed to translate content:', error);\n    return NextResponse.json(\n      { error: 'Failed to translate content', details: error.message }, \n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,+DAA+D;AAC/D,QAAQ,GAAG,CAAC,0BAA0B,QAAQ,GAAG,CAAC,cAAc,EAAE,MAAM,GAAG,KAAK;AAEhF,MAAM,SAAS,IAAI,kJAAA,CAAA,UAAM,CAAC;IACxB,QAAQ,QAAQ,GAAG,CAAC,cAAc;IAClC,SAAS;AACX;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEhD,8BAA8B;QAC9B,IAAI,CAAC,QAAQ,GAAG,CAAC,cAAc,EAAE;YAC/B,MAAM,IAAI,MAAM;QAClB;QAEA,QAAQ,GAAG,CAAC,2BAA2B;QAEvC,4DAA4D;QAC5D,MAAM,WAAW,MAAM,MAAM,iDAAiD;YAC5E,QAAQ;YACR,SAAS;gBACP,gBAAgB;gBAChB,iBAAiB,CAAC,OAAO,EAAE,QAAQ,GAAG,CAAC,cAAc,EAAE;YACzD;YACA,MAAM,KAAK,SAAS,CAAC;gBACnB,OAAO;gBACP,UAAU;oBACR;wBACE,MAAM;wBACN,SAAS,CAAC,+DAA+D,EACvE,aAAa,OAAO,WAAW,aAAa,OAAO,YAAY,UAChE,mFAAmF,CAAC;oBACvF;oBACA;wBACE,MAAM;wBACN;oBACF;iBACD;gBACD,aAAa;gBACb,0CAA0C;gBAC1C,mBAAmB;oBACjB,8BAA8B;gBAChC;YACF;QACF;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,QAAQ,GAAG,CAAC,qBAAqB,KAAK,SAAS,CAAC,MAAM,MAAM;QAE5D,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM,CAAC,kBAAkB,EAAE,KAAK,KAAK,IAAI,iBAAiB;QACtE;QAEA,8EAA8E;QAC9E,MAAM,oBAAoB,KAAK,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO;QAEzD,IAAI,CAAC,mBAAmB;YACtB,QAAQ,KAAK,CAAC;YACd,MAAM,IAAI,MAAM;QAClB;QAEA,QAAQ,GAAG,CAAC;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAkB;IAE/C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;YAA+B,SAAS,MAAM,OAAO;QAAC,GAC/D;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}