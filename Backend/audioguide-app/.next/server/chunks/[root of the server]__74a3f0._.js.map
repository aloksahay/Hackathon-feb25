{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/src/app/api/segment/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport OpenAI from 'openai'\n\nconst venice = new OpenAI({\n  apiKey: process.env.VENICE_API_KEY || '',\n  baseURL: \"https://api.venice.ai/api/v1\"\n})\n\ninterface Segment {\n  title: string;\n  content: string;\n}\n\nexport async function POST(request: Request) {\n  try {\n    const { content } = await request.json()\n    \n    console.log('Segmenting content...')\n\n    const response = await venice.chat.completions.create({\n      model: \"dolphin-2.9.2-qwen2-72b\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are a museum guide content organizer. Your task is to break down museum content into segments.\n          You must respond with a JSON object in this exact format:\n          {\n            \"segments\": [\n              {\n                \"title\": \"Section Title\",\n                \"content\": \"Section Content\"\n              }\n            ]\n          }\n          Do not include any other text or formatting in your response.`\n        },\n        {\n          role: \"user\",\n          content\n        }\n      ],\n      temperature: 0.3\n    })\n\n    const responseContent = response.choices[0]?.message?.content;\n    if (!responseContent) {\n      throw new Error('Empty response from Venice API');\n    }\n\n    // Parse the JSON response\n    const parsedResponse = JSON.parse(responseContent);\n    \n    // Extract segments array\n    const { segments } = parsedResponse;\n    \n    if (!Array.isArray(segments)) {\n      throw new Error('Invalid response format: segments is not an array');\n    }\n\n    // Validate each segment\n    const validatedSegments = segments.map((segment: any, index: number) => {\n      if (!segment.title || !segment.content) {\n        throw new Error(`Invalid segment format at index ${index}`);\n      }\n      return {\n        title: segment.title,\n        content: segment.content\n      };\n    });\n\n    console.log(`Successfully processed ${validatedSegments.length} segments`);\n    return NextResponse.json({ segments: validatedSegments });\n\n  } catch (error) {\n    console.error('Failed to segment content:', error);\n    if (error instanceof OpenAI.APIError) {\n      console.error('Venice API error:', {\n        status: error.status,\n        message: error.message\n      });\n    }\n    return NextResponse.json(\n      { error: 'Failed to segment content' }, \n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,kJAAA,CAAA,UAAM,CAAC;IACxB,QAAQ,QAAQ,GAAG,CAAC,cAAc,IAAI;IACtC,SAAS;AACX;AAOO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEtC,QAAQ,GAAG,CAAC;QAEZ,MAAM,WAAW,MAAM,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YACpD,OAAO;YACP,UAAU;gBACR;oBACE,MAAM;oBACN,SAAS,CAAC;;;;;;;;;;uEAUmD,CAAC;gBAChE;gBACA;oBACE,MAAM;oBACN;gBACF;aACD;YACD,aAAa;QACf;QAEA,MAAM,kBAAkB,SAAS,OAAO,CAAC,EAAE,EAAE,SAAS;QACtD,IAAI,CAAC,iBAAiB;YACpB,MAAM,IAAI,MAAM;QAClB;QAEA,0BAA0B;QAC1B,MAAM,iBAAiB,KAAK,KAAK,CAAC;QAElC,yBAAyB;QACzB,MAAM,EAAE,QAAQ,EAAE,GAAG;QAErB,IAAI,CAAC,MAAM,OAAO,CAAC,WAAW;YAC5B,MAAM,IAAI,MAAM;QAClB;QAEA,wBAAwB;QACxB,MAAM,oBAAoB,SAAS,GAAG,CAAC,CAAC,SAAc;YACpD,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,QAAQ,OAAO,EAAE;gBACtC,MAAM,IAAI,MAAM,CAAC,gCAAgC,EAAE,OAAO;YAC5D;YACA,OAAO;gBACL,OAAO,QAAQ,KAAK;gBACpB,SAAS,QAAQ,OAAO;YAC1B;QACF;QAEA,QAAQ,GAAG,CAAC,CAAC,uBAAuB,EAAE,kBAAkB,MAAM,CAAC,SAAS,CAAC;QACzE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,UAAU;QAAkB;IAEzD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,IAAI,iBAAiB,kJAAA,CAAA,UAAM,CAAC,QAAQ,EAAE;YACpC,QAAQ,KAAK,CAAC,qBAAqB;gBACjC,QAAQ,MAAM,MAAM;gBACpB,SAAS,MAAM,OAAO;YACxB;QACF;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA4B,GACrC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 214, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}