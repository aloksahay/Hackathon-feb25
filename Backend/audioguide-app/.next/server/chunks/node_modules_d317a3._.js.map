{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"bytes.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/multiformats/src/bytes.ts"],"sourcesContent":["export const empty = new Uint8Array(0)\n\nexport function toHex (d: Uint8Array): string {\n  return d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n}\n\nexport function fromHex (hex: string): Uint8Array {\n  const hexes = hex.match(/../g)\n  return hexes != null ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\nexport function equals (aa: Uint8Array, bb: Uint8Array): boolean {\n  if (aa === bb) return true\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function coerce (o: ArrayBufferView | ArrayBuffer | Uint8Array): Uint8Array {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o\n  if (o instanceof ArrayBuffer) return new Uint8Array(o)\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\nexport function isBinary (o: unknown): o is ArrayBuffer | ArrayBufferView {\n  return o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n}\n\nexport function fromString (str: string): Uint8Array {\n  return new TextEncoder().encode(str)\n}\n\nexport function toString (b: Uint8Array): string {\n  return new TextDecoder().decode(b)\n}\n"],"names":[],"mappings":";;;;;;;;;;AAAO,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,CAAA;AAEhC,SAAU,KAAK,CAAE,CAAa;IAClC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,CAAG,CAAD,EAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAA;AAC9E,CAAC;AAEK,SAAU,OAAO,CAAE,GAAW;IAClC,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;IAC9B,OAAO,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,UAAU,CAAC,KAAK,CAAC,GAAG,EAAC,CAAC,CAAC,EAAE,AAAC,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAA;AAChF,CAAC;AAEK,SAAU,MAAM,CAAE,EAAc,EAAE,EAAc;IACpD,IAAI,EAAE,KAAK,EAAE,EAAE,OAAO,IAAI,CAAA;IAC1B,IAAI,EAAE,CAAC,UAAU,KAAK,EAAE,CAAC,UAAU,EAAE,CAAC;QACpC,OAAO,KAAK,CAAA;IACd,CAAC;IAED,IAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,UAAU,EAAE,EAAE,EAAE,CAAE,CAAC;QAC1C,IAAI,EAAE,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YACtB,OAAO,KAAK,CAAA;QACd,CAAC;IACH,CAAC;IAED,OAAO,IAAI,CAAA;AACb,CAAC;AAEK,SAAU,MAAM,CAAE,CAA6C;IACnE,IAAI,CAAC,YAAY,UAAU,IAAI,CAAC,CAAC,WAAW,CAAC,IAAI,KAAK,YAAY,EAAE,OAAO,CAAC,CAAA;IAC5E,IAAI,CAAC,YAAY,WAAW,EAAE,OAAO,IAAI,UAAU,CAAC,CAAC,CAAC,CAAA;IACtD,IAAI,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;QAC1B,OAAO,IAAI,UAAU,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,UAAU,EAAE,CAAC,CAAC,UAAU,CAAC,CAAA;IAC7D,CAAC;IACD,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAA;AACtD,CAAC;AAEK,SAAU,QAAQ,CAAE,CAAU;IAClC,OAAO,CAAC,YAAY,WAAW,IAAI,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;AAC1D,CAAC;AAEK,SAAU,UAAU,CAAE,GAAW;IACrC,OAAO,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;AACtC,CAAC;AAEK,SAAU,QAAQ,CAAE,CAAa;IACrC,OAAO,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;AACpC,CAAC","ignoreList":[0]}},
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"file":"base-x.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/multiformats/src/vendor/base-x.js"],"sourcesContent":["/* eslint-disable */\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n/**\n * @param {string} ALPHABET\n * @param {any} name\n */\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  /**\n   * @param {any[] | Iterable<number>} source\n   */\n  function encode (source) {\n    // @ts-ignore\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  /**\n   * @param {string | string[]} source\n   */\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  /**\n   * @param {string | string[]} string\n   */\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 226, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 232, "column": 0}, "map": {"version":3,"file":"base.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/multiformats/src/bases/base.ts"],"sourcesContent":["import { coerce } from '../bytes.js'\nimport basex from '../vendor/base-x.js'\nimport type { BaseCodec, BaseDecoder, BaseEncoder, CombobaseDecoder, Multibase, MultibaseCodec, MultibaseDecoder, MultibaseEncoder, UnibaseDecoder } from './interface.js'\n\ninterface EncodeFn { (bytes: Uint8Array): string }\ninterface DecodeFn { (text: string): Uint8Array }\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n */\nclass Encoder<Base extends string, Prefix extends string> implements MultibaseEncoder<Prefix>, BaseEncoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  encode (bytes: Uint8Array): Multibase<Prefix> {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n */\nclass Decoder<Base extends string, Prefix extends string> implements MultibaseDecoder<Prefix>, UnibaseDecoder<Prefix>, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseDecode: DecodeFn\n  private readonly prefixCodePoint: number\n\n  constructor (name: Base, prefix: Prefix, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    const prefixCodePoint = prefix.codePointAt(0)\n    /* c8 ignore next 3 */\n    if (prefixCodePoint === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    this.prefixCodePoint = prefixCodePoint\n    this.baseDecode = baseDecode\n  }\n\n  decode (text: string): Uint8Array {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  or<OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n}\n\ntype Decoders<Prefix extends string> = Record<Prefix, UnibaseDecoder<Prefix>>\n\nclass ComposedDecoder<Prefix extends string> implements MultibaseDecoder<Prefix>, CombobaseDecoder<Prefix> {\n  readonly decoders: Decoders<Prefix>\n\n  constructor (decoders: Decoders<Prefix>) {\n    this.decoders = decoders\n  }\n\n  or <OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n\n  decode (input: string): Uint8Array {\n    const prefix = input[0] as Prefix\n    const decoder = this.decoders[prefix]\n    if (decoder != null) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\nexport function or <L extends string, R extends string> (left: UnibaseDecoder<L> | CombobaseDecoder<L>, right: UnibaseDecoder<R> | CombobaseDecoder<R>): ComposedDecoder<L | R> {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n  return new ComposedDecoder({\n    ...(left.decoders ?? { [(left as UnibaseDecoder<L>).prefix]: left }),\n    ...(right.decoders ?? { [(right as UnibaseDecoder<R>).prefix]: right })\n  } as Decoders<L | R>)\n}\n\nexport class Codec<Base extends string, Prefix extends string> implements MultibaseCodec<Prefix>, MultibaseEncoder<Prefix>, MultibaseDecoder<Prefix>, BaseCodec, BaseEncoder, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n  readonly baseDecode: DecodeFn\n  readonly encoder: Encoder<Base, Prefix>\n  readonly decoder: Decoder<Base, Prefix>\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  encode (input: Uint8Array): string {\n    return this.encoder.encode(input)\n  }\n\n  decode (input: string): Uint8Array {\n    return this.decoder.decode(input)\n  }\n}\n\nexport function from <Base extends string, Prefix extends string> ({ name, prefix, encode, decode }: { name: Base, prefix: Prefix, encode: EncodeFn, decode: DecodeFn }): Codec<Base, Prefix> {\n  return new Codec(name, prefix, encode, decode)\n}\n\nexport function baseX <Base extends string, Prefix extends string> ({ name, prefix, alphabet }: { name: Base, prefix: Prefix, alphabet: string }): Codec<Base, Prefix> {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: (text: string): Uint8Array => coerce(decode(text))\n  })\n}\n\nfunction decode (string: string, alphabet: string, bitsPerChar: number, name: string): Uint8Array {\n  // Build the character lookup table:\n  const codes: Record<string, number> = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || (0xff & (buffer << (8 - bits))) !== 0) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\nfunction encode (data: Uint8Array, alphabet: string, bitsPerChar: number): string {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits !== 0) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while (((out.length * bitsPerChar) & 7) !== 0) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n */\nexport function rfc4648 <Base extends string, Prefix extends string> ({ name, prefix, bitsPerChar, alphabet }: { name: Base, prefix: Prefix, bitsPerChar: number, alphabet: string }): Codec<Base, Prefix> {\n  return from({\n    prefix,\n    name,\n    encode (input: Uint8Array): string {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input: string): Uint8Array {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 438, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 444, "column": 0}, "map": {"version":3,"file":"base58.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/multiformats/src/bases/base58.ts"],"sourcesContent":["import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,WAAW,CAAA;;AAE1B,MAAM,SAAS,sKAAG,QAAA,AAAK,EAAC;IAC7B,IAAI,EAAE,WAAW;IACjB,MAAM,EAAE,GAAG;IACX,QAAQ,EAAE,4DAA4D;CACvE,CAAC,CAAA;AAEK,MAAM,YAAY,sKAAG,QAAA,AAAK,EAAC;IAChC,IAAI,EAAE,cAAc;IACpB,MAAM,EAAE,GAAG;IACX,QAAQ,EAAE,4DAA4D;CACvE,CAAC,CAAA","ignoreList":[0]}},
    {"offset": {"line": 460, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 466, "column": 0}, "map": {"version":3,"file":"base32.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/multiformats/src/bases/base32.ts"],"sourcesContent":["import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n"],"names":[],"mappings":";;;;;;;;;;;AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAA;;AAE5B,MAAM,MAAM,sKAAG,UAAA,AAAO,EAAC;IAC5B,MAAM,EAAE,GAAG;IACX,IAAI,EAAE,QAAQ;IACd,QAAQ,EAAE,kCAAkC;IAC5C,WAAW,EAAE,CAAC;CACf,CAAC,CAAA;AAEK,MAAM,WAAW,OAAG,yKAAA,AAAO,EAAC;IACjC,MAAM,EAAE,GAAG;IACX,IAAI,EAAE,aAAa;IACnB,QAAQ,EAAE,kCAAkC;IAC5C,WAAW,EAAE,CAAC;CACf,CAAC,CAAA;AAEK,MAAM,SAAS,sKAAG,UAAA,AAAO,EAAC;IAC/B,MAAM,EAAE,GAAG;IACX,IAAI,EAAE,WAAW;IACjB,QAAQ,EAAE,mCAAmC;IAC7C,WAAW,EAAE,CAAC;CACf,CAAC,CAAA;AAEK,MAAM,cAAc,sKAAG,UAAA,AAAO,EAAC;IACpC,MAAM,EAAE,GAAG;IACX,IAAI,EAAE,gBAAgB;IACtB,QAAQ,EAAE,mCAAmC;IAC7C,WAAW,EAAE,CAAC;CACf,CAAC,CAAA;AAEK,MAAM,SAAS,sKAAG,UAAA,AAAO,EAAC;IAC/B,MAAM,EAAE,GAAG;IACX,IAAI,EAAE,WAAW;IACjB,QAAQ,EAAE,kCAAkC;IAC5C,WAAW,EAAE,CAAC;CACf,CAAC,CAAA;AAEK,MAAM,cAAc,sKAAG,UAAA,AAAO,EAAC;IACpC,MAAM,EAAE,GAAG;IACX,IAAI,EAAE,gBAAgB;IACtB,QAAQ,EAAE,kCAAkC;IAC5C,WAAW,EAAE,CAAC;CACf,CAAC,CAAA;AAEK,MAAM,YAAY,sKAAG,UAAA,AAAO,EAAC;IAClC,MAAM,EAAE,GAAG;IACX,IAAI,EAAE,cAAc;IACpB,QAAQ,EAAE,mCAAmC;IAC7C,WAAW,EAAE,CAAC;CACf,CAAC,CAAA;AAEK,MAAM,iBAAiB,IAAG,4KAAA,AAAO,EAAC;IACvC,MAAM,EAAE,GAAG;IACX,IAAI,EAAE,mBAAmB;IACzB,QAAQ,EAAE,mCAAmC;IAC7C,WAAW,EAAE,CAAC;CACf,CAAC,CAAA;AAEK,MAAM,OAAO,sKAAG,UAAA,AAAO,EAAC;IAC7B,MAAM,EAAE,GAAG;IACX,IAAI,EAAE,SAAS;IACf,QAAQ,EAAE,kCAAkC;IAC5C,WAAW,EAAE,CAAC;CACf,CAAC,CAAA","ignoreList":[0]}},
    {"offset": {"line": 533, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 539, "column": 0}, "map": {"version":3,"file":"base36.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/multiformats/src/bases/base36.ts"],"sourcesContent":["import { baseX } from './base.js'\n\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n})\n\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n})\n"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,WAAW,CAAA;;AAE1B,MAAM,MAAM,sKAAG,QAAA,AAAK,EAAC;IAC1B,MAAM,EAAE,GAAG;IACX,IAAI,EAAE,QAAQ;IACd,QAAQ,EAAE,sCAAsC;CACjD,CAAC,CAAA;AAEK,MAAM,WAAW,sKAAG,QAAA,AAAK,EAAC;IAC/B,MAAM,EAAE,GAAG;IACX,IAAI,EAAE,aAAa;IACnB,QAAQ,EAAE,sCAAsC;CACjD,CAAC,CAAA","ignoreList":[0]}},
    {"offset": {"line": 555, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 561, "column": 0}, "map": {"version":3,"file":"varint.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/multiformats/src/vendor/varint.js"],"sourcesContent":["/* eslint-disable */\nvar encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\n/**\n * @param {number} num\n * @param {number[]} out\n * @param {number} offset\n */\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  // @ts-ignore\n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\n/**\n * @param {string | any[]} buf\n * @param {number} offset\n */\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      // @ts-ignore\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  // @ts-ignore\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (/** @type {number} */ value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 628, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 634, "column": 0}, "map": {"version":3,"file":"varint.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/multiformats/src/varint.ts"],"sourcesContent":["import varint from './vendor/varint.js'\n\nexport function decode (data: Uint8Array, offset = 0): [number, number] {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\nexport function encodeTo (int: number, target: Uint8Array, offset = 0): Uint8Array {\n  varint.encode(int, target, offset)\n  return target\n}\n\nexport function encodingLength (int: number): number {\n  return varint.encodingLength(int)\n}\n"],"names":[],"mappings":";;;;;AAAA,OAAO,MAAM,MAAM,oBAAoB,CAAA;;AAEjC,SAAU,MAAM,CAAE,IAAgB,EAAE,MAAM,GAAG,CAAC;IAClD,MAAM,IAAI,qKAAG,UAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;IACxC,OAAO;QAAC,IAAI;0KAAE,UAAM,CAAC,MAAM,CAAC,KAAK;KAAC,CAAA;AACpC,CAAC;AAEK,SAAU,QAAQ,CAAE,GAAW,EAAE,MAAkB,EAAE,MAAM,GAAG,CAAC;sKACnE,UAAM,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,EAAE,MAAM,CAAC,CAAA;IAClC,OAAO,MAAM,CAAA;AACf,CAAC;AAEK,SAAU,cAAc,CAAE,GAAW;IACzC,yKAAO,UAAM,CAAC,cAAc,CAAC,GAAG,CAAC,CAAA;AACnC,CAAC","ignoreList":[0]}},
    {"offset": {"line": 655, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 661, "column": 0}, "map": {"version":3,"file":"digest.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/multiformats/src/hashes/digest.ts"],"sourcesContent":["import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\nimport type { MultihashDigest } from './interface.js'\n\n/**\n * Creates a multihash digest.\n */\nexport function create <Code extends number> (code: Code, digest: Uint8Array): Digest<Code, number> {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n */\nexport function decode (multihash: Uint8Array): MultihashDigest {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\nexport function equals (a: MultihashDigest, b: unknown): b is MultihashDigest {\n  if (a === b) {\n    return true\n  } else {\n    const data = b as { code?: unknown, size?: unknown, bytes?: unknown }\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n */\nexport class Digest<Code extends number, Size extends number> implements MultihashDigest {\n  readonly code: Code\n  readonly size: Size\n  readonly digest: Uint8Array\n  readonly bytes: Uint8Array\n\n  /**\n   * Creates a multihash digest.\n   */\n  constructor (code: Code, size: Size, digest: Uint8Array, bytes: Uint8Array) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n\n/**\n * Used to check that the passed multihash has the passed code\n */\nexport function hasCode <T extends number> (digest: MultihashDigest, code: T): digest is MultihashDigest<T> {\n  return digest.code === code\n}\n"],"names":[],"mappings":";;;;;;;AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,IAAI,UAAU,EAAE,MAAM,aAAa,CAAA;AAC1D,OAAO,KAAK,MAAM,MAAM,cAAc,CAAA;;;AAMhC,SAAU,MAAM,CAAwB,IAAU,EAAE,MAAkB;IAC1E,MAAM,IAAI,GAAG,MAAM,CAAC,UAAU,CAAA;IAC9B,MAAM,UAAU,GAAG,MAAM,kJAAC,cAAc,CAAC,IAAI,CAAC,CAAA;IAC9C,MAAM,YAAY,GAAG,UAAU,GAAG,MAAM,kJAAC,cAAc,CAAC,IAAI,CAAC,CAAA;IAE7D,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,YAAY,GAAG,IAAI,CAAC,CAAA;IACjD,MAAM,kJAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,CAAA;IAC/B,MAAM,kJAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,UAAU,CAAC,CAAA;IACxC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,YAAY,CAAC,CAAA;IAE/B,OAAO,IAAI,MAAM,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC,CAAA;AAC9C,CAAC;AAKK,SAAU,MAAM,CAAE,SAAqB;IAC3C,MAAM,KAAK,IAAG,mKAAA,AAAM,EAAC,SAAS,CAAC,CAAA;IAC/B,MAAM,CAAC,IAAI,EAAE,UAAU,CAAC,GAAG,MAAM,kJAAC,MAAM,CAAC,KAAK,CAAC,CAAA;IAC/C,MAAM,CAAC,IAAI,EAAE,YAAY,CAAC,GAAG,MAAM,kJAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAA;IACtE,MAAM,MAAM,GAAG,KAAK,CAAC,QAAQ,CAAC,UAAU,GAAG,YAAY,CAAC,CAAA;IAExD,IAAI,MAAM,CAAC,UAAU,KAAK,IAAI,EAAE,CAAC;QAC/B,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAA;IACrC,CAAC;IAED,OAAO,IAAI,MAAM,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC,CAAA;AAC9C,CAAC;AAEK,SAAU,MAAM,CAAE,CAAkB,EAAE,CAAU;IACpD,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;QACZ,OAAO,IAAI,CAAA;IACb,CAAC,MAAM,CAAC;QACN,MAAM,IAAI,GAAG,CAAwD,CAAA;QAErE,OAAO,AACL,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,IACpB,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,IACpB,IAAI,CAAC,KAAK,YAAY,UAAU,+JAChC,SAAA,AAAU,EAAC,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAChC,CAAA;IACH,CAAC;AACH,CAAC;AAMK,MAAO,MAAM;IACR,IAAI,CAAM;IACV,IAAI,CAAM;IACV,MAAM,CAAY;IAClB,KAAK,CAAY;IAE1B;;OAEG,CACH,YAAa,IAAU,EAAE,IAAU,EAAE,MAAkB,EAAE,KAAiB,CAAA;QACxE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAChB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAChB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACpB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;IACpB,CAAC;CACF;AAKK,SAAU,OAAO,CAAqB,MAAuB,EAAE,IAAO;IAC1E,OAAO,MAAM,CAAC,IAAI,KAAK,IAAI,CAAA;AAC7B,CAAC","ignoreList":[0]}},
    {"offset": {"line": 717, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 723, "column": 0}, "map": {"version":3,"file":"interface.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/multiformats/src/link/interface.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unnecessary-type-constraint */\n/* eslint-disable no-use-before-define */\n\nimport type { MultibaseEncoder, MultibaseDecoder, Multibase } from '../bases/interface.js'\nimport type { Phantom, ByteView } from '../block/interface.js'\nimport type { MultihashDigest } from '../hashes/interface.js'\n\nexport type { MultihashDigest, MultibaseEncoder, MultibaseDecoder }\nexport type Version = 0 | 1\n\nexport type DAG_PB = 0x70\nexport type SHA_256 = 0x12\n\n/**\n * Represents an IPLD link to a specific data of type `T`.\n *\n * @template T - Logical type of the data being linked to.\n * @template C - multicodec code corresponding to a codec linked data is encoded with\n * @template A - multicodec code corresponding to the hashing algorithm of the CID\n * @template V - CID version\n */\nexport interface Link<\n  Data extends unknown = unknown,\n  Format extends number = number,\n  Alg extends number = number,\n  V extends Version = 1\n  > extends Phantom<Data> {\n  readonly version: V\n  readonly code: Format\n  readonly multihash: MultihashDigest<Alg>\n\n  readonly byteOffset: number\n  readonly byteLength: number\n  readonly bytes: ByteView<Link<Data, Format, Alg, V>>\n\n  equals(other: unknown): other is Link<Data, Format, Alg, Version>\n\n  toString<Prefix extends string>(base?: MultibaseEncoder<Prefix>): ToString<Link<Data, Format, Alg, Version>, Prefix>\n  link(): Link<Data, Format, Alg, V>\n\n  toV1(): Link<Data, Format, Alg, 1>\n}\n\nexport interface LinkJSON<T extends UnknownLink = UnknownLink> {\n  '/': ToString<T>\n}\n\nexport interface LegacyLink<T extends unknown = unknown> extends Link<T, DAG_PB, SHA_256, 0> {\n}\n\nexport type UnknownLink =\n  | LegacyLink<unknown>\n  | Link<unknown, number, number, Version>\n\nexport type ToString<T, Prefix extends string = string> = Multibase<Prefix> & Phantom<T>\n\nexport type { ByteView }\n"],"names":[],"mappings":"AAAA,oEAAA,EAAsE,CACtE,uCAAA,EAAyC","ignoreList":[0]}},
    {"offset": {"line": 726, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 732, "column": 0}, "map": {"version":3,"file":"cid.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/multiformats/src/cid.ts"],"sourcesContent":["import { base32 } from './bases/base32.js'\nimport { base36 } from './bases/base36.js'\nimport { base58btc } from './bases/base58.js'\nimport { coerce } from './bytes.js'\nimport * as Digest from './hashes/digest.js'\nimport * as varint from './varint.js'\nimport type * as API from './link/interface.js'\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\nexport function format <T extends API.Link<unknown, number, number, API.Version>, Prefix extends string> (link: T, base?: API.MultibaseEncoder<Prefix>): API.ToString<T, Prefix> {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        base as API.MultibaseEncoder<'z'> ?? base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        (base ?? base32.encoder) as API.MultibaseEncoder<Prefix>\n      )\n  }\n}\n\nexport function toJSON <Link extends API.UnknownLink> (link: Link): API.LinkJSON<Link> {\n  return {\n    '/': format(link)\n  }\n}\n\nexport function fromJSON <Link extends API.UnknownLink> (json: API.LinkJSON<Link>): CID<unknown, number, number, API.Version> {\n  return CID.parse(json['/'])\n}\n\nconst cache = new WeakMap<API.UnknownLink, Map<string, string>>()\n\nfunction baseCache (cid: API.UnknownLink): Map<string, string> {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\nexport class CID<Data = unknown, Format extends number = number, Alg extends number = number, Version extends API.Version = API.Version> implements API.Link<Data, Format, Alg, Version> {\n  readonly code: Format\n  readonly version: Version\n  readonly multihash: API.MultihashDigest<Alg>\n  readonly bytes: Uint8Array\n  readonly '/': Uint8Array\n\n  /**\n   * @param version - Version of the CID\n   * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param multihash - (Multi)hash of the of the content.\n   */\n  constructor (version: Version, code: Format, multihash: API.MultihashDigest<Alg>, bytes: Uint8Array) {\n    this.code = code\n    this.version = version\n    this.multihash = multihash\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID (): this {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset (): number {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength (): number {\n    return this.bytes.byteLength\n  }\n\n  toV0 (): CID<Data, API.DAG_PB, API.SHA_256, 0> {\n    switch (this.version) {\n      case 0: {\n        return this as CID<Data, API.DAG_PB, API.SHA_256, 0>\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return (\n          CID.createV0(\n            multihash as API.MultihashDigest<API.SHA_256>\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  toV1 (): CID<Data, Format, Alg, 1> {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return this as CID<Data, Format, Alg, 1>\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  equals (other: unknown): other is CID<Data, Format, Alg, Version> {\n    return CID.equals(this, other)\n  }\n\n  static equals <Data, Format extends number, Alg extends number, Version extends API.Version>(self: API.Link<Data, Format, Alg, Version>, other: unknown): other is CID {\n    const unknown = other as { code?: unknown, version?: unknown, multihash?: unknown }\n    return (\n      unknown != null &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  toString (base?: API.MultibaseEncoder<string>): string {\n    return format(this, base)\n  }\n\n  toJSON (): API.LinkJSON<this> {\n    return { '/': format(this) }\n  }\n\n  link (): this {\n    return this\n  }\n\n  readonly [Symbol.toStringTag] = 'CID';\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] (): string {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returns null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   */\n  static asCID <Data, Format extends number, Alg extends number, Version extends API.Version, U>(input: API.Link<Data, Format, Alg, Version> | U): CID<Data, Format, Alg, Version> | null {\n    if (input == null) {\n      return null\n    }\n\n    const value = input as any\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        multihash as API.MultihashDigest<Alg>,\n        bytes ?? encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest = Digest.decode(multihash) as API.MultihashDigest<Alg>\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   * @param version - Version of the CID\n   * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param digest - (Multi)hash of the of the content.\n   */\n  static create <Data, Format extends number, Alg extends number, Version extends API.Version>(version: Version, code: Format, digest: API.MultihashDigest<Alg>): CID<Data, Format, Alg, Version> {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   */\n  static createV0 <T = unknown>(digest: API.MultihashDigest<typeof SHA_256_CODE>): CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0> {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @param code - Content encoding format code.\n   * @param digest - Multihash of the content.\n   */\n  static createV1 <Data, Code extends number, Alg extends number>(code: Code, digest: API.MultihashDigest<Alg>): CID<Data, Code, Alg, 1> {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   */\n  static decode <Data, Code extends number, Alg extends number, Version extends API.Version>(bytes: API.ByteView<API.Link<Data, Code, Alg, Version>>): CID<Data, Code, Alg, Version> {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length !== 0) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   */\n  static decodeFirst <T, C extends number, A extends number, V extends API.Version>(bytes: API.ByteView<API.Link<T, C, A, V>>): [CID<T, C, A, V>, Uint8Array] {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(digest as API.MultihashDigest<API.SHA_256>)\n        : CID.createV1(specs.codec, digest)\n    return [cid as CID<T, C, A, V>, bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   */\n  static inspectBytes <T, C extends number, A extends number, V extends API.Version>(initialBytes: API.ByteView<API.Link<T, C, A, V>>): { version: V, codec: C, multihashCode: A, digestSize: number, multihashSize: number, size: number } {\n    let offset = 0\n    const next = (): number => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = next() as V\n    let codec = DAG_PB_CODE as C\n    if (version as number === 18) {\n      // CIDv0\n      version = 0 as V\n      offset = 0\n    } else {\n      codec = next() as C\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = next() as A // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   */\n  static parse <Prefix extends string, Data, Code extends number, Alg extends number, Version extends API.Version>(source: API.ToString<API.Link<Data, Code, Alg, Version>, Prefix>, base?: API.MultibaseDecoder<Prefix>): CID<Data, Code, Alg, Version> {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    if (cid.version === 0 && source[0] !== 'Q') {\n      throw Error('Version 0 CID string must not include multibase prefix')\n    }\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\nfunction parseCIDtoBytes <Prefix extends string, Data, Code extends number, Alg extends number, Version extends API.Version> (source: API.ToString<API.Link<Data, Code, Alg, Version>, Prefix>, base?: API.MultibaseDecoder<Prefix>): [Prefix, API.ByteView<API.Link<Data, Code, Alg, Version>>] {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base ?? base58btc\n      return [\n        base58btc.prefix as Prefix,\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base ?? base58btc\n      return [base58btc.prefix as Prefix, decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base ?? base32\n      return [base32.prefix as Prefix, decoder.decode(source)]\n    }\n    case base36.prefix: {\n      const decoder = base ?? base36\n      return [base36.prefix as Prefix, decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32, base36 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [source[0] as Prefix, base.decode(source)]\n    }\n  }\n}\n\nfunction toStringV0 (bytes: Uint8Array, cache: Map<string, string>, base: API.MultibaseEncoder<'z'>): string {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nfunction toStringV1 <Prefix extends string> (bytes: Uint8Array, cache: Map<string, string>, base: API.MultibaseEncoder<Prefix>): string {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\nfunction encodeCID (version: API.Version, code: number, multihash: Uint8Array): Uint8Array {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1137, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1158, "column": 0}, "map": {"version":3,"file":"equals.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/uint8arrays/src/equals.ts"],"sourcesContent":["/**\n * Returns true if the two passed Uint8Arrays have the same content\n */\nexport function equals (a: Uint8Array, b: Uint8Array): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (a.byteLength !== b.byteLength) {\n    return false\n  }\n\n  for (let i = 0; i < a.byteLength; i++) {\n    if (a[i] !== b[i]) {\n      return false\n    }\n  }\n\n  return true\n}\n"],"names":[],"mappings":"AAAA;;GAEG;;;AACG,SAAU,MAAM,CAAE,CAAa,EAAE,CAAa;IAClD,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;QACZ,OAAO,IAAI,CAAA;IACb,CAAC;IAED,IAAI,CAAC,CAAC,UAAU,KAAK,CAAC,CAAC,UAAU,EAAE,CAAC;QAClC,OAAO,KAAK,CAAA;IACd,CAAC;IAED,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,CAAC,EAAE,CAAE,CAAC;QACtC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YAClB,OAAO,KAAK,CAAA;QACd,CAAC;IACH,CAAC;IAED,OAAO,IAAI,CAAA;AACb,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1177, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1183, "column": 0}, "map": {"version":3,"file":"base10.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/multiformats/src/bases/base10.ts"],"sourcesContent":["import { baseX } from './base.js'\n\nexport const base10 = baseX({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n})\n"],"names":[],"mappings":";;;AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,WAAW,CAAA;;AAE1B,MAAM,MAAM,sKAAG,QAAA,AAAK,EAAC;IAC1B,MAAM,EAAE,GAAG;IACX,IAAI,EAAE,QAAQ;IACd,QAAQ,EAAE,YAAY;CACvB,CAAC,CAAA","ignoreList":[0]}},
    {"offset": {"line": 1193, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1199, "column": 0}, "map": {"version":3,"file":"base16.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/multiformats/src/bases/base16.ts"],"sourcesContent":["import { rfc4648 } from './base.js'\n\nexport const base16 = rfc4648({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n})\n\nexport const base16upper = rfc4648({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n})\n"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAA;;AAE5B,MAAM,MAAM,sKAAG,UAAA,AAAO,EAAC;IAC5B,MAAM,EAAE,GAAG;IACX,IAAI,EAAE,QAAQ;IACd,QAAQ,EAAE,kBAAkB;IAC5B,WAAW,EAAE,CAAC;CACf,CAAC,CAAA;AAEK,MAAM,WAAW,sKAAG,UAAA,AAAO,EAAC;IACjC,MAAM,EAAE,GAAG;IACX,IAAI,EAAE,aAAa;IACnB,QAAQ,EAAE,kBAAkB;IAC5B,WAAW,EAAE,CAAC;CACf,CAAC,CAAA","ignoreList":[0]}},
    {"offset": {"line": 1217, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1223, "column": 0}, "map": {"version":3,"file":"base2.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/multiformats/src/bases/base2.ts"],"sourcesContent":["import { rfc4648 } from './base.js'\n\nexport const base2 = rfc4648({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n})\n"],"names":[],"mappings":";;;AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAA;;AAE5B,MAAM,KAAK,sKAAG,UAAA,AAAO,EAAC;IAC3B,MAAM,EAAE,GAAG;IACX,IAAI,EAAE,OAAO;IACb,QAAQ,EAAE,IAAI;IACd,WAAW,EAAE,CAAC;CACf,CAAC,CAAA","ignoreList":[0]}},
    {"offset": {"line": 1234, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1240, "column": 0}, "map": {"version":3,"file":"base256emoji.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/multiformats/src/bases/base256emoji.ts"],"sourcesContent":["import { from } from './base.js'\n\nconst alphabet = Array.from('🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂')\nconst alphabetBytesToChars: string[] = (alphabet.reduce<string[]>((p, c, i) => { p[i] = c; return p }, ([])))\nconst alphabetCharsToBytes: number[] = (alphabet.reduce<number[]>((p, c, i) => {\n  const codePoint = c.codePointAt(0)\n  if (codePoint == null) {\n    throw new Error(`Invalid character: ${c}`)\n  }\n  p[codePoint] = i\n  return p\n}, ([])))\n\nfunction encode (data: Uint8Array): string {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c]\n    return p\n  }, '')\n}\n\nfunction decode (str: string): Uint8Array {\n  const byts = []\n  for (const char of str) {\n    const codePoint = char.codePointAt(0)\n    if (codePoint == null) {\n      throw new Error(`Invalid character: ${char}`)\n    }\n    const byt = alphabetCharsToBytes[codePoint]\n    if (byt == null) {\n      throw new Error(`Non-base256emoji character: ${char}`)\n    }\n    byts.push(byt)\n  }\n  return new Uint8Array(byts)\n}\n\nexport const base256emoji = from({\n  prefix: '🚀',\n  name: 'base256emoji',\n  encode,\n  decode\n})\n"],"names":[],"mappings":";;;AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,WAAW,CAAA;;AAEhC,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,weAAwe,CAAC,CAAA;AACrgB,MAAM,oBAAoB,GAAa,AAAC,QAAQ,CAAC,MAAM,CAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE;IAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAAC,OAAO,CAAC,CAAA;AAAC,CAAC,EAAE,AAAC,EAAE,CAAC,CAAC,CAAC,CAAA;AAC7G,MAAM,oBAAoB,GAAa,AAAC,QAAQ,CAAC,MAAM,CAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE;IAC5E,MAAM,SAAS,GAAG,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAA;IAClC,IAAI,SAAS,IAAI,IAAI,EAAE,CAAC;QACtB,MAAM,IAAI,KAAK,CAAC,CAAA,mBAAA,EAAsB,CAAC,EAAE,CAAC,CAAA;IAC5C,CAAC;IACD,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAA;IAChB,OAAO,CAAC,CAAA;AACV,CAAC,EAAE,AAAC,EAAE,CAAC,CAAC,CAAC,CAAA;AAET,SAAS,MAAM,CAAE,IAAgB;IAC/B,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;QAC1B,CAAC,IAAI,oBAAoB,CAAC,CAAC,CAAC,CAAA;QAC5B,OAAO,CAAC,CAAA;IACV,CAAC,EAAE,EAAE,CAAC,CAAA;AACR,CAAC;AAED,SAAS,MAAM,CAAE,GAAW;IAC1B,MAAM,IAAI,GAAG,EAAE,CAAA;IACf,KAAK,MAAM,IAAI,IAAI,GAAG,CAAE,CAAC;QACvB,MAAM,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAA;QACrC,IAAI,SAAS,IAAI,IAAI,EAAE,CAAC;YACtB,MAAM,IAAI,KAAK,CAAC,CAAA,mBAAA,EAAsB,IAAI,EAAE,CAAC,CAAA;QAC/C,CAAC;QACD,MAAM,GAAG,GAAG,oBAAoB,CAAC,SAAS,CAAC,CAAA;QAC3C,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;YAChB,MAAM,IAAI,KAAK,CAAC,CAAA,4BAAA,EAA+B,IAAI,EAAE,CAAC,CAAA;QACxD,CAAC;QACD,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IAChB,CAAC;IACD,OAAO,IAAI,UAAU,CAAC,IAAI,CAAC,CAAA;AAC7B,CAAC;AAEM,MAAM,YAAY,sKAAG,OAAA,AAAI,EAAC;IAC/B,MAAM,EAAE,IAAI;IACZ,IAAI,EAAE,cAAc;IACpB,MAAM;IACN,MAAM;CACP,CAAC,CAAA","ignoreList":[0]}},
    {"offset": {"line": 1285, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1291, "column": 0}, "map": {"version":3,"file":"base64.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/multiformats/src/bases/base64.ts"],"sourcesContent":["import { rfc4648 } from './base.js'\n\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n})\n\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n})\n\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n})\n\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n})\n"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAA;;AAE5B,MAAM,MAAM,sKAAG,UAAA,AAAO,EAAC;IAC5B,MAAM,EAAE,GAAG;IACX,IAAI,EAAE,QAAQ;IACd,QAAQ,EAAE,kEAAkE;IAC5E,WAAW,EAAE,CAAC;CACf,CAAC,CAAA;AAEK,MAAM,SAAS,GAAG,6KAAA,AAAO,EAAC;IAC/B,MAAM,EAAE,GAAG;IACX,IAAI,EAAE,WAAW;IACjB,QAAQ,EAAE,mEAAmE;IAC7E,WAAW,EAAE,CAAC;CACf,CAAC,CAAA;AAEK,MAAM,SAAS,GAAG,6KAAA,AAAO,EAAC;IAC/B,MAAM,EAAE,GAAG;IACX,IAAI,EAAE,WAAW;IACjB,QAAQ,EAAE,kEAAkE;IAC5E,WAAW,EAAE,CAAC;CACf,CAAC,CAAA;AAEK,MAAM,YAAY,sKAAG,UAAA,AAAO,EAAC;IAClC,MAAM,EAAE,GAAG;IACX,IAAI,EAAE,cAAc;IACpB,QAAQ,EAAE,mEAAmE;IAC7E,WAAW,EAAE,CAAC;CACf,CAAC,CAAA","ignoreList":[0]}},
    {"offset": {"line": 1323, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1329, "column": 0}, "map": {"version":3,"file":"base8.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/multiformats/src/bases/base8.ts"],"sourcesContent":["import { rfc4648 } from './base.js'\n\nexport const base8 = rfc4648({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n})\n"],"names":[],"mappings":";;;AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAA;;AAE5B,MAAM,KAAK,sKAAG,UAAA,AAAO,EAAC;IAC3B,MAAM,EAAE,GAAG;IACX,IAAI,EAAE,OAAO;IACb,QAAQ,EAAE,UAAU;IACpB,WAAW,EAAE,CAAC;CACf,CAAC,CAAA","ignoreList":[0]}},
    {"offset": {"line": 1340, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1346, "column": 0}, "map": {"version":3,"file":"identity.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/multiformats/src/bases/identity.ts"],"sourcesContent":["import { fromString, toString } from '../bytes.js'\nimport { from } from './base.js'\n\nexport const identity = from({\n  prefix: '\\x00',\n  name: 'identity',\n  encode: (buf) => toString(buf),\n  decode: (str) => fromString(str)\n})\n"],"names":[],"mappings":";;;AAAA,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAA;AAClD,OAAO,EAAE,IAAI,EAAE,MAAM,WAAW,CAAA;;;AAEzB,MAAM,QAAQ,sKAAG,OAAA,AAAI,EAAC;IAC3B,MAAM,EAAE,MAAM;IACd,IAAI,EAAE,UAAU;IAChB,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE,0JAAC,WAAA,AAAQ,EAAC,GAAG,CAAC;IAC9B,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE,0JAAC,aAAA,AAAU,EAAC,GAAG,CAAC;CACjC,CAAC,CAAA","ignoreList":[0]}},
    {"offset": {"line": 1359, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1365, "column": 0}, "map": {"version":3,"file":"json.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/multiformats/src/codecs/json.ts"],"sourcesContent":["import type { ArrayBufferView, ByteView } from './interface.js'\n\nconst textEncoder = new TextEncoder()\nconst textDecoder = new TextDecoder()\n\nexport const name = 'json'\nexport const code = 0x0200\n\nexport function encode <T> (node: T): ByteView<T> {\n  return textEncoder.encode(JSON.stringify(node))\n}\n\nexport function decode <T> (data: ByteView<T> | ArrayBufferView<T>): T {\n  return JSON.parse(textDecoder.decode(data))\n}\n"],"names":[],"mappings":";;;;;;AAEA,MAAM,WAAW,GAAG,IAAI,WAAW,EAAE,CAAA;AACrC,MAAM,WAAW,GAAG,IAAI,WAAW,EAAE,CAAA;AAE9B,MAAM,IAAI,GAAG,MAAM,CAAA;AACnB,MAAM,IAAI,GAAG,MAAM,CAAA;AAEpB,SAAU,MAAM,CAAM,IAAO;IACjC,OAAO,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAA;AACjD,CAAC;AAEK,SAAU,MAAM,CAAM,IAAsC;IAChE,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAA;AAC7C,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1381, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1387, "column": 0}, "map": {"version":3,"file":"raw.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/multiformats/src/codecs/raw.ts"],"sourcesContent":["import { coerce } from '../bytes.js'\nimport type { ArrayBufferView, ByteView } from './interface.js'\n\nexport const name = 'raw'\nexport const code = 0x55\n\nexport function encode (node: Uint8Array): ByteView<Uint8Array> {\n  return coerce(node)\n}\n\nexport function decode (data: ByteView<Uint8Array> | ArrayBufferView<Uint8Array>): Uint8Array {\n  return coerce(data)\n}\n"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAA;;AAG7B,MAAM,IAAI,GAAG,KAAK,CAAA;AAClB,MAAM,IAAI,GAAG,IAAI,CAAA;AAElB,SAAU,MAAM,CAAE,IAAgB;IACtC,OAAO,oKAAA,AAAM,EAAC,IAAI,CAAC,CAAA;AACrB,CAAC;AAEK,SAAU,MAAM,CAAE,IAAwD;IAC9E,kKAAO,SAAA,AAAM,EAAC,IAAI,CAAC,CAAA;AACrB,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1403, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1409, "column": 0}, "map": {"version":3,"file":"identity.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/multiformats/src/hashes/identity.ts"],"sourcesContent":["import { coerce } from '../bytes.js'\nimport * as Digest from './digest.js'\n\nconst code: 0x0 = 0x0\nconst name = 'identity'\n\nconst encode: (input: Uint8Array) => Uint8Array = coerce\n\nfunction digest (input: Uint8Array): Digest.Digest<typeof code, number> {\n  return Digest.create(code, encode(input))\n}\n\nexport const identity = { code, name, encode, digest }\n"],"names":[],"mappings":";;;AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAA;AACpC,OAAO,KAAK,MAAM,MAAM,aAAa,CAAA;;;AAErC,MAAM,IAAI,GAAQ,GAAG,CAAA;AACrB,MAAM,IAAI,GAAG,UAAU,CAAA;AAEvB,MAAM,MAAM,0JAAsC,SAAM,CAAA;AAExD,SAAS,MAAM,CAAE,KAAiB;IAChC,OAAO,MAAM,4JAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAA;AAC3C,CAAC;AAEM,MAAM,QAAQ,GAAG;IAAE,IAAI;IAAE,IAAI;IAAE,MAAM;IAAE,MAAM;AAAA,CAAE,CAAA","ignoreList":[0]}},
    {"offset": {"line": 1428, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1434, "column": 0}, "map": {"version":3,"file":"hasher.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/multiformats/src/hashes/hasher.ts"],"sourcesContent":["import * as Digest from './digest.js'\nimport type { MultihashHasher } from './interface.js'\n\ntype Await<T> = Promise<T> | T\n\nexport function from <Name extends string, Code extends number> ({ name, code, encode }: { name: Name, code: Code, encode(input: Uint8Array): Await<Uint8Array> }): Hasher<Name, Code> {\n  return new Hasher(name, code, encode)\n}\n\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n */\nexport class Hasher<Name extends string, Code extends number> implements MultihashHasher<Code> {\n  readonly name: Name\n  readonly code: Code\n  readonly encode: (input: Uint8Array) => Await<Uint8Array>\n\n  constructor (name: Name, code: Code, encode: (input: Uint8Array) => Await<Uint8Array>) {\n    this.name = name\n    this.code = code\n    this.encode = encode\n  }\n\n  digest (input: Uint8Array): Await<Digest.Digest<Code, number>> {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input)\n      return result instanceof Uint8Array\n        ? Digest.create(this.code, result)\n        /* c8 ignore next 1 */\n        : result.then(digest => Digest.create(this.code, digest))\n    } else {\n      throw Error('Unknown type, must be binary type')\n      /* c8 ignore next 1 */\n    }\n  }\n}\n"],"names":[],"mappings":";;;;AAAA,OAAO,KAAK,MAAM,MAAM,aAAa,CAAA;;AAK/B,SAAU,IAAI,CAA6C,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAA4E;IAC/J,OAAO,IAAI,MAAM,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAA;AACvC,CAAC;AAMK,MAAO,MAAM;IACR,IAAI,CAAM;IACV,IAAI,CAAM;IACV,MAAM,CAA0C;IAEzD,YAAa,IAAU,EAAE,IAAU,EAAE,MAAgD,CAAA;QACnF,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAChB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAChB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;IACtB,CAAC;IAED,MAAM,CAAE,KAAiB,EAAA;QACvB,IAAI,KAAK,YAAY,UAAU,EAAE,CAAC;YAChC,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;YACjC,OAAO,MAAM,YAAY,UAAU,GAC/B,MAAM,4JAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,GAEhC,MAAM,CAAC,IAAI,EAAC,MAAM,CAAC,EAAE,AAAC,MAAM,4JAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAA;QAC7D,CAAC,MAAM,CAAC;YACN,MAAM,KAAK,CAAC,mCAAmC,CAAC,CAAA;QAChD,oBAAA,EAAsB,CACxB,CAAC;IACH,CAAC;CACF","ignoreList":[0]}},
    {"offset": {"line": 1461, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1467, "column": 0}, "map": {"version":3,"file":"sha2.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/multiformats/src/hashes/sha2.ts"],"sourcesContent":["import crypto from 'crypto'\nimport { coerce } from '../bytes.js'\nimport { from } from './hasher.js'\n\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 0x12,\n  encode: (input) => coerce(crypto.createHash('sha256').update(input).digest())\n})\n\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 0x13,\n  encode: input => coerce(crypto.createHash('sha512').update(input).digest())\n})\n"],"names":[],"mappings":";;;;AAAA,OAAO,MAAM,MAAM,QAAQ,CAAA;AAC3B,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAA;AACpC,OAAO,EAAE,IAAI,EAAE,MAAM,aAAa,CAAA;;;;AAE3B,MAAM,MAAM,yKAAG,OAAA,AAAI,EAAC;IACzB,IAAI,EAAE,UAAU;IAChB,IAAI,EAAE,IAAI;IACV,MAAM,EAAE,CAAC,KAAK,EAAE,CAAG,CAAD,mKAAC,AAAM,wGAAC,UAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,CAAC;CAC9E,CAAC,CAAA;AAEK,MAAM,MAAM,yKAAG,OAAA,AAAI,EAAC;IACzB,IAAI,EAAE,UAAU;IAChB,IAAI,EAAE,IAAI;IACV,MAAM,GAAE,KAAK,CAAC,EAAE,2JAAC,SAAA,AAAM,wGAAC,UAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,CAAC;CAC5E,CAAC,CAAA","ignoreList":[0]}},
    {"offset": {"line": 1487, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1493, "column": 0}, "map": {"version":3,"file":"interface.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/multiformats/src/bases/interface.ts"],"sourcesContent":["// Base encoders / decoders just base encode / decode between binary and\n// textual representation. They are unaware of multibase.\n\n/**\n * Base encoder just encodes bytes into base encoded string.\n */\nexport interface BaseEncoder {\n  /**\n   * Base encodes to a **plain** (and not a multibase) string. Unlike\n   * `encode` no multibase prefix is added.\n   */\n  baseEncode(bytes: Uint8Array): string\n}\n\n/**\n * Base decoder decodes encoded with matching base encoding into bytes.\n */\nexport interface BaseDecoder {\n  /**\n   * Decodes **plain** (and not a multibase) string. Unlike\n   * decode\n   */\n  baseDecode(text: string): Uint8Array\n}\n\n/**\n * Base codec is just dual of encoder and decoder.\n */\nexport interface BaseCodec {\n  encoder: BaseEncoder\n  decoder: BaseDecoder\n}\n\n/**\n * Multibase represents base encoded strings with a prefix first character\n * describing it's encoding.\n */\nexport type Multibase<Prefix extends string> =\n  | string\n  | string & { [0]: Prefix }\n\n/**\n * Multibase encoder for the specific base encoding encodes bytes into\n * multibase of that encoding.\n */\nexport interface MultibaseEncoder<Prefix extends string> {\n  /**\n   * Name of the encoding.\n   */\n  name: string\n  /**\n   * Prefix character for that base encoding.\n   */\n  prefix: Prefix\n  /**\n   * Encodes binary data into **multibase** string (which will have a\n   * prefix added).\n   */\n  encode(bytes: Uint8Array): Multibase<Prefix>\n}\n\n/**\n * Interface implemented by multibase decoder, that takes multibase strings\n * to bytes. It may support single encoding like base32 or multiple encodings\n * like base32, base58btc, base64. If passed multibase is incompatible it will\n * throw an exception.\n */\nexport interface MultibaseDecoder<Prefix extends string> {\n  /**\n   * Decodes **multibase** string (which must have a multibase prefix added).\n   * If prefix does not match\n   */\n  decode(multibase: Multibase<Prefix>): Uint8Array\n}\n\n/**\n * Dual of multibase encoder and decoder.\n */\nexport interface MultibaseCodec<Prefix extends string> {\n  name: string\n  prefix: Prefix\n  encoder: MultibaseEncoder<Prefix>\n  decoder: MultibaseDecoder<Prefix>\n}\n\nexport interface UnibaseDecoder<Prefix extends string> extends MultibaseDecoder<Prefix> {\n  // Reserve this property so it can be used to derive type.\n  readonly decoders?: null\n\n  readonly prefix: Prefix\n}\n\nexport interface CombobaseDecoder<Prefix extends string> extends MultibaseDecoder<Prefix> {\n  readonly decoders: Record<Prefix, UnibaseDecoder<Prefix>>\n}\n"],"names":[],"mappings":"AAAA,wEAAwE;AACxE,yDAAyD","ignoreList":[0]}},
    {"offset": {"line": 1498, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1504, "column": 0}, "map": {"version":3,"file":"interface.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/multiformats/src/hashes/interface.ts"],"sourcesContent":["// # Multihash\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n */\n// Note: In the current version there is no first class multihash\n// representation (plain Uint8Array is used instead) instead there seems to be\n// a bunch of places that parse it to extract (code, digest, size). By creating\n// this first class representation we avoid reparsing and things generally fit\n// really nicely.\nexport interface MultihashDigest<Code extends number = number> {\n  /**\n   * Code of the multihash\n   */\n  code: Code\n\n  /**\n   * Raw digest (without a hashing algorithm info)\n   */\n  digest: Uint8Array\n\n  /**\n   * byte length of the `this.digest`\n   */\n  size: number\n\n  /**\n   * Binary representation of this multihash digest.\n   */\n  bytes: Uint8Array\n}\n\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n */\nexport interface MultihashHasher<Code extends number = number> {\n  /**\n   * Takes binary `input` and returns it (multi) hash digest. Return value is\n   * either promise of a digest or a digest. This way general use can `await`\n   * while performance critical code may asses return value to decide whether\n   * await is needed.\n   */\n  digest(input: Uint8Array): Promise<MultihashDigest<Code>> | MultihashDigest<Code>\n\n  /**\n   * Name of the multihash\n   */\n  name: string\n\n  /**\n   * Code of the multihash\n   */\n  code: Code\n}\n\n/**\n * Sync variant of `MultihashHasher` that refines return type of the `digest`\n * to `MultihashDigest`. It is subtype of `MultihashHasher` so implementations\n * of this interface can be passed anywhere `MultihashHasher` is expected,\n * allowing consumer to either `await` or check the return type to decide\n * whether to await or proceed with return value.\n *\n * `SyncMultihashHasher` is useful in certain APIs where async hashing would be\n * impractical e.g. implementation of Hash Array Mapped Trie (HAMT).\n */\nexport interface SyncMultihashHasher<Code extends number = number> extends MultihashHasher<Code> {\n  digest(input: Uint8Array): MultihashDigest<Code>\n}\n"],"names":[],"mappings":"AAAA,cAAc","ignoreList":[0]}},
    {"offset": {"line": 1508, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1514, "column": 0}, "map": {"version":3,"file":"interface.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/multiformats/src/codecs/interface.ts"],"sourcesContent":["import type { ArrayBufferView, ByteView } from '../block/interface.js'\n\n/**\n * IPLD encoder part of the codec.\n */\nexport interface BlockEncoder<Code extends number, T> {\n  name: string\n  code: Code\n  encode(data: T): ByteView<T>\n}\n\n/**\n * IPLD decoder part of the codec.\n */\nexport interface BlockDecoder<Code extends number, T> {\n  code: Code\n  decode(bytes: ByteView<T> | ArrayBufferView<T>): T\n}\n\n/**\n * An IPLD codec is a combination of both encoder and decoder.\n */\nexport interface BlockCodec<Code extends number, T> extends BlockEncoder<Code, T>, BlockDecoder<Code, T> {}\n\nexport type { ArrayBufferView, ByteView }\n"],"names":[],"mappings":"","ignoreList":[0]}},
    {"offset": {"line": 1517, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1523, "column": 0}, "map": {"version":3,"file":"interface.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/multiformats/src/block/interface.ts"],"sourcesContent":["import type { CID } from '../cid.js'\nimport type { Link, Version } from '../link/interface.js'\n\n/**\n * A byte-encoded representation of some type of `Data`.\n *\n * A `ByteView` is essentially a `Uint8Array` that's been \"tagged\" with\n * a `Data` type parameter indicating the type of encoded data.\n *\n * For example, a `ByteView<{ hello: \"world\" }>` is a `Uint8Array` containing a\n * binary representation of a `{hello: \"world\"}`.\n */\nexport interface ByteView<Data> extends Uint8Array, Phantom<Data> {}\n\n/**\n * Similar to ByteView but extends ArrayBuffer.\n */\nexport interface ArrayBufferView<Data> extends ArrayBuffer, Phantom<Data> {}\n\ndeclare const Marker: unique symbol\n\n/**\n * A utility type to retain an unused type parameter `T`.\n * Similar to [phantom type parameters in Rust](https://doc.rust-lang.org/rust-by-example/generics/phantom.html).\n *\n * Capturing unused type parameters allows us to define \"nominal types,\" which\n * TypeScript does not natively support. Nominal types in turn allow us to capture\n * semantics not represented in the actual type structure, without requiring us to define\n * new classes or pay additional runtime costs.\n *\n * For a concrete example, see {@link ByteView}, which extends the `Uint8Array` type to capture\n * type information about the structure of the data encoded into the array.\n */\nexport interface Phantom<T> {\n  // This field can not be represented because field name is non-existent\n  // unique symbol. But given that field is optional any object will valid\n  // type constraint.\n  [Marker]?: T\n}\n\n/**\n * Represents an IPLD block (including its CID) that can be decoded to data of\n * type `T`.\n *\n * @template T - Logical type of the data encoded in the block\n * @template C - multicodec code corresponding to codec used to encode the block\n * @template A - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @template V - CID version\n */\nexport interface Block<\n  T = unknown,\n  C extends number = number,\n  A extends number = number,\n  V extends Version = 1\n> {\n  bytes: ByteView<T>\n  cid: Link<T, C, A, V>\n}\n\nexport type BlockCursorView<T = unknown> =\n  | { value: T, remaining?: undefined }\n  | { value: CID, remaining: string }\n\nexport interface BlockView<\n  T = unknown,\n  C extends number = number,\n  A extends number = number,\n  V extends Version = 1\n> extends Block<T, C, A, V> {\n  cid: CID<T, C, A, V>\n  value: T\n\n  links(): Iterable<[string, CID]>\n  tree(): Iterable<string>\n  get(path: string): BlockCursorView<unknown>\n}\n"],"names":[],"mappings":"","ignoreList":[0]}},
    {"offset": {"line": 1526, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1532, "column": 0}, "map": {"version":3,"file":"interface.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/multiformats/src/interface.ts"],"sourcesContent":["export * from './bases/interface.js'\nexport * from './hashes/interface.js'\nexport * from './codecs/interface.js'\nexport * from './link/interface.js'\nexport * from './block/interface.js'\n"],"names":[],"mappings":"","ignoreList":[0]}},
    {"offset": {"line": 1539, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1558, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/multiformats/src/index.ts"],"sourcesContent":["/**\n * @packageDocumentation\n *\n * This library defines common interfaces and low level building blocks for various interrelated multiformat technologies (multicodec, multihash, multibase, and CID). They can be used to implement custom base encoders / decoders / codecs, codec encoders /decoders and multihash hashers that comply to the interface that layers above assume.\n *\n * This library provides implementations for most basics and many others can be found in linked repositories.\n *\n * ```TypeScript\n * import { CID } from 'multiformats/cid'\n * import * as json from 'multiformats/codecs/json'\n * import { sha256 } from 'multiformats/hashes/sha2'\n *\n * const bytes = json.encode({ hello: 'world' })\n *\n * const hash = await sha256.digest(bytes)\n * const cid = CID.create(1, json.code, hash)\n * //> CID(bagaaierasords4njcts6vs7qvdjfcvgnume4hqohf65zsfguprqphs3icwea)\n * ```\n *\n * ## Creating Blocks\n *\n * ```TypeScript\n * import * as Block from 'multiformats/block'\n * import * as codec from '@ipld/dag-cbor'\n * import { sha256 as hasher } from 'multiformats/hashes/sha2'\n *\n * const value = { hello: 'world' }\n *\n * // encode a block\n * let block = await Block.encode({ value, codec, hasher })\n *\n * block.value // { hello: 'world' }\n * block.bytes // Uint8Array\n * block.cid   // CID() w/ sha2-256 hash address and dag-cbor codec\n *\n * // you can also decode blocks from their binary state\n * block = await Block.decode({ bytes: block.bytes, codec, hasher })\n *\n * // if you have the cid you can also verify the hash on decode\n * block = await Block.create({ bytes: block.bytes, cid: block.cid, codec, hasher })\n * ```\n *\n * ## Multibase Encoders / Decoders / Codecs\n *\n * CIDs can be serialized to string representation using multibase encoders that implement [`MultibaseEncoder`](https://github.com/multiformats/js-multiformats/blob/master/src/bases/interface.ts) interface. This library provides quite a few implementations that can be imported:\n *\n * ```TypeScript\n * import { base64 } from \"multiformats/bases/base64\"\n * cid.toString(base64.encoder)\n * //> 'mAYAEEiCTojlxqRTl6svwqNJRVM2jCcPBxy+7mRTUfGDzy2gViA'\n * ```\n *\n * Parsing CID string serialized CIDs requires multibase decoder that implements [`MultibaseDecoder`](https://github.com/multiformats/js-multiformats/blob/master/src/bases/interface.ts) interface. This library provides a decoder for every encoder it provides:\n *\n * ```TypeScript\n * CID.parse('mAYAEEiCTojlxqRTl6svwqNJRVM2jCcPBxy+7mRTUfGDzy2gViA', base64.decoder)\n * //> CID(bagaaierasords4njcts6vs7qvdjfcvgnume4hqohf65zsfguprqphs3icwea)\n * ```\n *\n * Dual of multibase encoder & decoder is defined as multibase codec and it exposes\n * them as `encoder` and `decoder` properties. For added convenience codecs also\n * implement `MultibaseEncoder` and `MultibaseDecoder` interfaces so they could be\n * used as either or both:\n *\n * ```TypeScript\n * cid.toString(base64)\n * CID.parse(cid.toString(base64), base64)\n * ```\n *\n * **Note:** CID implementation comes bundled with `base32` and `base58btc`\n * multibase codecs so that CIDs can be base serialized to (version specific)\n * default base encoding and parsed without having to supply base encoders/decoders:\n *\n * ```TypeScript\n * const v1 = CID.parse('bagaaierasords4njcts6vs7qvdjfcvgnume4hqohf65zsfguprqphs3icwea')\n * v1.toString()\n * //> 'bagaaierasords4njcts6vs7qvdjfcvgnume4hqohf65zsfguprqphs3icwea'\n *\n * const v0 = CID.parse('QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n')\n * v0.toString()\n * //> 'QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n'\n * v0.toV1().toString()\n * //> 'bafybeihdwdcefgh4dqkjv67uzcmw7ojee6xedzdetojuzjevtenxquvyku'\n * ```\n *\n * ## Multicodec Encoders / Decoders / Codecs\n *\n * This library defines [`BlockEncoder`, `BlockDecoder` and `BlockCodec` interfaces](https://github.com/multiformats/js-multiformats/blob/master/src/codecs/interface.ts).\n * Codec implementations should conform to the `BlockCodec` interface which implements both `BlockEncoder` and `BlockDecoder`.\n * Here is an example implementation of JSON `BlockCodec`.\n *\n * ```TypeScript\n * export const { name, code, encode, decode } = {\n *   name: 'json',\n *   code: 0x0200,\n *   encode: json => new TextEncoder().encode(JSON.stringify(json)),\n *   decode: bytes => JSON.parse(new TextDecoder().decode(bytes))\n * }\n * ```\n *\n * ## Multihash Hashers\n *\n * This library defines [`MultihashHasher` and `MultihashDigest` interfaces](https://github.com/multiformats/js-multiformats/blob/master/src/hashes/interface.ts) and convinient function for implementing them:\n *\n * ```TypeScript\n * import * as hasher from 'multiformats/hashes/hasher'\n *\n * const sha256 = hasher.from({\n *   // As per multiformats table\n *   // https://github.com/multiformats/multicodec/blob/master/table.csv#L9\n *   name: 'sha2-256',\n *   code: 0x12,\n *\n *   encode: (input) => new Uint8Array(crypto.createHash('sha256').update(input).digest())\n * })\n *\n * const hash = await sha256.digest(json.encode({ hello: 'world' }))\n * CID.create(1, json.code, hash)\n *\n * //> CID(bagaaierasords4njcts6vs7qvdjfcvgnume4hqohf65zsfguprqphs3icwea)\n * ```\n *\n * ## Traversal\n *\n * This library contains higher-order functions for traversing graphs of data easily.\n *\n * `walk()` walks through the links in each block of a DAG calling a user-supplied loader function for each one, in depth-first order with no duplicate block visits. The loader should return a `Block` object and can be used to inspect and collect block ordering for a full DAG walk. The loader should `throw` on error, and return `null` if a block should be skipped by `walk()`.\n *\n * ```TypeScript\n * import { walk } from 'multiformats/traversal'\n * import * as Block from 'multiformats/block'\n * import * as codec from 'multiformats/codecs/json'\n * import { sha256 as hasher } from 'multiformats/hashes/sha2'\n *\n * // build a DAG (a single block for this simple example)\n * const value = { hello: 'world' }\n * const block = await Block.encode({ value, codec, hasher })\n * const { cid } = block\n * console.log(cid)\n * //> CID(bagaaierasords4njcts6vs7qvdjfcvgnume4hqohf65zsfguprqphs3icwea)\n *\n * // create a loader function that also collects CIDs of blocks in\n * // their traversal order\n * const load = (cid, blocks) => async (cid) => {\n *   // fetch a block using its cid\n *   // e.g.: const block = await fetchBlockByCID(cid)\n *   blocks.push(cid)\n *   return block\n * }\n *\n * // collect blocks in this DAG starting from the root `cid`\n * const blocks = []\n * await walk({ cid, load: load(cid, blocks) })\n *\n * console.log(blocks)\n * //> [CID(bagaaierasords4njcts6vs7qvdjfcvgnume4hqohf65zsfguprqphs3icwea)]\n * ```\n *\n * ## Legacy interface\n *\n * [`blockcodec-to-ipld-format`](https://github.com/ipld/js-blockcodec-to-ipld-format) converts a multiformats [`BlockCodec`](https://github.com/multiformats/js-multiformats/blob/master/src/codecs/interface.ts#L21) into an\n * [`interface-ipld-format`](https://github.com/ipld/interface-ipld-format) for use with the [`ipld`](https://github.com/ipld/ipld) package. This can help bridge IPLD codecs implemented using the structure and interfaces defined here to existing code that assumes, or requires `interface-ipld-format`. This bridge also includes the relevant TypeScript definitions.\n *\n * ## Implementations\n *\n * By default, no base encodings (other than base32 & base58btc), hash functions,\n * or codec implementations are exposed by `multiformats`, you need to\n * import the ones you need yourself.\n *\n * ### Multibase codecs\n *\n * | bases                                                         | import                      | repo                                                                                              |\n * | ------------------------------------------------------------- | --------------------------- | ------------------------------------------------------------------------------------------------- |\n * | `base16`                                                      | `multiformats/bases/base16` | [multiformats/js-multiformats](https://github.com/multiformats/js-multiformats/tree/master/bases) |\n * | `base32`, `base32pad`, `base32hex`, `base32hexpad`, `base32z` | `multiformats/bases/base32` | [multiformats/js-multiformats](https://github.com/multiformats/js-multiformats/tree/master/bases) |\n * | `base64`, `base64pad`, `base64url`, `base64urlpad`            | `multiformats/bases/base64` | [multiformats/js-multiformats](https://github.com/multiformats/js-multiformats/tree/master/bases) |\n * | `base58btc`, `base58flick4`                                   | `multiformats/bases/base58` | [multiformats/js-multiformats](https://github.com/multiformats/js-multiformats/tree/master/bases) |\n *\n * Other (less useful) bases implemented in [multiformats/js-multiformats](https://github.com/multiformats/js-multiformats/tree/master/bases) include: `base2`, `base8`, `base10`, `base36` and `base256emoji`.\n *\n * ### Multihash hashers\n *\n * | hashes                                                                                                                          | import                         | repo                                                                                                               |\n * | ------------------------------------------------------------------------------------------------------------------------------- | ------------------------------ | ------------------------------------------------------------------------------------------------------------------ |\n * | `sha2-256`, `sha2-512`                                                                                                          | `multiformats/hashes/sha2`     | [multiformats/js-multiformats](https://github.com/multiformats/js-multiformats/tree/master/src/hashes)             |\n * | `sha3-224`, `sha3-256`, `sha3-384`,`sha3-512`, `shake-128`, `shake-256`, `keccak-224`, `keccak-256`, `keccak-384`, `keccak-512` | `@multiformats/sha3`           | [multiformats/js-sha3](https://github.com/multiformats/js-sha3)                                                    |\n * | `identity`                                                                                                                      | `multiformats/hashes/identity` | [multiformats/js-multiformats](https://github.com/multiformats/js-multiformats/tree/master/src/hashes/identity.js) |\n * | `murmur3-128`, `murmur3-32`                                                                                                     | `@multiformats/murmur3`        | [multiformats/js-murmur3](https://github.com/multiformats/js-murmur3)                                              |\n * | `blake2b-*`, `blake2s-*`                                                                                                        | `@multiformats/blake2`         | [multiformats/js-blake2](https://github.com/multiformats/js-blake2)                                                |\n *\n * ### IPLD codecs (multicodec)\n *\n * | codec      | import                     | repo                                                                                                   |\n * | ---------- | -------------------------- | ------------------------------------------------------------------------------------------------------ |\n * | `raw`      | `multiformats/codecs/raw`  | [multiformats/js-multiformats](https://github.com/multiformats/js-multiformats/tree/master/src/codecs) |\n * | `json`     | `multiformats/codecs/json` | [multiformats/js-multiformats](https://github.com/multiformats/js-multiformats/tree/master/src/codecs) |\n * | `dag-cbor` | `@ipld/dag-cbor`           | [ipld/js-dag-cbor](https://github.com/ipld/js-dag-cbor)                                                |\n * | `dag-json` | `@ipld/dag-json`           | [ipld/js-dag-json](https://github.com/ipld/js-dag-json)                                                |\n * | `dag-pb`   | `@ipld/dag-pb`             | [ipld/js-dag-pb](https://github.com/ipld/js-dag-pb)                                                    |\n * | `dag-jose` | `dag-jose`                 | [ceramicnetwork/js-dag-jose](https://github.com/ceramicnetwork/js-dag-jose)                            |\n */\n\nimport * as bytes from './bytes.js'\nimport { CID } from './cid.js'\nimport * as digest from './hashes/digest.js'\nimport * as hasher from './hashes/hasher.js'\nimport * as varint from './varint.js'\n\n// This way TS will also expose all the types from module\nexport * from './interface.js'\n\nexport { CID, hasher, digest, varint, bytes }\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAwMG","ignoreList":[0]}},
    {"offset": {"line": 1767, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1787, "column": 0}, "map": {"version":3,"file":"basics.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/multiformats/src/basics.ts"],"sourcesContent":["import * as base10 from './bases/base10.js'\nimport * as base16 from './bases/base16.js'\nimport * as base2 from './bases/base2.js'\nimport * as base256emoji from './bases/base256emoji.js'\nimport * as base32 from './bases/base32.js'\nimport * as base36 from './bases/base36.js'\nimport * as base58 from './bases/base58.js'\nimport * as base64 from './bases/base64.js'\nimport * as base8 from './bases/base8.js'\nimport * as identityBase from './bases/identity.js'\nimport * as json from './codecs/json.js'\nimport * as raw from './codecs/raw.js'\nimport * as identity from './hashes/identity.js'\nimport * as sha2 from './hashes/sha2.js'\nimport { CID, hasher, digest, varint, bytes } from './index.js'\n\nexport const bases = { ...identityBase, ...base2, ...base8, ...base10, ...base16, ...base32, ...base36, ...base58, ...base64, ...base256emoji }\nexport const hashes = { ...sha2, ...identity }\nexport const codecs = { raw, json }\n\nexport { CID, hasher, digest, varint, bytes }\n"],"names":[],"mappings":";;;;;AASA,OAAO,KAAK,YAAY,MAAM,qBAAqB,CAAA;AAPnD,OAAO,KAAK,KAAK,MAAM,kBAAkB,CAAA;AAMzC,OAAO,KAAK,KAAK,MAAM,kBAAkB,CAAA;AARzC,OAAO,KAAK,MAAM,MAAM,mBAAmB,CAAA;AAC3C,OAAO,KAAK,MAAM,MAAM,mBAAmB,CAAA;AAG3C,OAAO,KAAK,MAAM,MAAM,mBAAmB,CAAA;AAC3C,OAAO,KAAK,MAAM,MAAM,mBAAmB,CAAA;AAC3C,OAAO,KAAK,MAAM,MAAM,mBAAmB,CAAA;AAC3C,OAAO,KAAK,MAAM,MAAM,mBAAmB,CAAA;AAJ3C,OAAO,KAAK,YAAY,MAAM,yBAAyB,CAAA;AAUvD,OAAO,KAAK,IAAI,MAAM,kBAAkB,CAAA;AADxC,OAAO,KAAK,QAAQ,MAAM,sBAAsB,CAAA;AADhD,OAAO,KAAK,GAAG,MAAM,iBAAiB,CAAA;AADtC,OAAO,KAAK,IAAI,MAAM,kBAAkB,CAAA;;;;;;;;;;;;;;;;AAMjC,MAAM,KAAK,GAAG;IAAE,GAAG,kKAAY;IAAE,GAAG,+JAAK;IAAE,GAAG,+JAAK;IAAE,GAAG,gKAAM;IAAE,GAAG,gKAAM;IAAE,GAAG,gKAAM;IAAE,GAAG,gKAAM;IAAE,GAAG,gKAAM;IAAE,GAAG,gKAAM;IAAE,GAAG,sKAAY;AAAA,CAAE,CAAA;AACxI,MAAM,MAAM,GAAG;IAAE,GAAG,+JAAI;IAAE,GAAG,mKAAQ;AAAA,CAAE,CAAA;AACvC,MAAM,MAAM,GAAG;SAAE,GAAG;UAAE,IAAI;AAAA,CAAE,CAAA","ignoreList":[0]}},
    {"offset": {"line": 1843, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1872, "column": 0}, "map": {"version":3,"file":"as-uint8array.node.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/uint8arrays/src/util/as-uint8array.node.ts"],"sourcesContent":["/**\n * To guarantee Uint8Array semantics, convert nodejs Buffers\n * into vanilla Uint8Arrays\n */\nexport function asUint8Array (buf: Uint8Array): Uint8Array {\n  return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength)\n}\n"],"names":[],"mappings":"AAAA;;;GAGG;;;AACG,SAAU,YAAY,CAAE,GAAe;IAC3C,OAAO,IAAI,UAAU,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC,UAAU,CAAC,CAAA;AACnE,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1881, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1887, "column": 0}, "map": {"version":3,"file":"alloc.node.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/uint8arrays/src/alloc.node.ts"],"sourcesContent":["import { Buffer } from 'node:buffer'\nimport { asUint8Array } from '#util/as-uint8array'\n\n/**\n * Returns a `Uint8Array` of the requested size. Referenced memory will\n * be initialized to 0.\n */\nexport function alloc (size: number = 0): Uint8Array {\n  return asUint8Array(Buffer.alloc(size))\n}\n\n/**\n * Where possible returns a Uint8Array of the requested size that references\n * uninitialized memory. Only use if you are certain you will immediately\n * overwrite every value in the returned `Uint8Array`.\n */\nexport function allocUnsafe (size: number = 0): Uint8Array {\n  return asUint8Array(Buffer.allocUnsafe(size))\n}\n"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAA;AACpC,OAAO,EAAE,YAAY,EAAE,MAAM,qBAAqB,CAAA;;;AAM5C,SAAU,KAAK,CAAE,OAAe,CAAC;IACrC,4LAAO,eAAA,AAAY,wHAAC,SAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAA;AACzC,CAAC;AAOK,SAAU,WAAW,CAAE,OAAe,CAAC;IAC3C,4LAAO,eAAA,AAAY,wHAAC,SAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAA;AAC/C,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1901, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1907, "column": 0}, "map": {"version":3,"file":"bases.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/uint8arrays/src/util/bases.ts"],"sourcesContent":["import { bases } from 'multiformats/basics'\nimport type { MultibaseCodec } from 'multiformats'\nimport { allocUnsafe } from '#alloc'\n\nfunction createCodec (name: string, prefix: string, encode: (buf: Uint8Array) => string, decode: (str: string) => Uint8Array): MultibaseCodec<any> {\n  return {\n    name,\n    prefix,\n    encoder: {\n      name,\n      prefix,\n      encode\n    },\n    decoder: {\n      decode\n    }\n  }\n}\n\nconst string = createCodec('utf8', 'u', (buf) => {\n  const decoder = new TextDecoder('utf8')\n  return 'u' + decoder.decode(buf)\n}, (str) => {\n  const encoder = new TextEncoder()\n  return encoder.encode(str.substring(1))\n})\n\nconst ascii = createCodec('ascii', 'a', (buf) => {\n  let string = 'a'\n\n  for (let i = 0; i < buf.length; i++) {\n    string += String.fromCharCode(buf[i])\n  }\n  return string\n}, (str) => {\n  str = str.substring(1)\n  const buf = allocUnsafe(str.length)\n\n  for (let i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i)\n  }\n\n  return buf\n})\n\nexport type SupportedEncodings = 'utf8' | 'utf-8' | 'hex' | 'latin1' | 'ascii' | 'binary' | keyof typeof bases\n\nconst BASES: Record<SupportedEncodings, MultibaseCodec<any>> = {\n  utf8: string,\n  'utf-8': string,\n  hex: bases.base16,\n  latin1: ascii,\n  ascii,\n  binary: ascii,\n\n  ...bases\n}\n\nexport default BASES\n"],"names":[],"mappings":";;;AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAA;AAE3C,OAAO,EAAE,WAAW,EAAE,MAAM,QAAQ,CAAA;;;;AAEpC,SAAS,WAAW,CAAE,IAAY,EAAE,MAAc,EAAE,MAAmC,EAAE,MAAmC;IAC1H,OAAO;QACL,IAAI;QACJ,MAAM;QACN,OAAO,EAAE;YACP,IAAI;YACJ,MAAM;YACN,MAAM;SACP;QACD,OAAO,EAAE;YACP,MAAM;SACP;KACF,CAAA;AACH,CAAC;AAED,MAAM,MAAM,GAAG,WAAW,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,EAAE;IAC9C,MAAM,OAAO,GAAG,IAAI,WAAW,CAAC,MAAM,CAAC,CAAA;IACvC,OAAO,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;AAClC,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE;IACT,MAAM,OAAO,GAAG,IAAI,WAAW,EAAE,CAAA;IACjC,OAAO,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAA;AACzC,CAAC,CAAC,CAAA;AAEF,MAAM,KAAK,GAAG,WAAW,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,EAAE;IAC9C,IAAI,MAAM,GAAG,GAAG,CAAA;IAEhB,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE,CAAC;QACpC,MAAM,IAAI,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;IACvC,CAAC;IACD,OAAO,MAAM,CAAA;AACf,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE;IACT,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;IACtB,MAAM,GAAG,qKAAG,cAAA,AAAW,EAAC,GAAG,CAAC,MAAM,CAAC,CAAA;IAEnC,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE,CAAC;QACpC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;IAC5B,CAAC;IAED,OAAO,GAAG,CAAA;AACZ,CAAC,CAAC,CAAA;AAIF,MAAM,KAAK,GAAoD;IAC7D,IAAI,EAAE,MAAM;IACZ,OAAO,EAAE,MAAM;IACf,GAAG,EAAE,gLAAK,CAAC,MAAM;IACjB,MAAM,EAAE,KAAK;IACb,KAAK;IACL,MAAM,EAAE,KAAK;IAEb,2KAAG,QAAK;CACT,CAAA;uCAEc,KAAK,CAAA","ignoreList":[0]}},
    {"offset": {"line": 1961, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1967, "column": 0}, "map": {"version":3,"file":"to-string.node.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/uint8arrays/src/to-string.node.ts"],"sourcesContent":["import { Buffer } from 'node:buffer'\nimport bases, { type SupportedEncodings } from './util/bases.js'\n\nexport type { SupportedEncodings }\n\n/**\n * Turns a `Uint8Array` into a string.\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n */\nexport function toString (array: Uint8Array, encoding: SupportedEncodings = 'utf8'): string {\n  const base = bases[encoding]\n\n  if (base == null) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`)\n  }\n\n  if (encoding === 'utf8' || encoding === 'utf-8') {\n    return Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString('utf8')\n  }\n\n  // strip multibase prefix\n  return base.encoder.encode(array).substring(1)\n}\n"],"names":[],"mappings":";;;AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAA;AACpC,OAAO,KAAK,EAAE,EAA2B,MAAM,iBAAiB,CAAA;;;AAW1D,SAAU,QAAQ,CAAE,KAAiB,EAAE,WAA+B,MAAM;IAChF,MAAM,IAAI,iKAAG,UAAK,CAAC,QAAQ,CAAC,CAAA;IAE5B,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;QACjB,MAAM,IAAI,KAAK,CAAC,CAAA,sBAAA,EAAyB,QAAQ,CAAA,CAAA,CAAG,CAAC,CAAA;IACvD,CAAC;IAED,IAAI,QAAQ,KAAK,MAAM,IAAI,QAAQ,KAAK,OAAO,EAAE,CAAC;QAChD,6HAAO,SAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;IACvF,CAAC;IAED,yBAAyB;IACzB,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;AAChD,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1985, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1991, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/uint8-varint/src/index.ts"],"sourcesContent":["/* eslint-disable no-fallthrough */\nimport { allocUnsafe } from 'uint8arrays/alloc'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nconst N1 = Math.pow(2, 7)\nconst N2 = Math.pow(2, 14)\nconst N3 = Math.pow(2, 21)\nconst N4 = Math.pow(2, 28)\nconst N5 = Math.pow(2, 35)\nconst N6 = Math.pow(2, 42)\nconst N7 = Math.pow(2, 49)\n\n/** Most significant bit of a byte */\nconst MSB = 0x80\n/** Rest of the bits in a byte */\nconst REST = 0x7f\n\nexport function encodingLength (value: number): number {\n  if (value < N1) {\n    return 1\n  }\n\n  if (value < N2) {\n    return 2\n  }\n\n  if (value < N3) {\n    return 3\n  }\n\n  if (value < N4) {\n    return 4\n  }\n\n  if (value < N5) {\n    return 5\n  }\n\n  if (value < N6) {\n    return 6\n  }\n\n  if (value < N7) {\n    return 7\n  }\n\n  if (Number.MAX_SAFE_INTEGER != null && value > Number.MAX_SAFE_INTEGER) {\n    throw new RangeError('Could not encode varint')\n  }\n\n  return 8\n}\n\nexport function encodeUint8Array (value: number, buf: Uint8Array, offset: number = 0): Uint8Array {\n  switch (encodingLength(value)) {\n    case 8: {\n      buf[offset++] = (value & 0xFF) | MSB\n      value /= 128\n    }\n    case 7: {\n      buf[offset++] = (value & 0xFF) | MSB\n      value /= 128\n    }\n    case 6: {\n      buf[offset++] = (value & 0xFF) | MSB\n      value /= 128\n    }\n    case 5: {\n      buf[offset++] = (value & 0xFF) | MSB\n      value /= 128\n    }\n    case 4: {\n      buf[offset++] = (value & 0xFF) | MSB\n      value >>>= 7\n    }\n    case 3: {\n      buf[offset++] = (value & 0xFF) | MSB\n      value >>>= 7\n    }\n    case 2: {\n      buf[offset++] = (value & 0xFF) | MSB\n      value >>>= 7\n    }\n    case 1: {\n      buf[offset++] = (value & 0xFF)\n      value >>>= 7\n      break\n    }\n    default: throw new Error('unreachable')\n  }\n  return buf\n}\n\nexport function encodeUint8ArrayList (value: number, buf: Uint8ArrayList, offset: number = 0): Uint8ArrayList {\n  switch (encodingLength(value)) {\n    case 8: {\n      buf.set(offset++, (value & 0xFF) | MSB)\n      value /= 128\n    }\n    case 7: {\n      buf.set(offset++, (value & 0xFF) | MSB)\n      value /= 128\n    }\n    case 6: {\n      buf.set(offset++, (value & 0xFF) | MSB)\n      value /= 128\n    }\n    case 5: {\n      buf.set(offset++, (value & 0xFF) | MSB)\n      value /= 128\n    }\n    case 4: {\n      buf.set(offset++, (value & 0xFF) | MSB)\n      value >>>= 7\n    }\n    case 3: {\n      buf.set(offset++, (value & 0xFF) | MSB)\n      value >>>= 7\n    }\n    case 2: {\n      buf.set(offset++, (value & 0xFF) | MSB)\n      value >>>= 7\n    }\n    case 1: {\n      buf.set(offset++, (value & 0xFF))\n      value >>>= 7\n      break\n    }\n    default: throw new Error('unreachable')\n  }\n  return buf\n}\n\nexport function decodeUint8Array (buf: Uint8Array, offset: number): number {\n  let b = buf[offset]\n  let res = 0\n\n  res += b & REST\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf[offset + 1]\n  res += (b & REST) << 7\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf[offset + 2]\n  res += (b & REST) << 14\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf[offset + 3]\n  res += (b & REST) << 21\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf[offset + 4]\n  res += (b & REST) * N4\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf[offset + 5]\n  res += (b & REST) * N5\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf[offset + 6]\n  res += (b & REST) * N6\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf[offset + 7]\n  res += (b & REST) * N7\n  if (b < MSB) {\n    return res\n  }\n\n  throw new RangeError('Could not decode varint')\n}\n\nexport function decodeUint8ArrayList (buf: Uint8ArrayList, offset: number): number {\n  let b = buf.get(offset)\n  let res = 0\n\n  res += b & REST\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf.get(offset + 1)\n  res += (b & REST) << 7\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf.get(offset + 2)\n  res += (b & REST) << 14\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf.get(offset + 3)\n  res += (b & REST) << 21\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf.get(offset + 4)\n  res += (b & REST) * N4\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf.get(offset + 5)\n  res += (b & REST) * N5\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf.get(offset + 6)\n  res += (b & REST) * N6\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf.get(offset + 7)\n  res += (b & REST) * N7\n  if (b < MSB) {\n    return res\n  }\n\n  throw new RangeError('Could not decode varint')\n}\n\nexport function encode (value: number): Uint8Array\nexport function encode (value: number, buf: Uint8Array, offset?: number): Uint8Array\nexport function encode (value: number, buf: Uint8ArrayList, offset?: number): Uint8ArrayList\nexport function encode <T extends Uint8Array | Uint8ArrayList = Uint8Array> (value: number, buf?: T, offset: number = 0): T {\n  if (buf == null) {\n    buf = allocUnsafe(encodingLength(value)) as T\n  }\n  if (buf instanceof Uint8Array) {\n    return encodeUint8Array(value, buf, offset) as T\n  } else {\n    return encodeUint8ArrayList(value, buf, offset) as T\n  }\n}\n\nexport function decode (buf: Uint8ArrayList | Uint8Array, offset: number = 0): number {\n  if (buf instanceof Uint8Array) {\n    return decodeUint8Array(buf, offset)\n  } else {\n    return decodeUint8ArrayList(buf, offset)\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2239, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2245, "column": 0}, "map": {"version":3,"file":"concat.node.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/uint8arrays/src/concat.node.ts"],"sourcesContent":["import { Buffer } from 'node:buffer'\nimport { asUint8Array } from '#util/as-uint8array'\n\n/**\n * Returns a new Uint8Array created by concatenating the passed Uint8Arrays\n */\nexport function concat (arrays: Uint8Array[], length?: number): Uint8Array {\n  return asUint8Array(Buffer.concat(arrays, length))\n}\n"],"names":[],"mappings":";;;AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAA;AACpC,OAAO,EAAE,YAAY,EAAE,MAAM,qBAAqB,CAAA;;;AAK5C,SAAU,MAAM,CAAE,MAAoB,EAAE,MAAe;IAC3D,4LAAO,eAAA,AAAY,wHAAC,SAAM,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAA;AACpD,CAAC","ignoreList":[0]}},
    {"offset": {"line": 2255, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2261, "column": 0}, "map": {"version":3,"file":"parser.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/%40chainsafe/is-ip/src/parser.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-return */\n\n// Heavily inspired by https://doc.rust-lang.org/src/std/net/parser.rs.html\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Fn = (...foo: any) => any;\n\nexport class Parser {\n  private index = 0;\n  private input = \"\";\n\n  new(input: string): this {\n    this.index = 0;\n    this.input = input;\n    return this;\n  }\n\n  /** Run a parser, and restore the pre-parse state if it fails. */\n  readAtomically<T extends Fn>(fn: T): ReturnType<T> {\n    const index = this.index;\n    const result = fn();\n    if (result === undefined) {\n      this.index = index;\n    }\n    return result;\n  }\n\n  /** Run a parser, but fail if the entire input wasn't consumed. Doesn't run atomically. */\n  parseWith<T extends Fn>(fn: T): ReturnType<T> | undefined {\n    const result = fn();\n    if (this.index !== this.input.length) {\n      return undefined;\n    }\n    return result;\n  }\n\n  /** Peek the next character from the input */\n  peekChar(): string | undefined {\n    if (this.index >= this.input.length) {\n      return undefined;\n    }\n    return this.input[this.index];\n  }\n\n  /** Read the next character from the input */\n  readChar(): string | undefined {\n    if (this.index >= this.input.length) {\n      return undefined;\n    }\n    return this.input[this.index++];\n  }\n\n  /** Read the next character from the input if it matches the target. */\n  readGivenChar(target: string): string | undefined {\n    return this.readAtomically(() => {\n      const char = this.readChar();\n      if (char !== target) {\n        return undefined;\n      }\n      return char;\n    });\n  }\n\n  /**\n   * Helper for reading separators in an indexed loop. Reads the separator\n   * character iff index > 0, then runs the parser. When used in a loop,\n   * the separator character will only be read on index > 0 (see\n   * readIPv4Addr for an example)\n   */\n  readSeparator<T extends Fn>(sep: string, index: number, inner: T): ReturnType<T> {\n    return this.readAtomically(() => {\n      if (index > 0) {\n        if (this.readGivenChar(sep) === undefined) {\n          return undefined;\n        }\n      }\n      return inner();\n    });\n  }\n\n  /**\n   * Read a number off the front of the input in the given radix, stopping\n   * at the first non-digit character or eof. Fails if the number has more\n   * digits than max_digits or if there is no number.\n   */\n  readNumber(\n    radix: number,\n    maxDigits: number | undefined,\n    allowZeroPrefix: boolean,\n    maxBytes: number\n  ): number | undefined {\n    return this.readAtomically(() => {\n      let result = 0;\n      let digitCount = 0;\n\n      const leadingChar = this.peekChar();\n      if (leadingChar === undefined) {\n        return undefined;\n      }\n      const hasLeadingZero = leadingChar === \"0\";\n      const maxValue = 2 ** (8 * maxBytes) - 1;\n\n      // eslint-disable-next-line no-constant-condition\n      while (true) {\n        const digit = this.readAtomically(() => {\n          const char = this.readChar();\n          if (char === undefined) {\n            return undefined;\n          }\n          const num = Number.parseInt(char, radix);\n          if (Number.isNaN(num)) {\n            return undefined;\n          }\n          return num;\n        });\n        if (digit === undefined) {\n          break;\n        }\n        result *= radix;\n        result += digit;\n        if (result > maxValue) {\n          return undefined;\n        }\n        digitCount += 1;\n        if (maxDigits !== undefined) {\n          if (digitCount > maxDigits) {\n            return undefined;\n          }\n        }\n      }\n\n      if (digitCount === 0) {\n        return undefined;\n      } else if (!allowZeroPrefix && hasLeadingZero && digitCount > 1) {\n        return undefined;\n      } else {\n        return result;\n      }\n    });\n  }\n\n  /** Read an IPv4 address. */\n  readIPv4Addr(): Uint8Array | undefined {\n    return this.readAtomically(() => {\n      const out = new Uint8Array(4);\n\n      for (let i = 0; i < out.length; i++) {\n        const ix = this.readSeparator(\".\", i, () => this.readNumber(10, 3, false, 1));\n        if (ix === undefined) {\n          return undefined;\n        }\n        out[i] = ix;\n      }\n\n      return out;\n    });\n  }\n\n  /** Read an IPv6 Address. */\n  readIPv6Addr(): Uint8Array | undefined {\n    /**\n     * Read a chunk of an IPv6 address into `groups`. Returns the number\n     * of groups read, along with a bool indicating if an embedded\n     * trailing IPv4 address was read. Specifically, read a series of\n     * colon-separated IPv6 groups (0x0000 - 0xFFFF), with an optional\n     * trailing embedded IPv4 address.\n     */\n    const readGroups = (groups: Uint8Array): [number, boolean] => {\n      for (let i = 0; i < groups.length / 2; i++) {\n        const ix = i * 2;\n        // Try to read a trailing embedded IPv4 address. There must be at least 4 groups left.\n        if (i < groups.length - 3) {\n          const ipv4 = this.readSeparator(\":\", i, () => this.readIPv4Addr());\n          if (ipv4 !== undefined) {\n            groups[ix] = ipv4[0];\n            groups[ix + 1] = ipv4[1];\n            groups[ix + 2] = ipv4[2];\n            groups[ix + 3] = ipv4[3];\n\n            return [ix + 4, true];\n          }\n        }\n\n        const group = this.readSeparator(\":\", i, () => this.readNumber(16, 4, true, 2));\n        if (group === undefined) {\n          return [ix, false];\n        }\n        groups[ix] = group >> 8;\n        groups[ix + 1] = group & 255;\n      }\n      return [groups.length, false];\n    };\n\n    return this.readAtomically(() => {\n      // Read the front part of the address; either the whole thing, or up to the first ::\n      const head = new Uint8Array(16);\n      const [headSize, headIp4] = readGroups(head);\n\n      if (headSize === 16) {\n        return head;\n      }\n\n      // IPv4 part is not allowed before `::`\n      if (headIp4) {\n        return undefined;\n      }\n\n      // Read `::` if previous code parsed less than 8 groups.\n      // `::` indicates one or more groups of 16 bits of zeros.\n      if (this.readGivenChar(\":\") === undefined) {\n        return undefined;\n      }\n      if (this.readGivenChar(\":\") === undefined) {\n        return undefined;\n      }\n\n      // Read the back part of the address. The :: must contain at least one\n      // set of zeroes, so our max length is 7.\n      const tail = new Uint8Array(14);\n      const limit = 16 - (headSize + 2);\n      const [tailSize] = readGroups(tail.subarray(0, limit));\n\n      // Concat the head and tail of the IP address\n      head.set(tail.subarray(0, tailSize), 16 - tailSize);\n\n      return head;\n    });\n  }\n\n  /** Read an IP Address, either IPv4 or IPv6. */\n  readIPAddr(): Uint8Array | undefined {\n    return this.readIPv4Addr() ?? this.readIPv6Addr();\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2459, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2465, "column": 0}, "map": {"version":3,"file":"parse.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/%40chainsafe/is-ip/src/parse.ts"],"sourcesContent":["import { Parser } from \"./parser.js\";\n\n// See https://stackoverflow.com/questions/166132/maximum-length-of-the-textual-representation-of-an-ipv6-address\nconst MAX_IPV6_LENGTH = 45;\nconst MAX_IPV4_LENGTH = 15;\n\nconst parser = new Parser();\n\n/** Parse `input` into IPv4 bytes. */\nexport function parseIPv4(input: string): Uint8Array | undefined {\n  if (input.length > MAX_IPV4_LENGTH) {\n    return undefined;\n  }\n  return parser.new(input).parseWith(() => parser.readIPv4Addr());\n}\n\n/** Parse IPv4 `input` into IPv6 with IPv4-mapped bytes, eg ::ffff:1.2.3.4 */\nexport function parseIPv4Mapped(input: string): Uint8Array | undefined {\n  if (input.length > MAX_IPV4_LENGTH) {\n    return undefined;\n  }\n\n  const ipv4 = parser.new(input).parseWith(() => parser.readIPv4Addr());\n  if (ipv4 === undefined) {\n    return undefined;\n  }\n\n  return Uint8Array.from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff, ipv4[0], ipv4[1], ipv4[2], ipv4[3]]);\n}\n\n/** Parse `input` into IPv6 bytes. */\nexport function parseIPv6(input: string): Uint8Array | undefined {\n  // strip zone index if it is present\n  if (input.includes(\"%\")) {\n    input = input.split(\"%\")[0];\n  }\n  if (input.length > MAX_IPV6_LENGTH) {\n    return undefined;\n  }\n  return parser.new(input).parseWith(() => parser.readIPv6Addr());\n}\n\n/** Parse `input` into IPv4 or IPv6 bytes. */\nexport function parseIP(input: string, mapIPv4ToIPv6 = false): Uint8Array | undefined {\n  // strip zone index if it is present\n  if (input.includes(\"%\")) {\n    input = input.split(\"%\")[0];\n  }\n\n  if (input.length > MAX_IPV6_LENGTH) {\n    return undefined;\n  }\n\n  const addr = parser.new(input).parseWith(() => parser.readIPAddr());\n  if (!addr) {\n    return undefined;\n  }\n\n  if (mapIPv4ToIPv6 && addr.length === 4) {\n    return Uint8Array.from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff, addr[0], addr[1], addr[2], addr[3]]);\n  }\n\n  return addr;\n}\n"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAC;;AAErC,iHAAiH;AACjH,MAAM,eAAe,GAAG,EAAE,CAAC;AAC3B,MAAM,eAAe,GAAG,EAAE,CAAC;AAE3B,MAAM,MAAM,GAAG,+JAAI,SAAM,EAAE,CAAC;AAGtB,SAAU,SAAS,CAAC,KAAa;IACrC,IAAI,KAAK,CAAC,MAAM,GAAG,eAAe,EAAE;QAClC,OAAO,SAAS,CAAC;KAClB;IACD,OAAO,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,GAAG,CAAG,CAAD,KAAO,CAAC,YAAY,EAAE,CAAC,CAAC;AAClE,CAAC;AAGK,SAAU,eAAe,CAAC,KAAa;IAC3C,IAAI,KAAK,CAAC,MAAM,GAAG,eAAe,EAAE;QAClC,OAAO,SAAS,CAAC;KAClB;IAED,MAAM,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,GAAG,CAAG,CAAD,KAAO,CAAC,YAAY,EAAE,CAAC,CAAC;IACtE,IAAI,IAAI,KAAK,SAAS,EAAE;QACtB,OAAO,SAAS,CAAC;KAClB;IAED,OAAO,UAAU,CAAC,IAAI,CAAC;QAAC,CAAC;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QAAE,IAAI;QAAE,IAAI;QAAE,IAAI,CAAC,CAAC,CAAC;QAAE,IAAI,CAAC,CAAC,CAAC;QAAE,IAAI,CAAC,CAAC,CAAC;QAAE,IAAI,CAAC,CAAC,CAAC;KAAC,CAAC,CAAC;AACzG,CAAC;AAGK,SAAU,SAAS,CAAC,KAAa;IACrC,oCAAoC;IACpC,IAAI,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QACvB,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;KAC7B;IACD,IAAI,KAAK,CAAC,MAAM,GAAG,eAAe,EAAE;QAClC,OAAO,SAAS,CAAC;KAClB;IACD,OAAO,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,GAAG,CAAG,CAAD,KAAO,CAAC,YAAY,EAAE,CAAC,CAAC;AAClE,CAAC;AAGK,SAAU,OAAO,CAAC,KAAa,EAAE,aAAa,GAAG,KAAK;IAC1D,oCAAoC;IACpC,IAAI,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QACvB,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;KAC7B;IAED,IAAI,KAAK,CAAC,MAAM,GAAG,eAAe,EAAE;QAClC,OAAO,SAAS,CAAC;KAClB;IAED,MAAM,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,GAAG,CAAG,CAAD,KAAO,CAAC,UAAU,EAAE,CAAC,CAAC;IACpE,IAAI,CAAC,IAAI,EAAE;QACT,OAAO,SAAS,CAAC;KAClB;IAED,IAAI,aAAa,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;QACtC,OAAO,UAAU,CAAC,IAAI,CAAC;YAAC,CAAC;YAAE,CAAC;YAAE,CAAC;YAAE,CAAC;YAAE,CAAC;YAAE,CAAC;YAAE,CAAC;YAAE,CAAC;YAAE,CAAC;YAAE,CAAC;YAAE,IAAI;YAAE,IAAI;YAAE,IAAI,CAAC,CAAC,CAAC;YAAE,IAAI,CAAC,CAAC,CAAC;YAAE,IAAI,CAAC,CAAC,CAAC;YAAE,IAAI,CAAC,CAAC,CAAC;SAAC,CAAC,CAAC;KACxG;IAED,OAAO,IAAI,CAAC;AACd,CAAC","ignoreList":[0]}},
    {"offset": {"line": 2554, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2560, "column": 0}, "map": {"version":3,"file":"util.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/%40chainsafe/netmask/src/util.ts"],"sourcesContent":["import { IPv4Len, IPv6Len } from \"./ip.js\";\n\nexport function allFF(\n  a: number[] | Uint8Array,\n  from: number,\n  to: number\n): boolean {\n  let i = 0;\n  for (const e of a) {\n    if (i < from) continue;\n    if (i > to) break;\n    if (e !== 0xff) return false;\n    i++;\n  }\n  return true;\n}\n\nexport function deepEqual(\n  a: Uint8Array | number[],\n  b: Uint8Array,\n  from: number,\n  to: number\n): boolean {\n  let i = 0;\n  for (const e of a) {\n    if (i < from) continue;\n    if (i > to) break;\n    if (e !== b[i]) return false;\n    i++;\n  }\n  return true;\n}\n\n/***\n * Returns long ip format\n */\nexport function ipToString(ip: Uint8Array | number[]): string {\n  switch (ip.length) {\n    case IPv4Len: {\n      return ip.join(\".\");\n    }\n    case IPv6Len: {\n      const result = [] as string[];\n      for (let i = 0; i < ip.length; i++) {\n        if (i % 2 === 0) {\n          result.push(\n            ip[i].toString(16).padStart(2, \"0\") +\n              ip[i + 1].toString(16).padStart(2, \"0\")\n          );\n        }\n      }\n      return result.join(\":\");\n    }\n    default: {\n      throw new Error(\"Invalid ip length\");\n    }\n  }\n}\n\n/**\n * If mask is a sequence of 1 bits followed by 0 bits, return number of 1 bits else -1\n */\nexport function simpleMaskLength(mask: Uint8Array): number {\n  let ones = 0;\n  // eslint-disable-next-line prefer-const\n  for (let [index, byte] of mask.entries()) {\n    if (byte === 0xff) {\n      ones += 8;\n      continue;\n    }\n    while ((byte & 0x80) != 0) {\n      ones++;\n      byte = byte << 1;\n    }\n    if ((byte & 0x80) != 0) {\n      return -1;\n    }\n    for (let i = index + 1; i < mask.length; i++) {\n      if (mask[i] != 0) {\n        return -1;\n      }\n    }\n    break;\n  }\n  return ones;\n}\n\nexport function maskToHex(mask: Uint8Array): string {\n  let hex = \"0x\";\n  for (const byte of mask) {\n    hex += (byte >> 4).toString(16) + (byte & 0x0f).toString(16);\n  }\n  return hex;\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2642, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2648, "column": 0}, "map": {"version":3,"file":"ip.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/%40chainsafe/netmask/src/ip.ts"],"sourcesContent":["import { parseIP } from \"@chainsafe/is-ip/parse\";\nimport { allFF, deepEqual } from \"./util.js\";\n\nexport const IPv4Len = 4;\nexport const IPv6Len = 16;\n\nexport const maxIPv6Octet = parseInt(\"0xFFFF\", 16);\nexport const ipv4Prefix = new Uint8Array([\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255,\n]);\n\nexport interface IpNetRaw {\n  network: Uint8Array;\n  mask: Uint8Array;\n}\n\nexport function maskIp(ip: Uint8Array, mask: Uint8Array): Uint8Array {\n  if (mask.length === IPv6Len && ip.length === IPv4Len && allFF(mask, 0, 11)) {\n    mask = mask.slice(12);\n  }\n  if (\n    mask.length === IPv4Len &&\n    ip.length === IPv6Len &&\n    deepEqual(ip, ipv4Prefix, 0, 11)\n  ) {\n    ip = ip.slice(12);\n  }\n  const n = ip.length;\n  if (n != mask.length) {\n    throw new Error(\"Failed to mask ip\");\n  }\n  const out = new Uint8Array(n);\n  for (let i = 0; i < n; i++) {\n    out[i] = ip[i] & mask[i];\n  }\n  return out;\n}\n\nexport function containsIp(\n  net: IpNetRaw,\n  ip: Uint8Array | number[] | string\n): boolean {\n  if (typeof ip === \"string\") {\n    ip = parseIP(ip)!;\n  }\n  if (ip == null) throw new Error(\"Invalid ip\");\n  if (ip.length !== net.network.length) {\n    return false;\n  }\n  for (let i = 0; i < ip.length; i++) {\n    if ((net.network[i] & net.mask[i]) !== (ip[i] & net.mask[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function iPv4FromIPv6(ip: Uint8Array): Uint8Array {\n  if (!isIPv4mappedIPv6(ip)) {\n    throw new Error(\"Must have 0xffff prefix\");\n  }\n  return ip.slice(12);\n}\n\nexport function isIPv4mappedIPv6(ip: Uint8Array | number[]): boolean {\n  return deepEqual(ip, ipv4Prefix, 0, 11);\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2720, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2726, "column": 0}, "map": {"version":3,"file":"cidr.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/%40chainsafe/netmask/src/cidr.ts"],"sourcesContent":["import { parseIPv4, parseIPv6 } from \"@chainsafe/is-ip/parse\";\nimport { IPv4Len, IPv6Len, maskIp } from \"./ip.js\";\n\nexport function parseCidr(s: string): {\n  network: Uint8Array;\n  mask: Uint8Array;\n} {\n  const [address, maskString] = s.split(\"/\");\n  if (!address || !maskString)\n    throw new Error(\"Failed to parse given CIDR: \" + s);\n  let ipLength = IPv4Len;\n  let ip = parseIPv4(address);\n  if (ip == null) {\n    ipLength = IPv6Len;\n    ip = parseIPv6(address);\n    if (ip == null) throw new Error(\"Failed to parse given CIDR: \" + s);\n  }\n  const m = parseInt(maskString, 10);\n  if (\n    Number.isNaN(m) ||\n    String(m).length !== maskString.length ||\n    m < 0 ||\n    m > ipLength * 8\n  ) {\n    throw new Error(\"Failed to parse given CIDR: \" + s);\n  }\n  const mask = cidrMask(m, 8 * ipLength);\n  return {\n    network: maskIp(ip, mask),\n    mask,\n  };\n}\n\nexport function cidrMask(ones: number, bits: number): Uint8Array {\n  if (bits !== 8 * IPv4Len && bits !== 8 * IPv6Len)\n    throw new Error(\"Invalid CIDR mask\");\n  if (ones < 0 || ones > bits) throw new Error(\"Invalid CIDR mask\");\n  const l = bits / 8;\n  const m = new Uint8Array(l);\n  for (let i = 0; i < l; i++) {\n    if (ones >= 8) {\n      m[i] = 0xff;\n      ones -= 8;\n      continue;\n    }\n    m[i] = 255 - (0xff >> ones);\n    ones = 0;\n  }\n  return m;\n}\n"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AAC9D,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,SAAS,CAAC;;;AAE7C,SAAU,SAAS,CAAC,CAAS;IAIjC,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC3C,IAAI,CAAC,OAAO,IAAI,CAAC,UAAU,EACzB,MAAM,IAAI,KAAK,CAAC,8BAA8B,GAAG,CAAC,CAAC,CAAC;IACtD,IAAI,QAAQ,iKAAG,UAAO,CAAC;IACvB,IAAI,EAAE,iKAAG,YAAA,AAAS,EAAC,OAAO,CAAC,CAAC;IAC5B,IAAI,EAAE,IAAI,IAAI,EAAE;QACd,QAAQ,iKAAG,UAAO,CAAC;QACnB,EAAE,iKAAG,YAAA,AAAS,EAAC,OAAO,CAAC,CAAC;QACxB,IAAI,EAAE,IAAI,IAAI,EAAE,MAAM,IAAI,KAAK,CAAC,8BAA8B,GAAG,CAAC,CAAC,CAAC;KACrE;IACD,MAAM,CAAC,GAAG,QAAQ,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;IACnC,IACE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,IACf,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,UAAU,CAAC,MAAM,IACtC,CAAC,GAAG,CAAC,IACL,CAAC,GAAG,QAAQ,GAAG,CAAC,EAChB;QACA,MAAM,IAAI,KAAK,CAAC,8BAA8B,GAAG,CAAC,CAAC,CAAC;KACrD;IACD,MAAM,IAAI,GAAG,QAAQ,CAAC,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,CAAC;IACvC,OAAO;QACL,OAAO,GAAE,0KAAA,AAAM,EAAC,EAAE,EAAE,IAAI,CAAC;QACzB,IAAI;KACL,CAAC;AACJ,CAAC;AAEK,SAAU,QAAQ,CAAC,IAAY,EAAE,IAAY;IACjD,IAAI,IAAI,KAAK,CAAC,iKAAG,UAAO,IAAI,IAAI,KAAK,CAAC,GAAG,wKAAO,EAC9C,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;IACvC,IAAI,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,IAAI,EAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;IAClE,MAAM,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC;IACnB,MAAM,CAAC,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC;IAC5B,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAE;QAC1B,IAAI,IAAI,IAAI,CAAC,EAAE;YACb,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;YACZ,IAAI,IAAI,CAAC,CAAC;YACV,SAAS;SACV;QACD,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC;QAC5B,IAAI,GAAG,CAAC,CAAC;KACV;IACD,OAAO,CAAC,CAAC;AACX,CAAC","ignoreList":[0]}},
    {"offset": {"line": 2770, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2776, "column": 0}, "map": {"version":3,"file":"ipnet.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/%40chainsafe/netmask/src/ipnet.ts"],"sourcesContent":["import { parseIP } from \"@chainsafe/is-ip/parse\";\nimport { cidrMask, parseCidr } from \"./cidr.js\";\nimport { containsIp, maskIp } from \"./ip.js\";\nimport { ipToString, maskToHex, simpleMaskLength } from \"./util.js\";\n\nexport class IpNet {\n  public readonly network: Uint8Array;\n  public readonly mask: Uint8Array;\n\n  /**\n   *\n   * @param ipOrCidr either network ip or full cidr address\n   * @param mask in case ipOrCidr is network this can be either mask in decimal format or as ip address\n   */\n  constructor(ipOrCidr: string, mask?: string | number) {\n    if (mask == null) {\n      ({ network: this.network, mask: this.mask } = parseCidr(ipOrCidr));\n    } else {\n      const ipResult = parseIP(ipOrCidr);\n      if (ipResult == null) {\n        throw new Error(\"Failed to parse network\");\n      }\n      mask = String(mask);\n      const m = parseInt(mask, 10);\n      if (\n        Number.isNaN(m) ||\n        String(m).length !== mask.length ||\n        m < 0 ||\n        m > ipResult.length * 8\n      ) {\n        const maskResult = parseIP(mask);\n        if (maskResult == null) {\n          throw new Error(\"Failed to parse mask\");\n        }\n        this.mask = maskResult;\n      } else {\n        this.mask = cidrMask(m, 8 * ipResult.length);\n      }\n      this.network = maskIp(ipResult, this.mask);\n    }\n  }\n\n  /**\n   * Checks if netmask contains ip address\n   * @param ip\n   * @returns\n   */\n  contains(ip: Uint8Array | number[] | string): boolean {\n    return containsIp({ network: this.network, mask: this.mask }, ip);\n  }\n\n  /**Serializes back to string format */\n  toString(): string {\n    const l = simpleMaskLength(this.mask);\n    const mask = l !== -1 ? String(l) : maskToHex(this.mask);\n    return ipToString(this.network) + \"/\" + mask;\n  }\n}\n"],"names":[],"mappings":";;;AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,wBAAwB,CAAC;AACjD,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,WAAW,CAAC;AAChD,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,SAAS,CAAC;AAC7C,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,gBAAgB,EAAE,MAAM,WAAW,CAAC;;;;;AAE9D,MAAO,KAAK;IAIhB;;;;OAIG,CACH,YAAY,QAAgB,EAAE,IAAsB,CAAA;QAClD,IAAI,IAAI,IAAI,IAAI,EAAE;YAChB,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,uKAAG,YAAA,AAAS,EAAC,QAAQ,CAAC,CAAC,CAAC;SACpE,MAAM;YACL,MAAM,QAAQ,iKAAG,UAAA,AAAO,EAAC,QAAQ,CAAC,CAAC;YACnC,IAAI,QAAQ,IAAI,IAAI,EAAE;gBACpB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;aAC5C;YACD,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;YACpB,MAAM,CAAC,GAAG,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YAC7B,IACE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,IACf,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,IAChC,CAAC,GAAG,CAAC,IACL,CAAC,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,EACvB;gBACA,MAAM,UAAU,IAAG,uKAAA,AAAO,EAAC,IAAI,CAAC,CAAC;gBACjC,IAAI,UAAU,IAAI,IAAI,EAAE;oBACtB,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;iBACzC;gBACD,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC;aACxB,MAAM;gBACL,IAAI,CAAC,IAAI,uKAAG,WAAA,AAAQ,EAAC,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;aAC9C;YACD,IAAI,CAAC,OAAO,qKAAG,SAAA,AAAM,EAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;SAC5C;IACH,CAAC;IAED;;;;OAIG,CACH,QAAQ,CAAC,EAAkC,EAAA;QACzC,yKAAO,aAAA,AAAU,EAAC;YAAE,OAAO,EAAE,IAAI,CAAC,OAAO;YAAE,IAAI,EAAE,IAAI,CAAC,IAAI;QAAA,CAAE,EAAE,EAAE,CAAC,CAAC;IACpE,CAAC;IAED,oCAAA,EAAsC,CACtC,QAAQ,GAAA;QACN,MAAM,CAAC,uKAAG,mBAAA,AAAgB,EAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtC,MAAM,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,qKAAC,YAAA,AAAS,EAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzD,2KAAO,aAAA,AAAU,EAAC,IAAI,CAAC,OAAO,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC;IAC/C,CAAC;CACF","ignoreList":[0]}},
    {"offset": {"line": 2830, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2836, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/%40chainsafe/netmask/src/index.ts"],"sourcesContent":["import { IpNet } from \"./ipnet.js\";\n\nexport { ipToString } from \"./util.js\";\nexport { maskIp, iPv4FromIPv6, isIPv4mappedIPv6 } from \"./ip.js\";\nexport { IpNet } from \"./ipnet.js\";\nexport { parseCidr } from \"./cidr.js\";\n\n/**\n * Checks if cidr block contains ip address\n * @param cidr ipv4 or ipv6 formatted cidr . Example 198.51.100.14/24 or 2001:db8::/48\n * @param ip ipv4 or ipv6 address Example 198.51.100.14 or 2001:db8::\n *\n */\nexport function cidrContains(cidr: string, ip: string): boolean {\n  const ipnet = new IpNet(cidr);\n  return ipnet.contains(ip);\n}\n"],"names":[],"mappings":";;;AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,YAAY,CAAC;;;;;;AAa7B,SAAU,YAAY,CAAC,IAAY,EAAE,EAAU;IACnD,MAAM,KAAK,GAAG,qKAAI,QAAK,CAAC,IAAI,CAAC,CAAC;IAC9B,OAAO,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AAC5B,CAAC","ignoreList":[0]}},
    {"offset": {"line": 2849, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2867, "column": 0}, "map": {"version":3,"file":"from-string.node.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/uint8arrays/src/from-string.node.ts"],"sourcesContent":["import { Buffer } from 'node:buffer'\nimport bases, { type SupportedEncodings } from './util/bases.js'\nimport { asUint8Array } from '#util/as-uint8array'\n\nexport type { SupportedEncodings }\n\n/**\n * Create a `Uint8Array` from the passed string\n *\n * Supports `utf8`, `utf-8`, `hex`, and any encoding supported by the multiformats module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n */\nexport function fromString (string: string, encoding: SupportedEncodings = 'utf8'): Uint8Array {\n  const base = bases[encoding]\n\n  if (base == null) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`)\n  }\n\n  if (encoding === 'utf8' || encoding === 'utf-8') {\n    return asUint8Array(Buffer.from(string, 'utf-8'))\n  }\n\n  // add multibase prefix\n  return base.decoder.decode(`${base.prefix}${string}`) // eslint-disable-line @typescript-eslint/restrict-template-expressions\n}\n"],"names":[],"mappings":";;;AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAA;AACpC,OAAO,KAAK,EAAE,EAA2B,MAAM,iBAAiB,CAAA;AAChE,OAAO,EAAE,YAAY,EAAE,MAAM,qBAAqB,CAAA;;;;AAW5C,SAAU,UAAU,CAAE,MAAc,EAAE,WAA+B,MAAM;IAC/E,MAAM,IAAI,iKAAG,UAAK,CAAC,QAAQ,CAAC,CAAA;IAE5B,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;QACjB,MAAM,IAAI,KAAK,CAAC,CAAA,sBAAA,EAAyB,QAAQ,CAAA,CAAA,CAAG,CAAC,CAAA;IACvD,CAAC;IAED,IAAI,QAAQ,KAAK,MAAM,IAAI,QAAQ,KAAK,OAAO,EAAE,CAAC;QAChD,QAAO,mMAAA,AAAY,wHAAC,SAAM,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAA;IACnD,CAAC;IAED,uBAAuB;IACvB,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,MAAM,EAAE,CAAC,CAAA,CAAC,uEAAuE;AAC/H,CAAC","ignoreList":[0]}},
    {"offset": {"line": 2887, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2893, "column": 0}, "map": {"version":3,"file":"is-ip.node.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/%40chainsafe/is-ip/src/is-ip.node.ts"],"sourcesContent":["import { isIPv4, isIPv6, isIP as ipVersion } from \"node:net\";\n\nexport { isIPv4, isIPv6, ipVersion };\n\n/** Check if `input` is IPv4 or IPv6. */\nexport function isIP(input: string): boolean {\n  return Boolean(ipVersion(input));\n}\n"],"names":[],"mappings":";;;AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,IAAI,SAAS,EAAE,MAAM,UAAU,CAAC;;;AAKvD,SAAU,IAAI,CAAC,KAAa;IAChC,OAAO,OAAO,qHAAC,OAAA,AAAS,EAAC,KAAK,CAAC,CAAC,CAAC;AACnC,CAAC","ignoreList":[0]}},
    {"offset": {"line": 2902, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2917, "column": 0}, "map": {"version":3,"file":"ip.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/%40multiformats/multiaddr/src/ip.ts"],"sourcesContent":["import { isIPv4, isIPv6 } from '@chainsafe/is-ip'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\nexport { isIP } from '@chainsafe/is-ip'\nexport const isV4 = isIPv4\nexport const isV6 = isIPv6\n\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7\n// but with buf/offset args removed because we don't use them\nexport const toBytes = function (ip: string): Uint8Array {\n  let offset = 0\n  ip = ip.toString().trim()\n\n  if (isV4(ip)) {\n    const bytes = new Uint8Array(offset + 4)\n\n    ip.split(/\\./g).forEach((byte) => {\n      bytes[offset++] = parseInt(byte, 10) & 0xff\n    })\n\n    return bytes\n  }\n\n  if (isV6(ip)) {\n    const sections = ip.split(':', 8)\n\n    let i\n    for (i = 0; i < sections.length; i++) {\n      const isv4 = isV4(sections[i])\n      let v4Buffer: Uint8Array | undefined\n\n      if (isv4) {\n        v4Buffer = toBytes(sections[i])\n        sections[i] = uint8ArrayToString(v4Buffer.slice(0, 2), 'base16')\n      }\n\n      if (v4Buffer != null && ++i < 8) {\n        sections.splice(i, 0, uint8ArrayToString(v4Buffer.slice(2, 4), 'base16'))\n      }\n    }\n\n    if (sections[0] === '') {\n      while (sections.length < 8) sections.unshift('0')\n    } else if (sections[sections.length - 1] === '') {\n      while (sections.length < 8) sections.push('0')\n    } else if (sections.length < 8) {\n      for (i = 0; i < sections.length && sections[i] !== ''; i++);\n      const argv: [number, number, ...string[]] = [i, 1]\n      for (i = 9 - sections.length; i > 0; i--) {\n        argv.push('0')\n      }\n      sections.splice.apply(sections, argv)\n    }\n\n    const bytes = new Uint8Array(offset + 16)\n\n    for (i = 0; i < sections.length; i++) {\n      const word = parseInt(sections[i], 16)\n      bytes[offset++] = (word >> 8) & 0xff\n      bytes[offset++] = word & 0xff\n    }\n\n    return bytes\n  }\n\n  throw new Error('invalid ip address')\n}\n\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63\nexport const toString = function (buf: Uint8Array, offset: number = 0, length?: number): string {\n  offset = ~~offset\n  length = length ?? (buf.length - offset)\n\n  const view = new DataView(buf.buffer)\n\n  if (length === 4) {\n    const result = []\n\n    // IPv4\n    for (let i = 0; i < length; i++) {\n      result.push(buf[offset + i])\n    }\n\n    return result.join('.')\n  }\n\n  if (length === 16) {\n    const result = []\n\n    // IPv6\n    for (let i = 0; i < length; i += 2) {\n      result.push(view.getUint16(offset + i).toString(16))\n    }\n\n    return result.join(':')\n      .replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3')\n      .replace(/:{3,4}/, '::')\n  }\n\n  return ''\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3001, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3017, "column": 0}, "map": {"version":3,"file":"protocols-table.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/%40multiformats/multiaddr/src/protocols-table.ts"],"sourcesContent":["import type { Protocol } from './index.js'\n\nconst V = -1\nexport const names: Record<string, Protocol> = {}\nexport const codes: Record<number, Protocol> = {}\n\nexport const table: Array<[number, number, string, boolean?, boolean?]> = [\n  [4, 32, 'ip4'],\n  [6, 16, 'tcp'],\n  [33, 16, 'dccp'],\n  [41, 128, 'ip6'],\n  [42, V, 'ip6zone'],\n  [43, 8, 'ipcidr'],\n  [53, V, 'dns', true],\n  [54, V, 'dns4', true],\n  [55, V, 'dns6', true],\n  [56, V, 'dnsaddr', true],\n  [132, 16, 'sctp'],\n  [273, 16, 'udp'],\n  [275, 0, 'p2p-webrtc-star'],\n  [276, 0, 'p2p-webrtc-direct'],\n  [277, 0, 'p2p-stardust'],\n  [280, 0, 'webrtc-direct'],\n  [281, 0, 'webrtc'],\n  [290, 0, 'p2p-circuit'],\n  [301, 0, 'udt'],\n  [302, 0, 'utp'],\n  [400, V, 'unix', false, true],\n  // `ipfs` is added before `p2p` for legacy support.\n  // All text representations will default to `p2p`, but `ipfs` will\n  // still be supported\n  [421, V, 'ipfs'],\n  // `p2p` is the preferred name for 421, and is now the default\n  [421, V, 'p2p'],\n  [443, 0, 'https'],\n  [444, 96, 'onion'],\n  [445, 296, 'onion3'],\n  [446, V, 'garlic64'],\n  [448, 0, 'tls'],\n  [449, V, 'sni'],\n  [460, 0, 'quic'],\n  [461, 0, 'quic-v1'],\n  [465, 0, 'webtransport'],\n  [466, V, 'certhash'],\n  [477, 0, 'ws'],\n  [478, 0, 'wss'],\n  [479, 0, 'p2p-websocket-star'],\n  [480, 0, 'http'],\n  [481, V, 'http-path'],\n  [777, V, 'memory']\n]\n\n// populate tables\ntable.forEach(row => {\n  const proto = createProtocol(...row)\n  codes[proto.code] = proto\n  names[proto.name] = proto\n})\n\nexport function createProtocol (code: number, size: number, name: string, resolvable?: any, path?: any): Protocol {\n  return {\n    code,\n    size,\n    name,\n    resolvable: Boolean(resolvable),\n    path: Boolean(path)\n  }\n}\n\n/**\n * For the passed proto string or number, return a {@link Protocol}\n *\n * @example\n *\n * ```js\n * import { protocol } from '@multiformats/multiaddr'\n *\n * console.info(protocol(4))\n * // { code: 4, size: 32, name: 'ip4', resolvable: false, path: false }\n * ```\n */\nexport function getProtocol (proto: number | string): Protocol {\n  if (typeof proto === 'number') {\n    if (codes[proto] != null) {\n      return codes[proto]\n    }\n\n    throw new Error(`no protocol with code: ${proto}`)\n  } else if (typeof proto === 'string') {\n    if (names[proto] != null) {\n      return names[proto]\n    }\n\n    throw new Error(`no protocol with name: ${proto}`)\n  }\n\n  throw new Error(`invalid protocol id type: ${typeof proto}`)\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3263, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3299, "column": 0}, "map": {"version":3,"file":"convert.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/%40multiformats/multiaddr/src/convert.ts"],"sourcesContent":["import { IpNet } from '@chainsafe/netmask'\nimport { base32 } from 'multiformats/bases/base32'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { bases } from 'multiformats/basics'\nimport { CID } from 'multiformats/cid'\nimport * as Digest from 'multiformats/hashes/digest'\nimport * as varint from 'uint8-varint'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport * as ip from './ip.js'\nimport { getProtocol } from './protocols-table.js'\nimport type { Multiaddr } from './index.js'\n\nconst ip4Protocol = getProtocol('ip4')\nconst ip6Protocol = getProtocol('ip6')\nconst ipcidrProtocol = getProtocol('ipcidr')\n\n/**\n * converts (serializes) addresses\n */\nexport function convert (proto: string, a: string): Uint8Array\nexport function convert (proto: string, a: Uint8Array): string\nexport function convert (proto: string, a: string | Uint8Array): Uint8Array | string {\n  if (a instanceof Uint8Array) {\n    return convertToString(proto, a)\n  } else {\n    return convertToBytes(proto, a)\n  }\n}\n\n/**\n * Convert [code,Uint8Array] to string\n */\n// eslint-disable-next-line complexity\nexport function convertToString (proto: number | string, buf: Uint8Array): string {\n  const protocol = getProtocol(proto)\n  switch (protocol.code) {\n    case 4: // ipv4\n    case 41: // ipv6\n      return bytes2ip(buf)\n    case 42: // ipv6zone\n      return bytes2str(buf)\n    case 43: // ipcidr\n      return uint8ArrayToString(buf, 'base10')\n\n    case 6: // tcp\n    case 273: // udp\n    case 33: // dccp\n    case 132: // sctp\n      return bytes2port(buf).toString()\n\n    case 53: // dns\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n    case 400: // unix\n    case 449: // sni\n    case 777: // memory\n      return bytes2str(buf)\n\n    case 421: // ipfs\n      return bytes2mh(buf)\n    case 444: // onion\n      return bytes2onion(buf)\n    case 445: // onion3\n      return bytes2onion(buf)\n    case 466: // certhash\n      return bytes2mb(buf)\n    case 481: // http-path\n      return globalThis.encodeURIComponent(bytes2str(buf))\n    default:\n      return uint8ArrayToString(buf, 'base16') // no clue. convert to hex\n  }\n}\n\n// eslint-disable-next-line complexity\nexport function convertToBytes (proto: string | number, str: string): Uint8Array {\n  const protocol = getProtocol(proto)\n  switch (protocol.code) {\n    case 4: // ipv4\n      return ip2bytes(str)\n    case 41: // ipv6\n      return ip2bytes(str)\n    case 42: // ipv6zone\n      return str2bytes(str)\n    case 43: // ipcidr\n      return uint8ArrayFromString(str, 'base10')\n\n    case 6: // tcp\n    case 273: // udp\n    case 33: // dccp\n    case 132: // sctp\n      return port2bytes(parseInt(str, 10))\n\n    case 53: // dns\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n    case 400: // unix\n    case 449: // sni\n    case 777: // memory\n      return str2bytes(str)\n\n    case 421: // ipfs\n      return mh2bytes(str)\n    case 444: // onion\n      return onion2bytes(str)\n    case 445: // onion3\n      return onion32bytes(str)\n    case 466: // certhash\n      return mb2bytes(str)\n    case 481: // http-path\n      return str2bytes(globalThis.decodeURIComponent(str))\n    default:\n      return uint8ArrayFromString(str, 'base16') // no clue. convert from hex\n  }\n}\n\nexport function convertToIpNet (multiaddr: Multiaddr): IpNet {\n  let mask: string | undefined\n  let addr: string | undefined\n  multiaddr.stringTuples().forEach(([code, value]) => {\n    if (code === ip4Protocol.code || code === ip6Protocol.code) {\n      addr = value\n    }\n    if (code === ipcidrProtocol.code) {\n      mask = value\n    }\n  })\n  if (mask == null || addr == null) {\n    throw new Error('Invalid multiaddr')\n  }\n  return new IpNet(addr, mask)\n}\n\nconst decoders = Object.values(bases).map((c) => c.decoder)\nconst anybaseDecoder = (function () {\n  let acc = decoders[0].or(decoders[1])\n  decoders.slice(2).forEach((d) => (acc = acc.or(d)))\n  return acc\n})()\n\nfunction ip2bytes (ipString: string): Uint8Array {\n  if (!ip.isIP(ipString)) {\n    throw new Error('invalid ip address')\n  }\n  return ip.toBytes(ipString)\n}\n\nfunction bytes2ip (ipBuff: Uint8Array): string {\n  const ipString = ip.toString(ipBuff, 0, ipBuff.length)\n  if (ipString == null) {\n    throw new Error('ipBuff is required')\n  }\n  if (!ip.isIP(ipString)) {\n    throw new Error('invalid ip address')\n  }\n  return ipString\n}\n\nfunction port2bytes (port: number): Uint8Array {\n  const buf = new ArrayBuffer(2)\n  const view = new DataView(buf)\n  view.setUint16(0, port)\n\n  return new Uint8Array(buf)\n}\n\nfunction bytes2port (buf: Uint8Array): number {\n  const view = new DataView(buf.buffer)\n  return view.getUint16(buf.byteOffset)\n}\n\nfunction str2bytes (str: string): Uint8Array {\n  const buf = uint8ArrayFromString(str)\n  const size = Uint8Array.from(varint.encode(buf.length))\n  return uint8ArrayConcat([size, buf], size.length + buf.length)\n}\n\nfunction bytes2str (buf: Uint8Array): string {\n  const size = varint.decode(buf)\n  buf = buf.slice(varint.encodingLength(size))\n\n  if (buf.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return uint8ArrayToString(buf)\n}\n\nfunction mh2bytes (hash: string): Uint8Array {\n  let mh\n\n  if (hash[0] === 'Q' || hash[0] === '1') {\n    mh = Digest.decode(base58btc.decode(`z${hash}`)).bytes\n  } else {\n    mh = CID.parse(hash).multihash.bytes\n  }\n\n  // the address is a varint prefixed multihash string representation\n  const size = Uint8Array.from(varint.encode(mh.length))\n  return uint8ArrayConcat([size, mh], size.length + mh.length)\n}\n\nfunction mb2bytes (mbstr: string): Uint8Array {\n  const mb = anybaseDecoder.decode(mbstr)\n  const size = Uint8Array.from(varint.encode(mb.length))\n  return uint8ArrayConcat([size, mb], size.length + mb.length)\n}\nfunction bytes2mb (buf: Uint8Array): string {\n  const size = varint.decode(buf)\n  const hash = buf.slice(varint.encodingLength(size))\n\n  if (hash.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return 'u' + uint8ArrayToString(hash, 'base64url')\n}\n\n/**\n * Converts bytes to bas58btc string\n */\nfunction bytes2mh (buf: Uint8Array): string {\n  const size = varint.decode(buf)\n  const address = buf.slice(varint.encodingLength(size))\n\n  if (address.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return uint8ArrayToString(address, 'base58btc')\n}\n\nfunction onion2bytes (str: string): Uint8Array {\n  const addr = str.split(':')\n  if (addr.length !== 2) {\n    throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`)\n  }\n  if (addr[0].length !== 16) {\n    throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion address.`)\n  }\n\n  // onion addresses do not include the multibase prefix, add it before decoding\n  const buf = base32.decode('b' + addr[0])\n\n  // onion port number\n  const port = parseInt(addr[1], 10)\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)')\n  }\n  const portBuf = port2bytes(port)\n  return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length)\n}\n\nfunction onion32bytes (str: string): Uint8Array {\n  const addr = str.split(':')\n  if (addr.length !== 2) {\n    throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`)\n  }\n  if (addr[0].length !== 56) {\n    throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion3 address.`)\n  }\n  // onion addresses do not include the multibase prefix, add it before decoding\n  const buf = base32.decode(`b${addr[0]}`)\n\n  // onion port number\n  const port = parseInt(addr[1], 10)\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)')\n  }\n  const portBuf = port2bytes(port)\n  return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length)\n}\n\nfunction bytes2onion (buf: Uint8Array): string {\n  const addrBytes = buf.slice(0, buf.length - 2)\n  const portBytes = buf.slice(buf.length - 2)\n  const addr = uint8ArrayToString(addrBytes, 'base32')\n  const port = bytes2port(portBytes)\n  return `${addr}:${port}`\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3571, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3577, "column": 0}, "map": {"version":3,"file":"codec.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/%40multiformats/multiaddr/src/codec.ts"],"sourcesContent":["import * as varint from 'uint8-varint'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { convertToBytes, convertToString } from './convert.js'\nimport { getProtocol } from './protocols-table.js'\nimport type { StringTuple, Tuple, Protocol } from './index.js'\n\nexport interface MultiaddrParts {\n  bytes: Uint8Array\n  string: string\n  tuples: Tuple[]\n  stringTuples: StringTuple[]\n  path: string | null\n}\n\nexport function stringToMultiaddrParts (str: string): MultiaddrParts {\n  str = cleanPath(str)\n  const tuples: Tuple[] = []\n  const stringTuples: StringTuple[] = []\n  let path: string | null = null\n\n  const parts = str.split('/').slice(1)\n  if (parts.length === 1 && parts[0] === '') {\n    return {\n      bytes: new Uint8Array(),\n      string: '/',\n      tuples: [],\n      stringTuples: [],\n      path: null\n    }\n  }\n\n  for (let p = 0; p < parts.length; p++) {\n    const part = parts[p]\n    const proto = getProtocol(part)\n\n    if (proto.size === 0) {\n      tuples.push([proto.code])\n      stringTuples.push([proto.code])\n      // eslint-disable-next-line no-continue\n      continue\n    }\n\n    p++ // advance addr part\n    if (p >= parts.length) {\n      throw new ParseError('invalid address: ' + str)\n    }\n\n    // if it's a path proto, take the rest\n    if (proto.path === true) {\n      // should we need to check each path part to see if it's a proto?\n      // This would allow for other protocols to be added after a unix path,\n      // however it would have issues if the path had a protocol name in the path\n      path = cleanPath(parts.slice(p).join('/'))\n      tuples.push([proto.code, convertToBytes(proto.code, path)])\n      stringTuples.push([proto.code, path])\n      break\n    }\n\n    const bytes = convertToBytes(proto.code, parts[p])\n    tuples.push([proto.code, bytes])\n    stringTuples.push([proto.code, convertToString(proto.code, bytes)])\n  }\n\n  return {\n    string: stringTuplesToString(stringTuples),\n    bytes: tuplesToBytes(tuples),\n    tuples,\n    stringTuples,\n    path\n  }\n}\n\nexport function bytesToMultiaddrParts (bytes: Uint8Array): MultiaddrParts {\n  const tuples: Tuple[] = []\n  const stringTuples: StringTuple[] = []\n  let path: string | null = null\n\n  let i = 0\n  while (i < bytes.length) {\n    const code = varint.decode(bytes, i)\n    const n = varint.encodingLength(code)\n\n    const p = getProtocol(code)\n\n    const size = sizeForAddr(p, bytes.slice(i + n))\n\n    if (size === 0) {\n      tuples.push([code])\n      stringTuples.push([code])\n      i += n\n      // eslint-disable-next-line no-continue\n      continue\n    }\n\n    const addr = bytes.slice(i + n, i + n + size)\n\n    i += (size + n)\n\n    if (i > bytes.length) { // did not end _exactly_ at buffer.length\n      throw new ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(bytes, 'base16'))\n    }\n\n    // ok, tuple seems good.\n    tuples.push([code, addr])\n    const stringAddr = convertToString(code, addr)\n    stringTuples.push([code, stringAddr])\n    if (p.path === true) {\n      // should we need to check each path part to see if it's a proto?\n      // This would allow for other protocols to be added after a unix path,\n      // however it would have issues if the path had a protocol name in the path\n      path = stringAddr\n      break\n    }\n  }\n\n  return {\n    bytes: Uint8Array.from(bytes),\n    string: stringTuplesToString(stringTuples),\n    tuples,\n    stringTuples,\n    path\n  }\n}\n\n/**\n * [[str name, str addr]... ] -> string\n */\nfunction stringTuplesToString (tuples: StringTuple[]): string {\n  const parts: string[] = []\n  tuples.map((tup) => {\n    const proto = getProtocol(tup[0])\n    parts.push(proto.name)\n    if (tup.length > 1 && tup[1] != null) {\n      parts.push(tup[1])\n    }\n    return null\n  })\n\n  return cleanPath(parts.join('/'))\n}\n\n/**\n * [[int code, Uint8Array ]... ] -> Uint8Array\n */\nexport function tuplesToBytes (tuples: Tuple[]): Uint8Array {\n  return uint8ArrayConcat(tuples.map((tup) => {\n    const proto = getProtocol(tup[0])\n    let buf = Uint8Array.from(varint.encode(proto.code))\n\n    if (tup.length > 1 && tup[1] != null) {\n      buf = uint8ArrayConcat([buf, tup[1]]) // add address buffer\n    }\n\n    return buf\n  }))\n}\n\n/**\n * For the passed address, return the serialized size\n */\nfunction sizeForAddr (p: Protocol, addr: Uint8Array | number[]): number {\n  if (p.size > 0) {\n    return p.size / 8\n  } else if (p.size === 0) {\n    return 0\n  } else {\n    const size = varint.decode(addr instanceof Uint8Array ? addr : Uint8Array.from(addr))\n    return size + varint.encodingLength(size)\n  }\n}\n\nexport function bytesToTuples (buf: Uint8Array): Tuple[] {\n  const tuples: Array<[number, Uint8Array?]> = []\n  let i = 0\n  while (i < buf.length) {\n    const code = varint.decode(buf, i)\n    const n = varint.encodingLength(code)\n\n    const p = getProtocol(code)\n\n    const size = sizeForAddr(p, buf.slice(i + n))\n\n    if (size === 0) {\n      tuples.push([code])\n      i += n\n      // eslint-disable-next-line no-continue\n      continue\n    }\n\n    const addr = buf.slice(i + n, i + n + size)\n\n    i += (size + n)\n\n    if (i > buf.length) { // did not end _exactly_ at buffer.length\n      throw new ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(buf, 'base16'))\n    }\n\n    // ok, tuple seems good.\n    tuples.push([code, addr])\n  }\n\n  return tuples\n}\n\nexport function cleanPath (str: string): string {\n  return '/' + str.trim().split('/').filter((a) => a).join('/')\n}\n\nexport class ParseError extends Error {\n  static name = 'ParseError'\n  name = 'ParseError'\n\n  constructor (str: string) {\n    super(`Error parsing address: ${str}`)\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3788, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3794, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/%40multiformats/multiaddr/src/index.ts"],"sourcesContent":["/**\n * @packageDocumentation\n *\n * A standard way to represent addresses that\n *\n * - support any standard network protocol\n * - are self-describing\n * - have a binary packed format\n * - have a nice string representation\n * - encapsulate well\n *\n * @example\n *\n * ```TypeScript\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const addr = multiaddr('/ip4/127.0.0.1/udp/1234')\n * // Multiaddr(/ip4/127.0.0.1/udp/1234)\n *\n * addr.bytes\n * // <Uint8Array 04 7f 00 00 01 11 04 d2>\n *\n * addr.toString()\n * // '/ip4/127.0.0.1/udp/1234'\n *\n * addr.protos()\n * // [\n * //   {code: 4, name: 'ip4', size: 32},\n * //   {code: 273, name: 'udp', size: 16}\n * // ]\n *\n * // gives you an object that is friendly with what Node.js core modules expect for addresses\n * addr.nodeAddress()\n * // {\n * //   family: 4,\n * //   port: 1234,\n * //   address: \"127.0.0.1\"\n * // }\n *\n * addr.encapsulate('/sctp/5678')\n * // Multiaddr(/ip4/127.0.0.1/udp/1234/sctp/5678)\n * ```\n *\n * ## Resolving DNSADDR addresses\n *\n * [DNSADDR](https://github.com/multiformats/multiaddr/blob/master/protocols/DNSADDR.md) is a spec that allows storing a TXT DNS record that contains a Multiaddr.\n *\n * To resolve DNSADDR addresses, call the `.resolve()` function the multiaddr, optionally passing a `DNS` resolver.\n *\n * DNSADDR addresses can resolve to multiple multiaddrs, since there is no limit to the number of TXT records that can be stored.\n *\n * @example Resolving DNSADDR Multiaddrs\n *\n * ```TypeScript\n * import { multiaddr, resolvers } from '@multiformats/multiaddr'\n * import { dnsaddrResolver } from '@multiformats/multiaddr/resolvers'\n *\n * resolvers.set('dnsaddr', dnsaddrResolver)\n *\n * const ma = multiaddr('/dnsaddr/bootstrap.libp2p.io')\n *\n * // resolve with a 5s timeout\n * const resolved = await ma.resolve({\n *   signal: AbortSignal.timeout(5000)\n * })\n *\n * console.info(resolved)\n * // [Multiaddr('/ip4/147.75...'), Multiaddr('/ip4/147.75...'), Multiaddr('/ip4/147.75...')...]\n * ```\n *\n * @example Using a custom DNS resolver to resolve DNSADDR Multiaddrs\n *\n * See the docs for [@multiformats/dns](https://www.npmjs.com/package/@multiformats/dns) for a full breakdown of how to specify multiple resolvers or resolvers that can be used for specific TLDs.\n *\n * ```TypeScript\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { dns } from '@multiformats/dns'\n * import { dnsJsonOverHttps } from '@multiformats/dns/resolvers'\n *\n * const resolver = dns({\n *   resolvers: {\n *     '.': dnsJsonOverHttps('https://cloudflare-dns.com/dns-query')\n *   }\n * })\n *\n * const ma = multiaddr('/dnsaddr/bootstrap.libp2p.io')\n * const resolved = await ma.resolve({\n *  dns: resolver\n * })\n *\n * console.info(resolved)\n * // [Multiaddr('/ip4/147.75...'), Multiaddr('/ip4/147.75...'), Multiaddr('/ip4/147.75...')...]\n * ```\n */\n\nimport { Multiaddr as MultiaddrClass, symbol } from './multiaddr.js'\nimport { getProtocol } from './protocols-table.js'\nimport type { Resolver } from './resolvers/index.js'\nimport type { DNS } from '@multiformats/dns'\n\n/**\n * Protocols are present in the protocol table\n */\nexport interface Protocol {\n  code: number\n  size: number\n  name: string\n  resolvable?: boolean | undefined\n  path?: boolean | undefined\n}\n\n/**\n * A plain JavaScript object representation of a {@link Multiaddr}\n */\nexport interface MultiaddrObject {\n  family: 4 | 6\n  host: string\n  transport: 'tcp' | 'udp'\n  port: number\n}\n\n/**\n * A NodeAddress is an IPv4/IPv6 address/TCP port combination\n */\nexport interface NodeAddress {\n  family: 4 | 6\n  address: string\n  port: number\n}\n\n/**\n * These types can be parsed into a {@link Multiaddr} object\n */\nexport type MultiaddrInput = string | Multiaddr | Uint8Array | null\n\n/**\n * A code/value pair\n */\nexport type Tuple = [number, Uint8Array?]\n\n/**\n * A code/value pair with the value as a string\n */\nexport type StringTuple = [number, string?]\n\n/**\n * Allows aborting long-lived operations\n */\nexport interface AbortOptions {\n  signal?: AbortSignal\n}\n\n/**\n * All configured {@link Resolver}s\n */\nexport const resolvers = new Map<string, Resolver>()\n\nexport type { Resolver }\n\nexport { MultiaddrFilter } from './filter/multiaddr-filter.js'\n\nexport interface ResolveOptions extends AbortOptions {\n  /**\n   * An optional DNS resolver\n   */\n  dns?: DNS\n\n  /**\n   * When resolving DNSADDR Multiaddrs that resolve to other DNSADDR Multiaddrs,\n   * limit how many times we will recursively resolve them.\n   *\n   * @default 32\n   */\n  maxRecursiveDepth?: number\n}\n\nexport interface Multiaddr {\n  bytes: Uint8Array\n\n  /**\n   * Returns Multiaddr as a String\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').toString()\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toString(): string\n\n  /**\n   * Returns Multiaddr as a JSON encoded object\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * JSON.stringify(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toJSON(): string\n\n  /**\n   * Returns Multiaddr as a convinient options object to be used with net.createConnection\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()\n   * // { family: 4, host: '127.0.0.1', transport: 'tcp', port: 4001 }\n   * ```\n   */\n  toOptions(): MultiaddrObject\n\n  /**\n   * Returns the protocols the Multiaddr is defined with, as an array of objects, in\n   * left-to-right order. Each object contains the protocol code, protocol name,\n   * and the size of its address space in bits.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').protos()\n   * // [ { code: 4, size: 32, name: 'ip4' },\n   * //   { code: 6, size: 16, name: 'tcp' } ]\n   * ```\n   */\n  protos(): Protocol[]\n\n  /**\n   * Returns the codes of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()\n   * // [ 4, 6 ]\n   * ```\n   */\n  protoCodes(): number[]\n\n  /**\n   * Returns the names of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()\n   * // [ 'ip4', 'tcp' ]\n   * ```\n   */\n  protoNames(): string[]\n\n  /**\n   * Returns a tuple of parts\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').tuples()\n   * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]\n   * ```\n   */\n  tuples(): Tuple[]\n\n  /**\n   * Returns a tuple of string/number parts\n   * - tuples[][0] = code of protocol\n   * - tuples[][1] = contents of address\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').stringTuples()\n   * // [ [ 4, '127.0.0.1' ], [ 6, '4001' ] ]\n   * ```\n   */\n  stringTuples(): StringTuple[]\n\n  /**\n   * Encapsulates a Multiaddr in another Multiaddr\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080)\n   *\n   * const mh2 = multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001)\n   *\n   * mh3.toString()\n   * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'\n   * ```\n   *\n   * @param {MultiaddrInput} addr - Multiaddr to add into this Multiaddr\n   */\n  encapsulate(addr: MultiaddrInput): Multiaddr\n\n  /**\n   * Decapsulates a Multiaddr from another Multiaddr\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080)\n   *\n   * const mh2 = multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001)\n   *\n   * mh3.decapsulate(mh2).toString()\n   * // '/ip4/8.8.8.8/tcp/1080'\n   * ```\n   *\n   * @param {Multiaddr | string} addr - Multiaddr to remove from this Multiaddr\n   */\n  decapsulate(addr: Multiaddr | string): Multiaddr\n\n  /**\n   * A more reliable version of `decapsulate` if you are targeting a\n   * specific code, such as 421 (the `p2p` protocol code). The last index of the code\n   * will be removed from the `Multiaddr`, and a new instance will be returned.\n   * If the code is not present, the original `Multiaddr` is returned.\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const addr = multiaddr('/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC')\n   * // Multiaddr(/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC)\n   *\n   * addr.decapsulateCode(421).toString()\n   * // '/ip4/0.0.0.0/tcp/8080'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/8080').decapsulateCode(421).toString()\n   * // '/ip4/127.0.0.1/tcp/8080'\n   * ```\n   */\n  decapsulateCode(code: number): Multiaddr\n\n  /**\n   * Extract the peerId if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string)\n   *\n   * // should return QmValidBase58string or null if the id is missing or invalid\n   * const peerId = mh1.getPeerId()\n   * ```\n   */\n  getPeerId(): string | null\n\n  /**\n   * Extract the path if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock)\n   *\n   * // should return utf8 string or null if the id is missing or invalid\n   * const path = mh1.getPath()\n   * ```\n   */\n  getPath(): string | null\n\n  /**\n   * Checks if two Multiaddrs are the same\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080)\n   *\n   * const mh2 = multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n   *\n   * mh1.equals(mh1)\n   * // true\n   *\n   * mh1.equals(mh2)\n   * // false\n   * ```\n   */\n  equals(addr: { bytes: Uint8Array }): boolean\n\n  /**\n   * Resolve multiaddr if containing resolvable hostname.\n   *\n   * @example\n   * ```js\n   * import { multiaddr, resolvers } from '@multiformats/multiaddr'\n   *\n   * resolvers.set('dnsaddr', resolverFunction)\n   * const mh1 = multiaddr('/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb')\n   * const resolvedMultiaddrs = await mh1.resolve()\n   * // [\n   * //   Multiaddr(/ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb),\n   * //   Multiaddr(/ip4/147.75.83.83/tcp/443/wss/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb),\n   * //   Multiaddr(/ip4/147.75.83.83/udp/4001/quic/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb)\n   * // ]\n   * ```\n   */\n  resolve(options?: ResolveOptions): Promise<Multiaddr[]>\n\n  /**\n   * Gets a Multiaddrs node-friendly address object. Note that protocol information\n   * is left out: in Node (and most network systems) the protocol is unknowable\n   * given only the address.\n   *\n   * Has to be a ThinWaist Address, otherwise throws error\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()\n   * // {family: 4, address: '127.0.0.1', port: 4001}\n   * ```\n   */\n  nodeAddress(): NodeAddress\n\n  /**\n   * Returns if a Multiaddr is a Thin Waist address or not.\n   *\n   * Thin Waist is if a Multiaddr adheres to the standard combination of:\n   *\n   * `{IPv4, IPv6}/{TCP, UDP}`\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n   * const mh2 = multiaddr('/ip4/192.168.2.1/tcp/5001')\n   * // Multiaddr(/ip4/192.168.2.1/tcp/5001)\n   * const mh3 = mh1.encapsulate(mh2)\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001)\n   * const mh4 = multiaddr('/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a)\n   * mh1.isThinWaistAddress()\n   * // true\n   * mh2.isThinWaistAddress()\n   * // true\n   * mh3.isThinWaistAddress()\n   * // false\n   * mh4.isThinWaistAddress()\n   * // false\n   * ```\n   */\n  isThinWaistAddress(addr?: Multiaddr): boolean\n}\n\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @example\n * ```js\n * import { fromNodeAddress } from '@multiformats/multiaddr'\n *\n * fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n */\nexport function fromNodeAddress (addr: NodeAddress, transport: string): Multiaddr {\n  if (addr == null) {\n    throw new Error('requires node address object')\n  }\n  if (transport == null) {\n    throw new Error('requires transport protocol')\n  }\n  let ip: string | undefined\n  let host = addr.address\n  switch (addr.family) {\n    case 4:\n      ip = 'ip4'\n      break\n    case 6:\n      ip = 'ip6'\n\n      if (host.includes('%')) {\n        const parts = host.split('%')\n\n        if (parts.length !== 2) {\n          throw Error('Multiple ip6 zones in multiaddr')\n        }\n\n        host = parts[0]\n        const zone = parts[1]\n        ip = `/ip6zone/${zone}/ip6`\n      }\n      break\n    default:\n      throw Error('Invalid addr family, should be 4 or 6.')\n  }\n  return new MultiaddrClass('/' + [ip, host, transport, addr.port].join('/'))\n}\n\n/**\n * Returns if something is a {@link Multiaddr} that is a resolvable name\n *\n * @example\n *\n * ```js\n * import { isName, multiaddr } from '@multiformats/multiaddr'\n *\n * isName(multiaddr('/ip4/127.0.0.1'))\n * // false\n * isName(multiaddr('/dns/ipfs.io'))\n * // true\n * ```\n */\nexport function isName (addr: Multiaddr): boolean {\n  if (!isMultiaddr(addr)) {\n    return false\n  }\n\n  // if a part of the multiaddr is resolvable, then return true\n  return addr.protos().some((proto) => proto.resolvable)\n}\n\n/**\n * Check if object is a {@link Multiaddr} instance\n *\n * @example\n *\n * ```js\n * import { isMultiaddr, multiaddr } from '@multiformats/multiaddr'\n *\n * isMultiaddr(5)\n * // false\n * isMultiaddr(multiaddr('/ip4/127.0.0.1'))\n * // true\n * ```\n */\nexport function isMultiaddr (value: any): value is Multiaddr {\n  return Boolean(value?.[symbol])\n}\n\n/**\n * A function that takes a {@link MultiaddrInput} and returns a {@link Multiaddr}\n *\n * @example\n * ```js\n * import { multiaddr } from '@libp2p/multiaddr'\n *\n * multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n *\n * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n */\nexport function multiaddr (addr?: MultiaddrInput): Multiaddr {\n  return new MultiaddrClass(addr)\n}\n\nexport { getProtocol as protocols }\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6FG;;;;;;;AAEH,OAAO,EAAE,SAAS,IAAI,cAAc,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAA;;;AA4D7D,MAAM,SAAS,GAAG,IAAI,GAAG,EAAoB,CAAA;;AAmV9C,SAAU,eAAe,CAAE,IAAiB,EAAE,SAAiB;IACnE,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;QACjB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAA;IACjD,CAAC;IACD,IAAI,SAAS,IAAI,IAAI,EAAE,CAAC;QACtB,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAA;IAChD,CAAC;IACD,IAAI,EAAsB,CAAA;IAC1B,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAA;IACvB,OAAQ,IAAI,CAAC,MAAM,EAAE,CAAC;QACpB,KAAK,CAAC;YACJ,EAAE,GAAG,KAAK,CAAA;YACV,MAAK;QACP,KAAK,CAAC;YACJ,EAAE,GAAG,KAAK,CAAA;YAEV,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;gBACvB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;gBAE7B,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;oBACvB,MAAM,KAAK,CAAC,iCAAiC,CAAC,CAAA;gBAChD,CAAC;gBAED,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;gBACf,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;gBACrB,EAAE,GAAG,CAAA,SAAA,EAAY,IAAI,CAAA,IAAA,CAAM,CAAA;YAC7B,CAAC;YACD,MAAK;QACP;YACE,MAAM,KAAK,CAAC,wCAAwC,CAAC,CAAA;IACzD,CAAC;IACD,OAAO,8KAAI,YAAc,CAAC,GAAG,GAAG;QAAC,EAAE;QAAE,IAAI;QAAE,SAAS;QAAE,IAAI,CAAC,IAAI;KAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;AAC7E,CAAC;AAgBK,SAAU,MAAM,CAAE,IAAe;IACrC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC;QACvB,OAAO,KAAK,CAAA;IACd,CAAC;IAED,6DAA6D;IAC7D,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAG,CAAD,IAAM,CAAC,UAAU,CAAC,CAAA;AACxD,CAAC;AAgBK,SAAU,WAAW,CAAE,KAAU;IACrC,OAAO,OAAO,CAAC,KAAK,EAAE,2KAAC,SAAM,CAAC,CAAC,CAAA;AACjC,CAAC;AAeK,SAAU,SAAS,CAAE,IAAqB;IAC9C,OAAO,8KAAI,YAAc,CAAC,IAAI,CAAC,CAAA;AACjC,CAAC","ignoreList":[0]}},
    {"offset": {"line": 3949, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3955, "column": 0}, "map": {"version":3,"file":"multiaddr.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/%40multiformats/multiaddr/src/multiaddr.ts"],"sourcesContent":["/* eslint-disable complexity */\nimport { base58btc } from 'multiformats/bases/base58'\nimport { CID } from 'multiformats/cid'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { bytesToMultiaddrParts, stringToMultiaddrParts, type MultiaddrParts, tuplesToBytes } from './codec.js'\nimport { getProtocol, names } from './protocols-table.js'\nimport { isMultiaddr, multiaddr, resolvers } from './index.js'\nimport type { MultiaddrInput, Multiaddr as MultiaddrInterface, MultiaddrObject, Protocol, StringTuple, Tuple, NodeAddress, ResolveOptions } from './index.js'\n\nconst inspect = Symbol.for('nodejs.util.inspect.custom')\nexport const symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr')\n\nconst DNS_CODES = [\n  getProtocol('dns').code,\n  getProtocol('dns4').code,\n  getProtocol('dns6').code,\n  getProtocol('dnsaddr').code\n]\n\nclass NoAvailableResolverError extends Error {\n  constructor (message = 'No available resolver') {\n    super(message)\n    this.name = 'NoAvailableResolverError'\n  }\n}\n\n/**\n * Creates a {@link Multiaddr} from a {@link MultiaddrInput}\n */\nexport class Multiaddr implements MultiaddrInterface {\n  public bytes: Uint8Array\n  readonly #string: string\n  readonly #tuples: Tuple[]\n  readonly #stringTuples: StringTuple[]\n  readonly #path: string | null\n\n  [symbol]: boolean = true\n\n  constructor (addr?: MultiaddrInput) {\n    // default\n    if (addr == null) {\n      addr = ''\n    }\n\n    let parts: MultiaddrParts\n    if (addr instanceof Uint8Array) {\n      parts = bytesToMultiaddrParts(addr)\n    } else if (typeof addr === 'string') {\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\n        throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`)\n      }\n      parts = stringToMultiaddrParts(addr)\n    } else if (isMultiaddr(addr)) { // Multiaddr\n      parts = bytesToMultiaddrParts(addr.bytes)\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr')\n    }\n\n    this.bytes = parts.bytes\n    this.#string = parts.string\n    this.#tuples = parts.tuples\n    this.#stringTuples = parts.stringTuples\n    this.#path = parts.path\n  }\n\n  toString (): string {\n    return this.#string\n  }\n\n  toJSON (): string {\n    return this.toString()\n  }\n\n  toOptions (): MultiaddrObject {\n    let family: 4 | 6 | undefined\n    let transport: 'tcp' | 'udp' | undefined\n    let host: string | undefined\n    let port: number | undefined\n    let zone = ''\n\n    const tcp = getProtocol('tcp')\n    const udp = getProtocol('udp')\n    const ip4 = getProtocol('ip4')\n    const ip6 = getProtocol('ip6')\n    const dns6 = getProtocol('dns6')\n    const ip6zone = getProtocol('ip6zone')\n\n    for (const [code, value] of this.stringTuples()) {\n      if (code === ip6zone.code) {\n        zone = `%${value ?? ''}`\n      }\n\n      // default to https when protocol & port are omitted from DNS addrs\n      if (DNS_CODES.includes(code)) {\n        transport = tcp.name === 'tcp' ? 'tcp' : 'udp'\n        port = 443\n        host = `${value ?? ''}${zone}`\n        family = code === dns6.code ? 6 : 4\n      }\n\n      if (code === tcp.code || code === udp.code) {\n        transport = getProtocol(code).name === 'tcp' ? 'tcp' : 'udp'\n        port = parseInt(value ?? '')\n      }\n\n      if (code === ip4.code || code === ip6.code) {\n        transport = getProtocol(code).name === 'tcp' ? 'tcp' : 'udp'\n        host = `${value ?? ''}${zone}`\n        family = code === ip6.code ? 6 : 4\n      }\n    }\n\n    if (family == null || transport == null || host == null || port == null) {\n      throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".')\n    }\n\n    const opts: MultiaddrObject = {\n      family,\n      host,\n      transport,\n      port\n    }\n\n    return opts\n  }\n\n  protos (): Protocol[] {\n    return this.#tuples.map(([code]) => Object.assign({}, getProtocol(code)))\n  }\n\n  protoCodes (): number[] {\n    return this.#tuples.map(([code]) => code)\n  }\n\n  protoNames (): string[] {\n    return this.#tuples.map(([code]) => getProtocol(code).name)\n  }\n\n  tuples (): Array<[number, Uint8Array?]> {\n    return this.#tuples.map(([code, value]) => {\n      if (value == null) {\n        return [code]\n      }\n\n      return [code, value]\n    })\n  }\n\n  stringTuples (): Array<[number, string?]> {\n    return this.#stringTuples.map(([code, value]) => {\n      if (value == null) {\n        return [code]\n      }\n\n      return [code, value]\n    })\n  }\n\n  encapsulate (addr: MultiaddrInput): Multiaddr {\n    addr = new Multiaddr(addr)\n    return new Multiaddr(this.toString() + addr.toString())\n  }\n\n  decapsulate (addr: Multiaddr | string): Multiaddr {\n    const addrString = addr.toString()\n    const s = this.toString()\n    const i = s.lastIndexOf(addrString)\n    if (i < 0) {\n      throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`)\n    }\n    return new Multiaddr(s.slice(0, i))\n  }\n\n  decapsulateCode (code: number): Multiaddr {\n    const tuples = this.tuples()\n    for (let i = tuples.length - 1; i >= 0; i--) {\n      if (tuples[i][0] === code) {\n        return new Multiaddr(tuplesToBytes(tuples.slice(0, i)))\n      }\n    }\n    return this\n  }\n\n  getPeerId (): string | null {\n    try {\n      let tuples: Array<[number, string | undefined]> = []\n\n      this.stringTuples().forEach(([code, name]) => {\n        if (code === names.p2p.code) {\n          tuples.push([code, name])\n        }\n\n        // if this is a p2p-circuit address, return the target peer id if present\n        // not the peer id of the relay\n        if (code === names['p2p-circuit'].code) {\n          tuples = []\n        }\n      })\n\n      // Get the last ipfs tuple ['p2p', 'peerid string']\n      const tuple = tuples.pop()\n      if (tuple?.[1] != null) {\n        const peerIdStr = tuple[1]\n\n        // peer id is base58btc encoded string but not multibase encoded so add the `z`\n        // prefix so we can validate that it is correctly encoded\n        if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n          return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc')\n        }\n\n        // try to parse peer id as CID\n        return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc')\n      }\n\n      return null\n    } catch (e) {\n      return null\n    }\n  }\n\n  getPath (): string | null {\n    return this.#path\n  }\n\n  equals (addr: { bytes: Uint8Array }): boolean {\n    return uint8ArrayEquals(this.bytes, addr.bytes)\n  }\n\n  async resolve (options?: ResolveOptions): Promise<MultiaddrInterface[]> {\n    const resolvableProto = this.protos().find((p) => p.resolvable)\n\n    // Multiaddr is not resolvable?\n    if (resolvableProto == null) {\n      return [this]\n    }\n\n    const resolver = resolvers.get(resolvableProto.name)\n    if (resolver == null) {\n      throw new NoAvailableResolverError(`no available resolver for ${resolvableProto.name}`)\n    }\n\n    const result = await resolver(this, options)\n\n    return result.map(str => multiaddr(str))\n  }\n\n  nodeAddress (): NodeAddress {\n    const options = this.toOptions()\n\n    if (options.transport !== 'tcp' && options.transport !== 'udp') {\n      throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`)\n    }\n\n    return {\n      family: options.family,\n      address: options.host,\n      port: options.port\n    }\n  }\n\n  isThinWaistAddress (addr?: Multiaddr): boolean {\n    const protos = (addr ?? this).protos()\n\n    if (protos.length !== 2) {\n      return false\n    }\n\n    if (protos[0].code !== 4 && protos[0].code !== 41) {\n      return false\n    }\n    if (protos[1].code !== 6 && protos[1].code !== 273) {\n      return false\n    }\n    return true\n  }\n\n  /**\n   * Returns Multiaddr as a human-readable string\n   * https://nodejs.org/api/util.html#utilinspectcustom\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * console.info(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // 'Multiaddr(/ip4/127.0.0.1/tcp/4001)'\n   * ```\n   */\n  [inspect] (): string {\n    return `Multiaddr(${this.#string})`\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 4220, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4226, "column": 0}, "map": {"version":3,"file":"multiaddr-filter.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/%40multiformats/multiaddr/src/filter/multiaddr-filter.ts"],"sourcesContent":["import { convertToIpNet } from '../convert.js'\nimport { multiaddr, type Multiaddr, type MultiaddrInput } from '../index.js'\nimport type { IpNet } from '@chainsafe/netmask'\n\n/**\n * A utility class to determine if a Multiaddr contains another\n * multiaddr.\n *\n * This can be used with ipcidr ranges to determine if a given\n * multiaddr is in a ipcidr range.\n *\n * @example\n *\n * ```js\n * import { multiaddr, MultiaddrFilter } from '@multiformats/multiaddr'\n *\n * const range = multiaddr('/ip4/192.168.10.10/ipcidr/24')\n * const filter = new MultiaddrFilter(range)\n *\n * const input = multiaddr('/ip4/192.168.10.2/udp/60')\n * console.info(filter.contains(input)) // true\n * ```\n */\nexport class MultiaddrFilter {\n  private readonly multiaddr: Multiaddr\n  private readonly netmask: IpNet\n\n  public constructor (input: MultiaddrInput) {\n    this.multiaddr = multiaddr(input)\n    this.netmask = convertToIpNet(this.multiaddr)\n  }\n\n  public contains (input: MultiaddrInput): boolean {\n    if (input == null) return false\n    const m = multiaddr(input)\n    let ip\n    for (const [code, value] of m.stringTuples()) {\n      if (code === 4 || code === 41) {\n        ip = value\n        break\n      }\n    }\n    if (ip === undefined) return false\n    return this.netmask.contains(ip)\n  }\n}\n"],"names":[],"mappings":";;;AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAA;AAC9C,OAAO,EAAE,SAAS,EAAuC,MAAM,aAAa,CAAA;;;;AAsBtE,MAAO,eAAe;IACT,SAAS,CAAW;IACpB,OAAO,CAAO;IAE/B,YAAoB,KAAqB,CAAA;QACvC,IAAI,CAAC,SAAS,6LAAG,YAAA,AAAS,EAAC,KAAK,CAAC,CAAA;QACjC,IAAI,CAAC,OAAO,+KAAG,iBAAA,AAAc,EAAC,IAAI,CAAC,SAAS,CAAC,CAAA;IAC/C,CAAC;IAEM,QAAQ,CAAE,KAAqB,EAAA;QACpC,IAAI,KAAK,IAAI,IAAI,EAAE,OAAO,KAAK,CAAA;QAC/B,MAAM,CAAC,IAAG,qMAAA,AAAS,EAAC,KAAK,CAAC,CAAA;QAC1B,IAAI,EAAE,CAAA;QACN,KAAK,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,YAAY,EAAE,CAAE,CAAC;YAC7C,IAAI,IAAI,KAAK,CAAC,IAAI,IAAI,KAAK,EAAE,EAAE,CAAC;gBAC9B,EAAE,GAAG,KAAK,CAAA;gBACV,MAAK;YACP,CAAC;QACH,CAAC;QACD,IAAI,EAAE,KAAK,SAAS,EAAE,OAAO,KAAK,CAAA;QAClC,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAA;IAClC,CAAC;CACF","ignoreList":[0]}},
    {"offset": {"line": 4255, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4272, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/%40multiformats/mafmt/src/index.ts"],"sourcesContent":["import { multiaddr } from '@multiformats/multiaddr'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nexport interface MatchesFunction { (a: string | Uint8Array | Multiaddr): boolean }\nexport interface PartialMatchesFunction { (protos: string[]): boolean | string[] | null }\n\nexport interface Mafmt {\n  toString: () => string\n  input?: Array<(Mafmt | (() => Mafmt))>\n  matches: MatchesFunction\n  partialMatch: PartialMatchesFunction\n}\n\n/*\n * Valid combinations\n */\nexport const DNS4 = base('dns4')\nexport const DNS6 = base('dns6')\nexport const DNSADDR = base('dnsaddr')\nexport const DNS = or(\n  base('dns'),\n  DNSADDR,\n  DNS4,\n  DNS6\n)\n\nexport const IP = or(base('ip4'), base('ip6'))\nexport const TCP = or(\n  and(IP, base('tcp')),\n  and(DNS, base('tcp'))\n)\nexport const UDP = and(IP, base('udp'))\nexport const UTP = and(UDP, base('utp'))\n\nexport const QUIC = and(UDP, base('quic'))\nexport const QUICV1 = and(UDP, base('quic-v1'))\n\nconst _WebSockets = or(\n  and(TCP, base('ws')),\n  and(DNS, base('ws'))\n)\n\nexport const WebSockets = or(\n  and(_WebSockets, base('p2p')),\n  _WebSockets\n)\n\nconst _WebSocketsSecure = or(\n  and(TCP, base('wss')),\n  and(DNS, base('wss')),\n  and(TCP, base('tls'), base('ws')),\n  and(DNS, base('tls'), base('ws'))\n)\n\nexport const WebSocketsSecure = or(\n  and(_WebSocketsSecure, base('p2p')),\n  _WebSocketsSecure\n)\n\nexport const HTTP = or(\n  and(TCP, base('http')),\n  and(IP, base('http')),\n  and(DNS, base('http'))\n)\n\nexport const HTTPS = or(\n  and(TCP, base('https')),\n  and(IP, base('https')),\n  and(DNS, base('https'))\n)\n\nconst _WebRTCDirect = and(UDP, base('webrtc-direct'), base('certhash'))\nexport const WebRTCDirect = or(\n  and(_WebRTCDirect, base('p2p')),\n  _WebRTCDirect\n)\n\nconst _WebTransport = and(QUICV1, base('webtransport'), base('certhash'), base('certhash'))\nexport const WebTransport = or(\n  and(_WebTransport, base('p2p')),\n  _WebTransport\n)\n\n/**\n * @deprecated\n */\nexport const P2PWebRTCStar = or(\n  and(WebSockets, base('p2p-webrtc-star'), base('p2p')),\n  and(WebSocketsSecure, base('p2p-webrtc-star'), base('p2p')),\n  and(WebSockets, base('p2p-webrtc-star')),\n  and(WebSocketsSecure, base('p2p-webrtc-star'))\n)\n\nexport const WebSocketStar = or(\n  and(WebSockets, base('p2p-websocket-star'), base('p2p')),\n  and(WebSocketsSecure, base('p2p-websocket-star'), base('p2p')),\n  and(WebSockets, base('p2p-websocket-star')),\n  and(WebSocketsSecure, base('p2p-websocket-star'))\n)\n\n/**\n * @deprecated\n */\nexport const P2PWebRTCDirect = or(\n  and(HTTP, base('p2p-webrtc-direct'), base('p2p')),\n  and(HTTPS, base('p2p-webrtc-direct'), base('p2p')),\n  and(HTTP, base('p2p-webrtc-direct')),\n  and(HTTPS, base('p2p-webrtc-direct'))\n)\n\nexport const Reliable = or(\n  _WebSockets,\n  _WebSocketsSecure,\n  HTTP,\n  HTTPS,\n  P2PWebRTCStar,\n  P2PWebRTCDirect,\n  TCP,\n  UTP,\n  QUIC,\n  DNS,\n  WebRTCDirect,\n  WebTransport\n)\n\n// Unlike ws-star, stardust can run over any transport thus removing the requirement for websockets (but don't even think about running a stardust server over webrtc-star ;) )\nexport const Stardust = or(\n  and(Reliable, base('p2p-stardust'), base('p2p')),\n  and(Reliable, base('p2p-stardust'))\n)\n\nconst _P2P = or(\n  and(Reliable, base('p2p')),\n  P2PWebRTCStar,\n  P2PWebRTCDirect,\n  WebRTCDirect,\n  WebTransport,\n  base('p2p')\n)\n\nconst _Circuit = or(\n  and(_P2P, base('p2p-circuit'), _P2P),\n  and(_P2P, base('p2p-circuit')),\n  and(base('p2p-circuit'), _P2P),\n  and(Reliable, base('p2p-circuit')),\n  and(base('p2p-circuit'), Reliable),\n  base('p2p-circuit')\n)\n\nconst CircuitRecursive = (): Mafmt => or(\n  and(_Circuit, CircuitRecursive),\n  _Circuit\n)\n\nexport const Circuit = CircuitRecursive()\n\nexport const P2P = or(\n  and(Circuit, _P2P, Circuit),\n  and(_P2P, Circuit),\n  and(Circuit, _P2P),\n  Circuit,\n  _P2P\n)\n\nexport const IPFS = P2P\n\nexport const WebRTC = or(\n  and(Circuit, base('webrtc'), base('p2p')),\n  and(Circuit, base('webrtc')),\n  and(Reliable, base('webrtc'), base('p2p')),\n  and(Reliable, base('webrtc')),\n  base('webrtc')\n)\n\n/*\n * Validation funcs\n */\n\nfunction makeMatchesFunction (partialMatch: PartialMatchesFunction): (a: string | Uint8Array | Multiaddr) => boolean {\n  function matches (a: string | Uint8Array | Multiaddr): boolean {\n    let ma\n\n    try {\n      ma = multiaddr(a)\n    } catch (err: any) { // catch error\n      return false // also if it's invalid it's probably not matching as well so return false\n    }\n\n    const out = partialMatch(ma.protoNames())\n    if (out === null) {\n      return false\n    }\n\n    if (out === true || out === false) {\n      return out\n    }\n\n    return out.length === 0\n  }\n\n  return matches\n}\n\nfunction and (...args: Array<Mafmt | (() => Mafmt)>): Mafmt {\n  function partialMatch (a: string[]): boolean | string[] | null {\n    if (a.length < args.length) {\n      return null\n    }\n\n    let out: boolean | string[] | null = a\n\n    args.some((arg) => {\n      out = typeof arg === 'function'\n        ? arg().partialMatch(a)\n        : arg.partialMatch(a)\n\n      if (Array.isArray(out)) {\n        a = out\n      }\n\n      if (out === null) {\n        return true\n      }\n\n      return false\n    })\n\n    return out\n  }\n\n  return {\n    toString: function () { return '{ ' + args.join(' ') + ' }' },\n    input: args,\n    matches: makeMatchesFunction(partialMatch),\n    partialMatch\n  }\n}\n\nfunction or (...args: Array<Mafmt | (() => Mafmt)>): Mafmt {\n  function partialMatch (a: string[]): boolean | string[] | null {\n    let out = null\n    args.some((arg) => {\n      const res = typeof arg === 'function'\n        ? arg().partialMatch(a)\n        : arg.partialMatch(a)\n      if (res != null) {\n        out = res\n        return true\n      }\n      return false\n    })\n\n    return out\n  }\n\n  const result = {\n    toString: function () { return '{ ' + args.join(' ') + ' }' },\n    input: args,\n    matches: makeMatchesFunction(partialMatch),\n    partialMatch\n  }\n\n  return result\n}\n\nfunction base (n: string): Mafmt {\n  const name = n\n\n  function matches (a: string | Uint8Array | Multiaddr): boolean {\n    let ma: Multiaddr\n\n    try {\n      ma = multiaddr(a)\n    } catch (err: any) { // catch error\n      return false // also if it's invalid it's probably not matching as well so return false\n    }\n\n    const pnames = ma.protoNames()\n    if (pnames.length === 1 && pnames[0] === name) {\n      return true\n    }\n    return false\n  }\n\n  function partialMatch (protos: string[]): boolean | string[] | null {\n    if (protos.length === 0) {\n      return null\n    }\n\n    if (protos[0] === name) {\n      return protos.slice(1)\n    }\n    return null\n  }\n\n  return {\n    toString: function () { return name },\n    matches,\n    partialMatch\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 4437, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4442, "column": 0}, "map": {"version":3,"sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/iso-url/src/url.js"],"sourcesContent":["'use strict'\n\nconst { URL, URLSearchParams, format } = require('url')\n\n// https://github.com/nodejs/node/issues/12682\nconst defaultBase = 'http://localhost'\n\nclass URLWithLegacySupport extends URL {\n  constructor (url = '', base = defaultBase) {\n    super(url, base)\n    this.path = this.pathname + this.search\n    this.auth =\n            this.username && this.password\n              ? this.username + ':' + this.password\n              : null\n    this.query =\n            this.search && this.search.startsWith('?')\n              ? this.search.slice(1)\n              : null\n  }\n\n  format () {\n    return this.toString()\n  }\n}\n\nmodule.exports = {\n  URLWithLegacySupport,\n  URLSearchParams,\n  format,\n  defaultBase\n}\n"],"names":[],"mappings":"AAAA;AAEA,MAAM,EAAE,GAAG,EAAE,eAAe,EAAE,MAAM,EAAE;AAEtC,8CAA8C;AAC9C,MAAM,cAAc;AAEpB,MAAM,6BAA6B;IACjC,YAAa,MAAM,EAAE,EAAE,OAAO,WAAW,CAAE;QACzC,KAAK,CAAC,KAAK;QACX,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM;QACvC,IAAI,CAAC,IAAI,GACD,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,GAC1B,IAAI,CAAC,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,GACnC;QACZ,IAAI,CAAC,KAAK,GACF,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAClC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAClB;IACd;IAEA,SAAU;QACR,OAAO,IAAI,CAAC,QAAQ;IACtB;AACF;AAEA,OAAO,OAAO,GAAG;IACf;IACA;IACA;IACA;AACF","ignoreList":[0]}},
    {"offset": {"line": 4463, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4468, "column": 0}, "map": {"version":3,"sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/iso-url/src/relative.js"],"sourcesContent":["'use strict'\n\nconst { URLWithLegacySupport, format } = require('./url')\n\n/**\n * @param {string | undefined} url\n * @param {any} [location]\n * @param {any} [protocolMap]\n * @param {any} [defaultProtocol]\n */\nmodule.exports = (url, location = {}, protocolMap = {}, defaultProtocol) => {\n  let protocol = location.protocol\n    ? location.protocol.replace(':', '')\n    : 'http'\n\n  // Check protocol map\n  protocol = (protocolMap[protocol] || defaultProtocol || protocol) + ':'\n  let urlParsed\n\n  try {\n    urlParsed = new URLWithLegacySupport(url)\n  } catch (err) {\n    urlParsed = {}\n  }\n\n  const base = Object.assign({}, location, {\n    protocol: protocol || urlParsed.protocol,\n    host: location.host || urlParsed.host\n  })\n\n  return new URLWithLegacySupport(url, format(base)).toString()\n}\n"],"names":[],"mappings":"AAAA;AAEA,MAAM,EAAE,oBAAoB,EAAE,MAAM,EAAE;AAEtC;;;;;CAKC,GACD,OAAO,OAAO,GAAG,CAAC,KAAK,WAAW,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC,EAAE;IACtD,IAAI,WAAW,SAAS,QAAQ,GAC5B,SAAS,QAAQ,CAAC,OAAO,CAAC,KAAK,MAC/B;IAEJ,qBAAqB;IACrB,WAAW,CAAC,WAAW,CAAC,SAAS,IAAI,mBAAmB,QAAQ,IAAI;IACpE,IAAI;IAEJ,IAAI;QACF,YAAY,IAAI,qBAAqB;IACvC,EAAE,OAAO,KAAK;QACZ,YAAY,CAAC;IACf;IAEA,MAAM,OAAO,OAAO,MAAM,CAAC,CAAC,GAAG,UAAU;QACvC,UAAU,YAAY,UAAU,QAAQ;QACxC,MAAM,SAAS,IAAI,IAAI,UAAU,IAAI;IACvC;IAEA,OAAO,IAAI,qBAAqB,KAAK,OAAO,OAAO,QAAQ;AAC7D","ignoreList":[0]}},
    {"offset": {"line": 4491, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4496, "column": 0}, "map": {"version":3,"sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/iso-url/index.js"],"sourcesContent":["'use strict'\n\nconst {\n  URLWithLegacySupport,\n  format,\n  URLSearchParams,\n  defaultBase\n} = require('./src/url')\nconst relative = require('./src/relative')\n\nmodule.exports = {\n  URL: URLWithLegacySupport,\n  URLSearchParams,\n  format,\n  relative,\n  defaultBase\n}\n"],"names":[],"mappings":"AAAA;AAEA,MAAM,EACJ,oBAAoB,EACpB,MAAM,EACN,eAAe,EACf,WAAW,EACZ;AACD,MAAM;AAEN,OAAO,OAAO,GAAG;IACf,KAAK;IACL;IACA;IACA;IACA;AACF","ignoreList":[0]}},
    {"offset": {"line": 4506, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4512, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/is-ipfs/src/index.ts"],"sourcesContent":["/**\n * @packageDocumentation\n *\n * A suite of util methods that provides efficient validation.\n *\n * Detection of IPFS Paths and identifiers in URLs is a two-stage process:\n *\n * 1. `pathPattern`/`pathGatewayPattern`/`subdomainGatewayPattern` regex is applied to quickly identify potential candidates\n * 2. proper CID validation is applied to remove false-positives\n *\n * @example\n *\n * ```TypeScript\n * import * as isIPFS from 'is-ipfs'\n *\n * isIPFS.multihash('QmYjtig7VJQ6XsnUjqqJvj7QaMcCAwtrgNdahSiFofrE7o') // true\n * isIPFS.multihash('noop') // false\n *\n * isIPFS.cid('QmYjtig7VJQ6XsnUjqqJvj7QaMcCAwtrgNdahSiFofrE7o') // true (CIDv0)\n * isIPFS.cid('bafybeiasb5vpmaounyilfuxbd3lryvosl4yefqrfahsb2esg46q6tu6y5q') // true (CIDv1 in Base32)\n * isIPFS.cid('zdj7WWeQ43G6JJvLWQWZpyHuAMq6uYWRjkBXFad11vE2LHhQ7') // true (CIDv1 in Base58btc)\n * isIPFS.cid('noop') // false\n *\n * isIPFS.base32cid('bafybeie5gq4jxvzmsym6hjlwxej4rwdoxt7wadqvmmwbqi7r27fclha2va') // true\n * isIPFS.base32cid('QmYjtig7VJQ6XsnUjqqJvj7QaMcCAwtrgNdahSiFofrE7o') // false\n *\n * isIPFS.url('https://ipfs.io/ipfs/QmYjtig7VJQ6XsnUjqqJvj7QaMcCAwtrgNdahSiFofrE7o') // true\n * isIPFS.url('https://ipfs.io/ipfs/QmbWqxBEKC3P8tqsKc98xmWNzrzDtRLMiMPL8wBuTGsMnR?filename=guardian.jpg') // true\n * isIPFS.url('https://ipfs.io/ipns/github.com') // true\n * isIPFS.url('https://bafybeie5gq4jxvzmsym6hjlwxej4rwdoxt7wadqvmmwbqi7r27fclha2va.ipfs.dweb.link') // true\n * isIPFS.url('http://en.wikipedia-on-ipfs.org.ipfs.localhost:8080') // true\n * isIPFS.url('https://github.com/ipfs/js-ipfs/blob/master/README.md') // false\n * isIPFS.url('https://google.com') // false\n *\n * isIPFS.path('/ipfs/QmYjtig7VJQ6XsnUjqqJvj7QaMcCAwtrgNdahSiFofrE7o') // true\n * isIPFS.path('/ipfs/QmbcBPAwCDxRMB1Qe7CRQmxdrTSkxKwM9y6rZw2FjGtbsb/?weird-filename=test.jpg') // true\n * isIPFS.path('/ipns/github.com') // true\n * isIPFS.path('/ipfs/js-ipfs/blob/master/README.md') // false\n *\n * isIPFS.urlOrPath('https://ipfs.io/ipfs/QmYjtig7VJQ6XsnUjqqJvj7QaMcCAwtrgNdahSiFofrE7o') // true\n * isIPFS.urlOrPath('https://ipfs.io/ipns/github.com') // true\n * isIPFS.urlOrPath('/ipfs/QmYjtig7VJQ6XsnUjqqJvj7QaMcCAwtrgNdahSiFofrE7o') // true\n * isIPFS.urlOrPath('/ipns/github.com') // true\n * isIPFS.urlOrPath('https://bafybeie5gq4jxvzmsym6hjlwxej4rwdoxt7wadqvmmwbqi7r27fclha2va.ipfs.dweb.link') // true\n * isIPFS.urlOrPath('https://google.com') // false\n *\n * isIPFS.ipfsUrl('https://ipfs.io/ipfs/QmYjtig7VJQ6XsnUjqqJvj7QaMcCAwtrgNdahSiFofrE7o') // true\n * isIPFS.ipfsUrl('https://ipfs.io/ipfs/invalid-hash') // false\n *\n * isIPFS.ipnsUrl('https://ipfs.io/ipfs/QmYjtig7VJQ6XsnUjqqJvj7QaMcCAwtrgNdahSiFofrE7o') // false\n * isIPFS.ipnsUrl('https://ipfs.io/ipns/github.com') // true\n *\n * isIPFS.ipfsPath('/ipfs/QmYjtig7VJQ6XsnUjqqJvj7QaMcCAwtrgNdahSiFofrE7o') // true\n * isIPFS.ipfsPath('/ipfs/invalid-hash') // false\n *\n * isIPFS.ipnsPath('/ipfs/QmYjtig7VJQ6XsnUjqqJvj7QaMcCAwtrgNdahSiFofrE7o') // false\n * isIPFS.ipnsPath('/ipns/github.com') // true\n *\n * isIPFS.cidPath('QmYjtig7VJQ6XsnUjqqJvj7QaMcCAwtrgNdahSiFofrE7o/path/to/file') // true\n * isIPFS.cidPath('QmYjtig7VJQ6XsnUjqqJvj7QaMcCAwtrgNdahSiFofrE7o/') // true\n * isIPFS.cidPath('QmYjtig7VJQ6XsnUjqqJvj7QaMcCAwtrgNdahSiFofrE7o') // false\n * isIPFS.cidPath('/ipfs/QmYjtig7VJQ6XsnUjqqJvj7QaMcCAwtrgNdahSiFofrE7o') // false\n * isIPFS.cidPath('/ipfs/QmYjtig7VJQ6XsnUjqqJvj7QaMcCAwtrgNdahSiFofrE7o/file') // false\n *\n * isIPFS.subdomain('http://bafybeie5gq4jxvzmsym6hjlwxej4rwdoxt7wadqvmmwbqi7r27fclha2va.ipfs.dweb.link') // true\n * isIPFS.subdomain('http://bafybeiabc2xofh6tdi6vutusorpumwcikw3hf3st4ecjugo6j52f6xwc6q.ipns.dweb.link') // true\n * isIPFS.subdomain('http://www.bafybeie5gq4jxvzmsym6hjlwxej4rwdoxt7wadqvmmwbqi7r27fclha2va.ipfs.dweb.link') // false\n * isIPFS.subdomain('http://bafybeie5gq4jxvzmsym6hjlwxej4rwdoxt7wadqvmmwbqi7r27fclha2va.dweb.link') // false\n *\n * isIPFS.ipfsSubdomain('http://bafybeie5gq4jxvzmsym6hjlwxej4rwdoxt7wadqvmmwbqi7r27fclha2va.ipfs.dweb.link') // true\n * isIPFS.ipfsSubdomain('http://bafybeie5gq4jxvzmsym6hjlwxej4rwdoxt7wadqvmmwbqi7r27fclha2va.dweb.link') // false\n *\n * isIPFS.ipnsSubdomain('http://bafybeiabc2xofh6tdi6vutusorpumwcikw3hf3st4ecjugo6j52f6xwc6q.ipns.dweb.link') // true\n * isIPFS.ipnsSubdomain('http://bafybeiabc2xofh6tdi6vutusorpumwcikw3hf3st4ecjugo6j52f6xwc6q.dweb.link') // false\n * isIPFS.ipnsSubdomain('http://QmcNioXSC1bfJj1dcFErhUfyjFzoX2HodkRccsFFVJJvg8.ipns.dweb.link') // false\n * isIPFS.ipnsSubdomain('http://en.wikipedia-on-ipfs.org.ipns.localhost:8080') // true (assuming DNSLink)\n * isIPFS.ipnsSubdomain('http://en-wikipedia--on--ipfs-org.ipns.localhost:8080') // true (assuming inlined DNSLink)\n * isIPFS.ipnsSubdomain('http://hostname-without-tld-.ipns.dweb.link') // false (not a CID, invalid DNS label)\n *\n * isIPFS.multiaddr('/ip4/127.0.0.1/udp/1234') // true\n * isIPFS.multiaddr('/ip4/127.0.0.1/udp/1234/http') // true\n * isIPFS.multiaddr('/ip6/::1/udp/1234') // true\n * isIPFS.multiaddr('ip6/::1/udp/1234') // false\n * isIPFS.multiaddr('/yoloinvalid/::1/udp/1234') // false\n *\n * isIPFS.peerMultiaddr('/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSoooo4') // true\n * isIPFS.peerMultiaddr('/ipfs/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSoooo4') // true (legacy notation)\n * isIPFS.peerMultiaddr('/ip4/127.0.0.1/tcp/1234/ws/p2p/QmUjNmr8TgJCn1Ao7DvMy4cjoZU15b9bwSCBLE3vwXiwgj') // true\n * isIPFS.peerMultiaddr('/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSoooo4/p2p-circuit/p2p/QmUjNmr8TgJCn1Ao7DvMy4cjoZU15b9bwSCBLE3vwXiwgj') // true\n * isIPFS.peerMultiaddr('/dnsaddr/bootstrap.libp2p.io') // false (key missing, needs additional DNS lookup to tell if this is valid)\n * isIPFS.peerMultiaddr('/dnsaddr/bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN') // true (key present, ip and port can be resolved later)\n * isIPFS.peerMultiaddr('/ip4/127.0.0.1/udp/1234') // false (key missing)\n * ```\n */\n\nimport * as mafmt from '@multiformats/mafmt'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { URL } from 'iso-url'\nimport { base32 } from 'multiformats/bases/base32'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { CID } from 'multiformats/cid'\nimport * as Digest from 'multiformats/hashes/digest'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nexport const pathGatewayPattern = /^https?:\\/\\/[^/]+\\/(ip[fn]s)\\/([^/?#]+)/\nexport const pathPattern = /^\\/(ip[fn]s)\\/([^/?#]+)/\nconst defaultProtocolMatch = 1\nconst defaultHashMath = 2\n\n// CID, libp2p-key or DNSLink\nexport const subdomainGatewayPattern = /^https?:\\/\\/([^/]+)\\.(ip[fn]s)\\.[^/?]+/\nconst subdomainIdMatch = 1\nconst subdomainProtocolMatch = 2\n\n// Fully qualified domain name (FQDN) that has an explicit .tld suffix\nconst fqdnWithTld = /^(([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])\\.)+([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])$/\n\nfunction isMultihash (hash: Uint8Array | string): boolean {\n  const formatted = convertToString(hash)\n\n  if (formatted === false) {\n    return false\n  }\n\n  try {\n    Digest.decode(base58btc.decode(`z${formatted}`))\n  } catch {\n    return false\n  }\n\n  return true\n}\n\nfunction isMultiaddr (input: string | Uint8Array | Multiaddr): input is Multiaddr {\n  try {\n    return Boolean(multiaddr(input))\n  } catch {\n    return false\n  }\n}\n\nfunction isBase32EncodedMultibase (hash: CID | string | Uint8Array): boolean {\n  try {\n    let cid: CID | null\n\n    if (isString(hash)) {\n      cid = CID.parse(hash)\n    } else {\n      cid = CID.asCID(hash)\n    }\n\n    if (cid == null) {\n      return false\n    }\n\n    base32.decode(cid.toString())\n  } catch {\n    return false\n  }\n\n  return true\n}\n\nfunction isCID (hash: CID | Uint8Array | string): hash is CID {\n  try {\n    if (isString(hash)) {\n      return Boolean(CID.parse(hash))\n    }\n\n    if (hash instanceof Uint8Array) {\n      return Boolean(CID.decode(hash))\n    }\n\n    return Boolean(CID.asCID(hash)) // eslint-disable-line no-new\n  } catch {\n    return false\n  }\n}\n\n/**\n * @param {string | Uint8Array | Multiaddr} input\n */\nfunction isPeerMultiaddr (input: string | Uint8Array | Multiaddr): boolean {\n  return isMultiaddr(input) && mafmt.P2P.matches(input)\n}\n\n/**\n * @param {string | Uint8Array} input\n * @param {RegExp | string} pattern\n * @param {number} [protocolMatch=1]\n * @param {number} [hashMatch=2]\n */\nfunction isIpfs (input: string | Uint8Array, pattern: RegExp | string, protocolMatch: number = defaultProtocolMatch, hashMatch: number = defaultHashMath): boolean {\n  const formatted = convertToString(input)\n  if (formatted === false) {\n    return false\n  }\n\n  const match = formatted.match(pattern)\n  if (match == null) {\n    return false\n  }\n\n  if (match[protocolMatch] !== 'ipfs') {\n    return false\n  }\n\n  let hash = match[hashMatch]\n\n  if (hash != null && pattern === subdomainGatewayPattern) {\n    // when doing checks for subdomain context\n    // ensure hash is case-insensitive\n    // (browsers force-lowercase authority component anyway)\n    hash = hash.toLowerCase()\n  }\n\n  return isCID(hash)\n}\n\n/**\n *\n * @param {string | Uint8Array} input\n * @param {string | RegExp} pattern\n * @param {number} [protocolMatch=1]\n * @param {number} [hashMatch=1]\n */\nfunction isIpns (input: string | Uint8Array, pattern: RegExp | string, protocolMatch: number = defaultProtocolMatch, hashMatch: number = defaultHashMath): boolean {\n  const formatted = convertToString(input)\n  if (formatted === false) {\n    return false\n  }\n  const match = formatted.match(pattern)\n  if (match == null) {\n    return false\n  }\n\n  if (match[protocolMatch] !== 'ipns') {\n    return false\n  }\n\n  let ipnsId = match[hashMatch]\n\n  if (ipnsId != null && pattern === subdomainGatewayPattern) {\n    // when doing checks for subdomain context\n    // ensure ipnsId is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n    ipnsId = ipnsId.toLowerCase()\n    // Check if it is cidv1\n    if (isCID(ipnsId)) return true\n    // Check if it looks like FQDN\n    try {\n      if (!ipnsId.includes('.') && ipnsId.includes('-')) {\n        // name without tld, assuming its inlined into a single DNS label\n        // (https://github.com/ipfs/in-web-browsers/issues/169)\n        // en-wikipedia--on--ipfs-org → en.wikipedia-on-ipfs.org\n        ipnsId = ipnsId.replace(/--/g, '@').replace(/-/g, '.').replace(/@/g, '-')\n      }\n      // URL implementation in web browsers forces lowercase of the hostname\n      const { hostname } = new URL(`http://${ipnsId}`) // eslint-disable-line no-new\n      // Check if potential FQDN has an explicit TLD\n      return fqdnWithTld.test(hostname)\n    } catch (e) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {any} input\n */\nfunction isString (input: any): input is string {\n  return typeof input === 'string'\n}\n\n/**\n * @param {Uint8Array | string} input\n */\nfunction convertToString (input: Uint8Array | string): string | false {\n  if (input instanceof Uint8Array) {\n    return uint8ArrayToString(input, 'base58btc')\n  }\n\n  if (isString(input)) {\n    return input\n  }\n\n  return false\n}\n\n/**\n * Returns `true` if the provided `url` string includes a valid IPFS subdomain\n * (case-insensitive CIDv1) or `false` otherwise.\n */\nexport const ipfsSubdomain = (url: string | Uint8Array): boolean => isIpfs(url, subdomainGatewayPattern, subdomainProtocolMatch, subdomainIdMatch)\n\n/**\n * Returns `true` if the provided `url` string looks like a valid IPNS subdomain\n * (CIDv1 with `libp2p-key` multicodec or something that looks like a FQDN, for\n * example `en.wikipedia-on-ipfs.org.ipns.localhost:8080`) or `false` otherwise.\n *\n * **Note:** `ipnsSubdomain` method works in offline mode: it does not perform\n * actual IPNS record lookup over DHT or other content routing method. It may\n * return false-positives:\n *\n * - To ensure IPNS record  exists, make a call to `/api/v0/name/resolve?arg=<ipnsid>`\n * - To ensure DNSLink exists, make a call to `/api/v0/dns?arg=<fqdn>`\n */\nexport const ipnsSubdomain = (url: string | Uint8Array): boolean => isIpns(url, subdomainGatewayPattern, subdomainProtocolMatch, subdomainIdMatch)\n\n/**\n * Returns `true` if the provided `url` string includes a valid IPFS, looks like\n * an IPNS/DNSLink subdomain or `false` otherwise.\n */\nexport const subdomain = (url: string | Uint8Array): boolean => ipfsSubdomain(url) || ipnsSubdomain(url)\n\n/**\n * Returns `true` if the provided string is a valid IPFS url or `false`\n * otherwise.\n */\nexport const ipfsUrl = (url: string | Uint8Array): boolean => isIpfs(url, pathGatewayPattern) || ipfsSubdomain(url)\n\n/**\n * Returns `true` if the provided string is a valid IPNS url or `false`\n * otherwise.\n */\nexport const ipnsUrl = (url: string | Uint8Array): boolean => isIpns(url, pathGatewayPattern) || ipnsSubdomain(url)\n\n/**\n * Returns `true` if the provided string is a valid IPFS or IPNS url or `false`\n * otherwise.\n */\nexport const url = (url: string | Uint8Array): boolean => ipfsUrl(url) || ipnsUrl(url) || subdomain(url)\nexport const path = (path: string | Uint8Array): boolean => isIpfs(path, pathPattern) || isIpns(path, pathPattern)\n\n/**\n * Returns `true` if the provided string or `Uint8Array`  is a valid `multihash`\n * or `false` otherwise.\n */\nexport { isMultihash as multihash }\n\n/**\n * Returns `true` if the provided `string`, [`Multiaddr`](https://github.com/multiformats/js-multiaddr)\n * or `Uint8Array` represents a valid multiaddr or `false` otherwise.\n */\nexport { isMultiaddr as multiaddr }\n\n/**\n * Returns `true` if the provided `string`, [`Multiaddr`](https://github.com/multiformats/js-multiaddr)\n * or `Uint8Array` represents a valid libp2p peer multiaddr (matching [`P2P`\n * format from `mafmt`](https://github.com/multiformats/js-mafmt#api)) or\n * `false` otherwise.\n */\nexport { isPeerMultiaddr as peerMultiaddr }\n\n/**\n * Returns `true` if the provided string, `Uint8Array` or [`CID`](https://github.com/multiformats/js-multiformats/#readme)\n * object represents a valid [CID](https://docs.ipfs.io/guides/concepts/cid/) or\n * `false` otherwise.\n */\nexport { isCID as cid }\n\n/**\n * Returns `true` if the provided string is a valid `CID` in Base32 encoding or\n * `false` otherwise.\n */\nexport const base32cid = (cid: CID | string | Uint8Array): boolean => (isCID(cid) && isBase32EncodedMultibase(cid))\n\n/**\n * Returns `true` if the provided string is a valid IPFS or IPNS path or `false`\n * otherwise.\n */\nexport const ipfsPath = (path: string | Uint8Array): boolean => isIpfs(path, pathPattern)\n\n/**\n * Returns `true` if the provided string is a valid IPNS path or `false`\n * otherwise.\n */\nexport const ipnsPath = (path: string | Uint8Array): boolean => isIpns(path, pathPattern)\n\n/**\n * Returns `true` if the provided string is a valid IPFS or IPNS url or path or\n * `false` otherwise.\n */\nexport const urlOrPath = (x: string | Uint8Array): boolean => url(x) || path(x)\n\n/**\n * Returns `true` if the provided string is a valid \"CID path\" (IPFS path\n * without `/ipfs/` prefix) or `false` otherwise.\n */\nexport const cidPath = (path: string | Uint8Array | CID): boolean => isString(path) && !isCID(path) && isIpfs(`/ipfs/${path}`, pathPattern)\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 4809, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}