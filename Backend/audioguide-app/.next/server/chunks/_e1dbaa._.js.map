{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12, "column": 0}, "map": {"version":3,"sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/src/app/api/upload/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport { Agent } from '@fileverse/agents'\n\n// Initialize the Fileverse agent with server-side env vars\nconst agent = new Agent({ \n  chain: process.env.CHAIN || 'gnosis',\n  privateKey: process.env.PRIVATE_KEY,\n  pinataJWT: process.env.PINATA_JWT,\n  pinataGateway: process.env.PINATA_GATEWAY,\n  pimlicoAPIKey: process.env.PIMLICO_API_KEY,\n})\n\n// Initialize storage with DaVinci namespace\nawait agent.setupStorage('DaVinci')\n\nexport async function GET() {\n  try {\n    // Get all files from the DaVinci folder\n    const files = await agent.listFiles()\n    return NextResponse.json({ files })\n  } catch (error) {\n    console.error('Failed to fetch files:', error)\n    return NextResponse.json(\n      { error: 'Failed to fetch files' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const { content, action, fileId } = await request.json()\n\n    // Initialize storage with DaVinci namespace\n    await agent.setupStorage('DaVinci')\n\n    if (action === 'delete' && fileId) {\n      const result = await agent.delete(BigInt(fileId))\n      return NextResponse.json({ \n        success: true, \n        result: {\n          hash: result.hash,\n          fileId: result.fileId.toString(),\n          portalAddress: result.portalAddress\n        }\n      })\n    }\n\n    // Create file using Fileverse agent\n    const file = await agent.create(content)\n    console.log('File created:', file)\n\n    // Get the file content after creation\n    const fileContent = await agent.getFile(file.fileId)\n    console.log('File content:', fileContent)\n\n    return NextResponse.json({ \n      hash: file.hash,\n      fileId: file.fileId.toString(),\n      content: fileContent?.content || content,\n      portalAddress: file.portalAddress\n    })\n  } catch (error) {\n    console.error('Failed to upload using Fileverse:', error)\n    return NextResponse.json(\n      { error: 'Failed to upload content' },\n      { status: 500 }\n    )\n  }\n} "],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,2DAA2D;AAC3D,MAAM,QAAQ,IAAI,gJAAA,CAAA,QAAK,CAAC;IACtB,OAAO,QAAQ,GAAG,CAAC,KAAK,IAAI;IAC5B,YAAY,QAAQ,GAAG,CAAC,WAAW;IACnC,WAAW,QAAQ,GAAG,CAAC,UAAU;IACjC,eAAe,QAAQ,GAAG,CAAC,cAAc;IACzC,eAAe,QAAQ,GAAG,CAAC,eAAe;AAC5C;AAEA,4CAA4C;AAC5C,MAAM,MAAM,YAAY,CAAC;AAElB,eAAe;IACpB,IAAI;QACF,wCAAwC;QACxC,MAAM,QAAQ,MAAM,MAAM,SAAS;QACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAM;IACnC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEtD,4CAA4C;QAC5C,MAAM,MAAM,YAAY,CAAC;QAEzB,IAAI,WAAW,YAAY,QAAQ;YACjC,MAAM,SAAS,MAAM,MAAM,MAAM,CAAC,OAAO;YACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,QAAQ;oBACN,MAAM,OAAO,IAAI;oBACjB,QAAQ,OAAO,MAAM,CAAC,QAAQ;oBAC9B,eAAe,OAAO,aAAa;gBACrC;YACF;QACF;QAEA,oCAAoC;QACpC,MAAM,OAAO,MAAM,MAAM,MAAM,CAAC;QAChC,QAAQ,GAAG,CAAC,iBAAiB;QAE7B,sCAAsC;QACtC,MAAM,cAAc,MAAM,MAAM,OAAO,CAAC,KAAK,MAAM;QACnD,QAAQ,GAAG,CAAC,iBAAiB;QAE7B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,MAAM,KAAK,IAAI;YACf,QAAQ,KAAK,MAAM,CAAC,QAAQ;YAC5B,SAAS,aAAa,WAAW;YACjC,eAAe,KAAK,aAAa;QACnC;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;QACnD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA2B,GACpC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/node_modules/next/dist/src/build/templates/app-route.ts"],"sourcesContent":["import {\n  AppRouteRouteModule,\n  type AppRouteRouteModuleOptions,\n} from '../../server/route-modules/app-route/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\nimport { patchFetch as _patchFetch } from '../../server/lib/patch-fetch'\n\nimport * as userland from 'VAR_USERLAND'\n\n// These are injected by the loader afterwards. This is injected as a variable\n// instead of a replacement because this could also be `undefined` instead of\n// an empty string.\ndeclare const nextConfigOutput: AppRouteRouteModuleOptions['nextConfigOutput']\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\n// INJECT:nextConfigOutput\n\nconst routeModule = new AppRouteRouteModule({\n  definition: {\n    kind: RouteKind.APP_ROUTE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    filename: 'VAR_DEFINITION_FILENAME',\n    bundlePath: 'VAR_DEFINITION_BUNDLE_PATH',\n  },\n  resolvedPagePath: 'VAR_RESOLVED_PAGE_PATH',\n  nextConfigOutput,\n  userland,\n})\n\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule\n\nfunction patchFetch() {\n  return _patchFetch({\n    workAsyncStorage,\n    workUnitAsyncStorage,\n  })\n}\n\nexport {\n  routeModule,\n  workAsyncStorage,\n  workUnitAsyncStorage,\n  serverHooks,\n  patchFetch,\n}\n"],"names":["AppRouteRouteModule","RouteKind","patchFetch","_patchFetch","userland","routeModule","definition","kind","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","workAsyncStorage","workUnitAsyncStorage","serverHooks"],"mappings":";;;;;;;AAAA,SACEA,mBAAmB,QAEd,uDAAsD;AAC7D,SAASC,SAAS,QAAQ,0BAAyB;AACnD,SAASC,cAAcC,WAAW,QAAQ,+BAA8B;AAExE,YAAYC,cAAc,eAAc;;;;;;;;;AAOxC,2EAA2E;AAC3E,UAAU;AACV,MAAA,mBAAA,CAA0B;AAE1B,MAAMC,cAAc,8MAAIL,sBAAAA,CAAoB;IAC1CM,YAAY;QACVC,MAAMN,6KAAAA,CAAUO,SAAS;QACzBC,MAAM;QACNC,UAAU;QACVC,UAAU;QACVC,YAAY;IACd;IACAC,kBAAkB;IAClBC;cACAV;AACF;AAEA,2EAA2E;AAC3E,2EAA2E;AAC3E,mCAAmC;AACnC,MAAM,EAAEW,gBAAgB,EAAEC,oBAAoB,EAAEC,WAAW,EAAE,GAAGZ;AAEhE,SAASH;IACP,oLAAOC,aAAAA,EAAY;QACjBY;QACAC;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 136, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}