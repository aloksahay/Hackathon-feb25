{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///Users/alok/Projects/audio-guide/Backend/audioguide-app/src/app/api/translate/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport OpenAI from 'openai'\n\nconst venice = new OpenAI({\n  apiKey: process.env.VENICE_API_KEY || '',\n  baseURL: \"https://api.venice.ai/api/v1\"\n})\n\nexport async function POST(request: Request) {\n  try {\n    const { content, language } = await request.json()\n    \n    console.log('Translating to:', language)\n\n    const response = await venice.chat.completions.create({\n      model: \"dolphin-2.9.2-qwen2-72b\",\n      messages: [\n        {\n          role: \"system\",\n          content: `Translate the following text to ${language === 'fr' ? 'French' : language === 'es' ? 'Spanish' : 'English'}`\n        },\n        {\n          role: \"user\",\n          content\n        }\n      ],\n      temperature: 0.7\n    })\n\n    // Log the full response to see its structure\n    console.log('Venice response:', JSON.stringify(response, null, 2))\n\n    // Parse the response which might be a string\n    const parsedResponse = typeof response === 'string' ? JSON.parse(response) : response\n\n    // Get the translated text from the parsed response\n    const translatedText = parsedResponse?.choices?.[0]?.message?.content\n\n    if (!translatedText) {\n      console.error('No translation in response:', parsedResponse)\n      throw new Error('No translation generated')\n    }\n\n    return NextResponse.json({ translatedText })\n\n  } catch (error) {\n    console.error('Failed to translate:', error)\n    if (error instanceof OpenAI.APIError) {\n      console.error('Status:', error.status)\n      console.error('Message:', error.message)\n    }\n    return NextResponse.json(\n      { error: 'Failed to translate content' }, \n      { status: 500 }\n    )\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,kJAAA,CAAA,UAAM,CAAC;IACxB,QAAQ,QAAQ,GAAG,CAAC,cAAc,IAAI;IACtC,SAAS;AACX;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEhD,QAAQ,GAAG,CAAC,mBAAmB;QAE/B,MAAM,WAAW,MAAM,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YACpD,OAAO;YACP,UAAU;gBACR;oBACE,MAAM;oBACN,SAAS,CAAC,gCAAgC,EAAE,aAAa,OAAO,WAAW,aAAa,OAAO,YAAY,WAAW;gBACxH;gBACA;oBACE,MAAM;oBACN;gBACF;aACD;YACD,aAAa;QACf;QAEA,6CAA6C;QAC7C,QAAQ,GAAG,CAAC,oBAAoB,KAAK,SAAS,CAAC,UAAU,MAAM;QAE/D,6CAA6C;QAC7C,MAAM,iBAAiB,OAAO,aAAa,WAAW,KAAK,KAAK,CAAC,YAAY;QAE7E,mDAAmD;QACnD,MAAM,iBAAiB,gBAAgB,SAAS,CAAC,EAAE,EAAE,SAAS;QAE9D,IAAI,CAAC,gBAAgB;YACnB,QAAQ,KAAK,CAAC,+BAA+B;YAC7C,MAAM,IAAI,MAAM;QAClB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAe;IAE5C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,IAAI,iBAAiB,kJAAA,CAAA,UAAM,CAAC,QAAQ,EAAE;YACpC,QAAQ,KAAK,CAAC,WAAW,MAAM,MAAM;YACrC,QAAQ,KAAK,CAAC,YAAY,MAAM,OAAO;QACzC;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA8B,GACvC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 190, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}